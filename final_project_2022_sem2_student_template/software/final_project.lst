680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 17 Apr 2023      Time: 12:05:51          Source: C:\FINAL_PROJECT_2022_SEM2_STUDENT_TEMPLATE\SOFTWARE\FINAL_PROJECT.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  456C 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  3150      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1FCE      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\FINAL_PROJECT_2022_SEM2_STUDENT_TEMPLATE\SOFTWARE\FINAL_PROJECT.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; #include <stdio.h>
                     472   ; #include <string.h>
                     473   ; #include <stdlib.h>
                     474   ; #include <limits.h>
                     475   ; #include <ctype.h>
                     476   ; #include "snake.h"
                     477   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     478   ; //#define StartOfExceptionVectorTable 0x08030000
                     479   ; #define StartOfExceptionVectorTable 0x0B000000
                     480   ; // use 0C000000 for dram or hex 08040000 for sram
                     481   ; #define TopOfStack 0x08040000
                     482   ; //#define TopOfStack 0x0C000000
                     483   ; #define Timer8Data      *(volatile unsigned char *)(0x0040013C)
                     484   ; #define Timer8Control   *(volatile unsigned char *)(0x0040013E)
                     485   ; #define Timer8Status    *(volatile unsigned char *)(0x0040013E)
                     486   ; /*********************************************************************************************
                     487   ; **	VGA Register Address
                     488   ; *********************************************************************************************/
                     489   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     490   ; unsigned int i, x, y, z, PortA_Count;
                     491   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     492   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     493   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     494   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     495   ; unsigned int PC, SSP, USP ;
                     496   ; unsigned short int SR;
                     497   ; // Breakpoint variables
                     498   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     499   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     500   ; unsigned int BreakPointSetOrCleared[8] ;
                     501   ; unsigned int InstructionSize ;
                     502   ; // watchpoint variables
                     503   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     504   ; unsigned int WatchPointSetOrCleared[8] ;
                     505   ; char WatchPointString[8][100] ;
                     506   ; char    TempString[100] ;
                     507   ; unsigned int i, x, y, z, PortA_Count;
                     508   ; unsigned int Timer8Count;
                     509   ; int score;
                     510   ; int timer;
                     511   ; struct
                     512   ; {
                     513   ; coord_t xy[SNAKE_LENGTH_LIMIT];
                     514   ; int length;
                     515   ; dir_t direction;
                     516   ; int speed;
                     517   ; int speed_increase;
                     518   ; coord_t food;
                     519   ; } Snake;
                     520   ; const coord_t screensize = {NUM_VGA_COLUMNS,NUM_VGA_ROWS};
                     521   ; int waiting_for_direction_to_be_implemented;
                     522   ; /************************************************************************************
                     523   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     524   ; ************************************************************************************/
                     525   ; void Wait1ms(void)
                     526   ; {
                     527   _Wait1ms:
00000932  2F02       528          move.l    D2,-(A7)
                     529   ; long int  i ;
                     530   ; for(i = 0; i < 1000; i ++)
00000934  4282       531          clr.l     D2
                     532   Wait1ms_1:
00000936  0C82 0000  533          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       534          bge.s     Wait1ms_3
0000093E  5282       535          addq.l    #1,D2
00000940  60F4       536          bra       Wait1ms_1
                     537   Wait1ms_3:
00000942  241F       538          move.l    (A7)+,D2
00000944  4E75       539          rts
                     540   ; ;
                     541   ; }
                     542   ; /************************************************************************************
                     543   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     544   ; **************************************************************************************/
                     545   ; void Wait3ms(void)
                     546   ; {
                     547   _Wait3ms:
00000946  2F02       548          move.l    D2,-(A7)
                     549   ; int i ;
                     550   ; for(i = 0; i < 3; i++)
00000948  4282       551          clr.l     D2
                     552   Wait3ms_1:
0000094A  0C82 0000  553          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       554          bge.s     Wait3ms_3
                     555   ; Wait1ms() ;
00000952  4EB8 0932  556          jsr       _Wait1ms
00000956  5282       557          addq.l    #1,D2
00000958  60F0       558          bra       Wait3ms_1
                     559   Wait3ms_3:
0000095A  241F       560          move.l    (A7)+,D2
0000095C  4E75       561          rts
                     562   ; }
                     563   ; void Wait100ms(void)
                     564   ; {
                     565   _Wait100ms:
0000095E  2F02       566          move.l    D2,-(A7)
                     567   ; int i ;
                     568   ; for(i = 0; i < 100; i++)
00000960  4282       569          clr.l     D2
                     570   Wait100ms_1:
00000962  0C82 0000  571          cmp.l     #100,D2
00000966  0064      
00000968  6C08       572          bge.s     Wait100ms_3
                     573   ; Wait1ms() ;
0000096A  4EB8 0932  574          jsr       _Wait1ms
0000096E  5282       575          addq.l    #1,D2
00000970  60F0       576          bra       Wait100ms_1
                     577   Wait100ms_3:
00000972  241F       578          move.l    (A7)+,D2
00000974  4E75       579          rts
                     580   ; }
                     581   ; void Wait300ms(void)
                     582   ; {
                     583   _Wait300ms:
00000976  2F02       584          move.l    D2,-(A7)
                     585   ; int i ;
                     586   ; for(i = 0; i < 300; i++)
00000978  4282       587          clr.l     D2
                     588   Wait300ms_1:
0000097A  0C82 0000  589          cmp.l     #300,D2
0000097E  012C      
00000980  6C08       590          bge.s     Wait300ms_3
                     591   ; Wait1ms() ;
00000982  4EB8 0932  592          jsr       _Wait1ms
00000986  5282       593          addq.l    #1,D2
00000988  60F0       594          bra       Wait300ms_1
                     595   Wait300ms_3:
0000098A  241F       596          move.l    (A7)+,D2
0000098C  4E75       597          rts
                     598   ; }
                     599   ; void Wait1s(void)
                     600   ; {
                     601   _Wait1s:
0000098E  2F02       602          move.l    D2,-(A7)
                     603   ; int i ;
                     604   ; for(i = 0; i < 1000; i++)
00000990  4282       605          clr.l     D2
                     606   Wait1s_1:
00000992  0C82 0000  607          cmp.l     #1000,D2
00000996  03E8      
00000998  6C08       608          bge.s     Wait1s_3
                     609   ; Wait1ms() ;
0000099A  4EB8 0932  610          jsr       _Wait1ms
0000099E  5282       611          addq.l    #1,D2
000009A0  60F0       612          bra       Wait1s_1
                     613   Wait1s_3:
000009A2  241F       614          move.l    (A7)+,D2
000009A4  4E75       615          rts
                     616   ; }
                     617   ; /*********************************************************************************************
                     618   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     619   ; *********************************************************************************************/
                     620   ; void Init_LCD(void)
                     621   ; {
                     622   _Init_LCD:
                     623   ; LCDcommand = (char)(0x0c) ;
000009A6  13FC 000C  624          move.b    #12,4194336
000009AA  0040 0020 
                     625   ; Wait3ms() ;
000009AE  4EB8 0946  626          jsr       _Wait3ms
                     627   ; LCDcommand = (char)(0x38) ;
000009B2  13FC 0038  628          move.b    #56,4194336
000009B6  0040 0020 
                     629   ; Wait3ms() ;
000009BA  4EB8 0946  630          jsr       _Wait3ms
000009BE  4E75       631          rts
                     632   ; }
                     633   ; /******************************************************************************
                     634   ; *subroutine to output a single character held in d1 to the LCD display
                     635   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     636   ; *current cursor position
                     637   ; *******************************************************************************/
                     638   ; void Outchar(int c)
                     639   ; {
                     640   _Outchar:
000009C0  4E56 0000  641          link      A6,#0
                     642   ; LCDdata = (char)(c);
000009C4  202E 0008  643          move.l    8(A6),D0
000009C8  13C0 0040  644          move.b    D0,4194338
000009CC  0022      
                     645   ; Wait1ms() ;
000009CE  4EB8 0932  646          jsr       _Wait1ms
000009D2  4E5E       647          unlk      A6
000009D4  4E75       648          rts
                     649   ; }
                     650   ; /**********************************************************************************
                     651   ; *subroutine to output a message at the current cursor position of the LCD display
                     652   ; ************************************************************************************/
                     653   ; void OutMess(char *theMessage)
                     654   ; {
                     655   _OutMess:
000009D6  4E56 FFFC  656          link      A6,#-4
                     657   ; char c ;
                     658   ; while((c = *theMessage++) != (char)(0))
                     659   OutMess_1:
000009DA  206E 0008  660          move.l    8(A6),A0
000009DE  52AE 0008  661          addq.l    #1,8(A6)
000009E2  1D50 FFFF  662          move.b    (A0),-1(A6)
000009E6  1010       663          move.b    (A0),D0
000009E8  6712       664          beq.s     OutMess_3
                     665   ; Outchar(c) ;
000009EA  122E FFFF  666          move.b    -1(A6),D1
000009EE  4881       667          ext.w     D1
000009F0  48C1       668          ext.l     D1
000009F2  2F01       669          move.l    D1,-(A7)
000009F4  4EB8 09C0  670          jsr       _Outchar
000009F8  584F       671          addq.w    #4,A7
000009FA  60DE       672          bra       OutMess_1
                     673   OutMess_3:
000009FC  4E5E       674          unlk      A6
000009FE  4E75       675          rts
                     676   ; }
                     677   ; /******************************************************************************
                     678   ; *subroutine to clear the line by issuing 24 space characters
                     679   ; *******************************************************************************/
                     680   ; void Clearln(void)
                     681   ; {
                     682   _Clearln:
00000A00  2F02       683          move.l    D2,-(A7)
                     684   ; unsigned char i ;
                     685   ; for(i = 0; i < 24; i ++)
00000A02  4202       686          clr.b     D2
                     687   Clearln_1:
00000A04  0C02 0018  688          cmp.b     #24,D2
00000A08  640E       689          bhs.s     Clearln_3
                     690   ; Outchar(' ') ;  /* write a space char to the LCD display */
00000A0A  4878 0020  691          pea       32
00000A0E  4EB8 09C0  692          jsr       _Outchar
00000A12  584F       693          addq.w    #4,A7
00000A14  5202       694          addq.b    #1,D2
00000A16  60EC       695          bra       Clearln_1
                     696   Clearln_3:
00000A18  241F       697          move.l    (A7)+,D2
00000A1A  4E75       698          rts
                     699   ; }
                     700   ; /******************************************************************************
                     701   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     702   ; *******************************************************************************/
                     703   ; void Oline0(char *theMessage)
                     704   ; {
                     705   _Oline0:
00000A1C  4E56 0000  706          link      A6,#0
                     707   ; LCDcommand = (char)(0x80) ;
00000A20  13FC 0080  708          move.b    #128,4194336
00000A24  0040 0020 
                     709   ; Wait3ms();
00000A28  4EB8 0946  710          jsr       _Wait3ms
                     711   ; Clearln() ;
00000A2C  4EB8 0A00  712          jsr       _Clearln
                     713   ; LCDcommand = (char)(0x80) ;
00000A30  13FC 0080  714          move.b    #128,4194336
00000A34  0040 0020 
                     715   ; Wait3ms() ;
00000A38  4EB8 0946  716          jsr       _Wait3ms
                     717   ; OutMess(theMessage) ;
00000A3C  2F2E 0008  718          move.l    8(A6),-(A7)
00000A40  4EB8 09D6  719          jsr       _OutMess
00000A44  584F       720          addq.w    #4,A7
00000A46  4E5E       721          unlk      A6
00000A48  4E75       722          rts
                     723   ; }
                     724   ; /******************************************************************************
                     725   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     726   ; *******************************************************************************/
                     727   ; void Oline1(char *theMessage)
                     728   ; {
                     729   _Oline1:
00000A4A  4E56 0000  730          link      A6,#0
                     731   ; LCDcommand = (char)(0xC0) ;
00000A4E  13FC 00C0  732          move.b    #192,4194336
00000A52  0040 0020 
                     733   ; Wait3ms();
00000A56  4EB8 0946  734          jsr       _Wait3ms
                     735   ; Clearln() ;
00000A5A  4EB8 0A00  736          jsr       _Clearln
                     737   ; LCDcommand = (char)(0xC0) ;
00000A5E  13FC 00C0  738          move.b    #192,4194336
00000A62  0040 0020 
                     739   ; Wait3ms() ;
00000A66  4EB8 0946  740          jsr       _Wait3ms
                     741   ; OutMess(theMessage) ;
00000A6A  2F2E 0008  742          move.l    8(A6),-(A7)
00000A6E  4EB8 09D6  743          jsr       _OutMess
00000A72  584F       744          addq.w    #4,A7
00000A74  4E5E       745          unlk      A6
00000A76  4E75       746          rts
                     747   ; }
                     748   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     749   ; {
                     750   _InstallExceptionHandler:
00000A78  4E56 FFFC  751          link      A6,#-4
                     752   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A7C  2D7C 0B00  753          move.l    #184549376,-4(A6)
00000A80  0000 FFFC 
                     754   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A84  206E FFFC  755          move.l    -4(A6),A0
00000A88  202E 000C  756          move.l    12(A6),D0
00000A8C  E588       757          lsl.l     #2,D0
00000A8E  21AE 0008  758          move.l    8(A6),0(A0,D0.L)
00000A92  0800      
00000A94  4E5E       759          unlk      A6
00000A96  4E75       760          rts
                     761   ; }
                     762   ; void TestLEDS(void)
                     763   ; {
                     764   _TestLEDS:
00000A98  48E7 3000  765          movem.l   D2/D3,-(A7)
                     766   ; int delay ;
                     767   ; unsigned char count = 0 ;
00000A9C  4202       768          clr.b     D2
                     769   ; while(1)    {
                     770   TestLEDS_1:
                     771   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A9E  1002       772          move.b    D2,D0
00000AA0  E908       773          lsl.b     #4,D0
00000AA2  1202       774          move.b    D2,D1
00000AA4  C23C 000F  775          and.b     #15,D1
00000AA8  D001       776          add.b     D1,D0
00000AAA  13C0 0040  777          move.b    D0,4194326
00000AAE  0016      
00000AB0  13C0 0040  778          move.b    D0,4194324
00000AB4  0014      
00000AB6  13C0 0040  779          move.b    D0,4194322
00000ABA  0012      
00000ABC  13C0 0040  780          move.b    D0,4194320
00000AC0  0010      
00000AC2  13C0 0040  781          move.b    D0,4194310
00000AC6  0006      
00000AC8  13C0 0040  782          move.b    D0,4194308
00000ACC  0004      
00000ACE  13C0 0040  783          move.b    D0,4194306
00000AD2  0002      
00000AD4  13C0 0040  784          move.b    D0,4194304
00000AD8  0000      
                     785   ; for(delay = 0; delay < 200000; delay ++)
00000ADA  4283       786          clr.l     D3
                     787   TestLEDS_4:
00000ADC  0C83 0003  788          cmp.l     #200000,D3
00000AE0  0D40      
00000AE2  6C04       789          bge.s     TestLEDS_6
00000AE4  5283       790          addq.l    #1,D3
00000AE6  60F4       791          bra       TestLEDS_4
                     792   TestLEDS_6:
                     793   ; ;
                     794   ; count ++;
00000AE8  5202       795          addq.b    #1,D2
00000AEA  60B2       796          bra       TestLEDS_1
                     797   ; }
                     798   ; }
                     799   ; void SwitchTest(void)
                     800   ; {
                     801   _SwitchTest:
00000AEC  48E7 3020  802          movem.l   D2/D3/A2,-(A7)
00000AF0  45F9 0000  803          lea       _printf.L,A2
00000AF4  3618      
                     804   ; int i, switches = 0 ;
00000AF6  4283       805          clr.l     D3
                     806   ; printf("\r\n") ;
00000AF8  4879 0000  807          pea       @final_~1_1.L
00000AFC  3EB6      
00000AFE  4E92       808          jsr       (A2)
00000B00  584F       809          addq.w    #4,A7
                     810   ; while(1)    {
                     811   SwitchTest_1:
                     812   ; switches = (PortB << 8) | (PortA) ;
00000B02  1039 0040  813          move.b    4194306,D0
00000B06  0002      
00000B08  C0BC 0000  814          and.l     #255,D0
00000B0C  00FF      
00000B0E  E188       815          lsl.l     #8,D0
00000B10  1239 0040  816          move.b    4194304,D1
00000B14  0000      
00000B16  C2BC 0000  817          and.l     #255,D1
00000B1A  00FF      
00000B1C  8081       818          or.l      D1,D0
00000B1E  2600       819          move.l    D0,D3
                     820   ; printf("\rSwitches SW[7-0] = ") ;
00000B20  4879 0000  821          pea       @final_~1_2.L
00000B24  3EBA      
00000B26  4E92       822          jsr       (A2)
00000B28  584F       823          addq.w    #4,A7
                     824   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000B2A  243C 0000  825          move.l    #128,D2
00000B2E  0080      
                     826   SwitchTest_4:
00000B30  0C82 0000  827          cmp.l     #0,D2
00000B34  0000      
00000B36  6F20       828          ble.s     SwitchTest_6
                     829   ; if((switches & i) == 0)
00000B38  2003       830          move.l    D3,D0
00000B3A  C082       831          and.l     D2,D0
00000B3C  660C       832          bne.s     SwitchTest_7
                     833   ; printf("0") ;
00000B3E  4879 0000  834          pea       @final_~1_3.L
00000B42  3ED0      
00000B44  4E92       835          jsr       (A2)
00000B46  584F       836          addq.w    #4,A7
00000B48  600A       837          bra.s     SwitchTest_8
                     838   SwitchTest_7:
                     839   ; else
                     840   ; printf("1") ;
00000B4A  4879 0000  841          pea       @final_~1_4.L
00000B4E  3ED2      
00000B50  4E92       842          jsr       (A2)
00000B52  584F       843          addq.w    #4,A7
                     844   SwitchTest_8:
00000B54  E282       845          asr.l     #1,D2
00000B56  60D8       846          bra       SwitchTest_4
                     847   SwitchTest_6:
00000B58  60A8       848          bra       SwitchTest_1
                     849   ; }
                     850   ; }
                     851   ; }
                     852   ; /*********************************************************************************************
                     853   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     854   ; *********************************************************************************************/
                     855   ; void Init_RS232(void)
                     856   ; {
                     857   _Init_RS232:
                     858   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B5A  13FC 0015  859          move.b    #21,4194368
00000B5E  0040 0040 
                     860   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B62  13FC 0001  861          move.b    #1,4194372
00000B66  0040 0044 
00000B6A  4E75       862          rts
                     863   ; }
                     864   ; int kbhit(void)
                     865   ; {
                     866   _kbhit:
                     867   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B6C  1039 0040  868          move.b    4194368,D0
00000B70  0040      
00000B72  C03C 0001  869          and.b     #1,D0
00000B76  0C00 0001  870          cmp.b     #1,D0
00000B7A  6604       871          bne.s     kbhit_1
                     872   ; return 1 ;
00000B7C  7001       873          moveq     #1,D0
00000B7E  6002       874          bra.s     kbhit_3
                     875   kbhit_1:
                     876   ; else
                     877   ; return 0 ;
00000B80  4280       878          clr.l     D0
                     879   kbhit_3:
00000B82  4E75       880          rts
                     881   ; }
                     882   ; /*********************************************************************************************************
                     883   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     884   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     885   ; **  to allow the board to communicate with HyperTerminal Program
                     886   ; **
                     887   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     888   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     889   ; **  call _putch() also
                     890   ; *********************************************************************************************************/
                     891   ; int _putch( int c)
                     892   ; {
                     893   __putch:
00000B84  4E56 0000  894          link      A6,#0
                     895   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     896   _putch_1:
00000B88  1039 0040  897          move.b    4194368,D0
00000B8C  0040      
00000B8E  C03C 0002  898          and.b     #2,D0
00000B92  0C00 0002  899          cmp.b     #2,D0
00000B96  6702       900          beq.s     _putch_3
00000B98  60EE       901          bra       _putch_1
                     902   _putch_3:
                     903   ; ;
                     904   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B9A  202E 0008  905          move.l    8(A6),D0
00000B9E  C03C 007F  906          and.b     #127,D0
00000BA2  13C0 0040  907          move.b    D0,4194370
00000BA6  0042      
                     908   ; return c ;                                              // putchar() expects the character to be returned
00000BA8  202E 0008  909          move.l    8(A6),D0
00000BAC  4E5E       910          unlk      A6
00000BAE  4E75       911          rts
                     912   ; }
                     913   ; /*********************************************************************************************************
                     914   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     915   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     916   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     917   ; **
                     918   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     919   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     920   ; **  call _getch() also
                     921   ; *********************************************************************************************************/
                     922   ; int _getch( void )
                     923   ; {
                     924   __getch:
00000BB0  2F02       925          move.l    D2,-(A7)
                     926   ; int c ;
                     927   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     928   _getch_1:
00000BB2  1039 0040  929          move.b    4194368,D0
00000BB6  0040      
00000BB8  C03C 0001  930          and.b     #1,D0
00000BBC  0C00 0001  931          cmp.b     #1,D0
00000BC0  6702       932          beq.s     _getch_3
00000BC2  60EE       933          bra       _getch_1
                     934   _getch_3:
                     935   ; ;
                     936   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000BC4  1039 0040  937          move.b    4194370,D0
00000BC8  0042      
00000BCA  C0BC 0000  938          and.l     #255,D0
00000BCE  00FF      
00000BD0  C0BC 0000  939          and.l     #127,D0
00000BD4  007F      
00000BD6  2400       940          move.l    D0,D2
                     941   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     942   ; if(Echo)
00000BD8  4AB9 0803  943          tst.l     _Echo.L
00000BDC  00E0      
00000BDE  6708       944          beq.s     _getch_4
                     945   ; _putch(c);
00000BE0  2F02       946          move.l    D2,-(A7)
00000BE2  4EB8 0B84  947          jsr       __putch
00000BE6  584F       948          addq.w    #4,A7
                     949   _getch_4:
                     950   ; return c ;
00000BE8  2002       951          move.l    D2,D0
00000BEA  241F       952          move.l    (A7)+,D2
00000BEC  4E75       953          rts
                     954   ; }
                     955   ; // flush the input stream for any unread characters
                     956   ; void FlushKeyboard(void)
                     957   ; {
                     958   _FlushKeyboard:
00000BEE  4E56 FFFC  959          link      A6,#-4
                     960   ; char c ;
                     961   ; while(1)    {
                     962   FlushKeyboard_1:
                     963   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BF2  1039 0040  964          move.b    4194368,D0
00000BF6  0040      
00000BF8  C03C 0001  965          and.b     #1,D0
00000BFC  0C00 0001  966          cmp.b     #1,D0
00000C00  6610       967          bne.s     FlushKeyboard_4
                     968   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000C02  1039 0040  969          move.b    4194370,D0
00000C06  0042      
00000C08  C03C 007F  970          and.b     #127,D0
00000C0C  1D40 FFFF  971          move.b    D0,-1(A6)
00000C10  6002       972          bra.s     FlushKeyboard_5
                     973   FlushKeyboard_4:
                     974   ; else
                     975   ; return ;
00000C12  6002       976          bra.s     FlushKeyboard_6
                     977   FlushKeyboard_5:
00000C14  60DC       978          bra       FlushKeyboard_1
                     979   FlushKeyboard_6:
00000C16  4E5E       980          unlk      A6
00000C18  4E75       981          rts
                     982   ; }
                     983   ; }
                     984   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     985   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     986   ; char xtod(int c)
                     987   ; {
                     988   _xtod:
00000C1A  4E56 0000  989          link      A6,#0
00000C1E  2F02       990          move.l    D2,-(A7)
00000C20  242E 0008  991          move.l    8(A6),D2
                     992   ; if ((char)(c) <= (char)('9'))
00000C24  0C02 0039  993          cmp.b     #57,D2
00000C28  6E08       994          bgt.s     xtod_1
                     995   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000C2A  1002       996          move.b    D2,D0
00000C2C  0400 0030  997          sub.b     #48,D0
00000C30  6014       998          bra.s     xtod_3
                     999   xtod_1:
                    1000   ; else if((char)(c) > (char)('F'))    // assume lower case
00000C32  0C02 0046 1001          cmp.b     #70,D2
00000C36  6F08      1002          ble.s     xtod_4
                    1003   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000C38  1002      1004          move.b    D2,D0
00000C3A  0400 0057 1005          sub.b     #87,D0
00000C3E  6006      1006          bra.s     xtod_3
                    1007   xtod_4:
                    1008   ; else
                    1009   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000C40  1002      1010          move.b    D2,D0
00000C42  0400 0037 1011          sub.b     #55,D0
                    1012   xtod_3:
00000C46  241F      1013          move.l    (A7)+,D2
00000C48  4E5E      1014          unlk      A6
00000C4A  4E75      1015          rts
                    1016   ; }
                    1017   ; int Get2HexDigits(char *CheckSumPtr)
                    1018   ; {
                    1019   _Get2HexDigits:
00000C4C  4E56 0000 1020          link      A6,#0
00000C50  2F02      1021          move.l    D2,-(A7)
                    1022   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C52  2F00      1023          move.l    D0,-(A7)
00000C54  4EB8 0BB0 1024          jsr       __getch
00000C58  2200      1025          move.l    D0,D1
00000C5A  201F      1026          move.l    (A7)+,D0
00000C5C  2F01      1027          move.l    D1,-(A7)
00000C5E  4EB8 0C1A 1028          jsr       _xtod
00000C62  584F      1029          addq.w    #4,A7
00000C64  C0BC 0000 1030          and.l     #255,D0
00000C68  00FF      
00000C6A  E980      1031          asl.l     #4,D0
00000C6C  2F00      1032          move.l    D0,-(A7)
00000C6E  2F01      1033          move.l    D1,-(A7)
00000C70  4EB8 0BB0 1034          jsr       __getch
00000C74  221F      1035          move.l    (A7)+,D1
00000C76  2F00      1036          move.l    D0,-(A7)
00000C78  4EB8 0C1A 1037          jsr       _xtod
00000C7C  584F      1038          addq.w    #4,A7
00000C7E  2200      1039          move.l    D0,D1
00000C80  201F      1040          move.l    (A7)+,D0
00000C82  C2BC 0000 1041          and.l     #255,D1
00000C86  00FF      
00000C88  8081      1042          or.l      D1,D0
00000C8A  2400      1043          move.l    D0,D2
                    1044   ; if(CheckSumPtr)
00000C8C  4AAE 0008 1045          tst.l     8(A6)
00000C90  6706      1046          beq.s     Get2HexDigits_1
                    1047   ; *CheckSumPtr += i ;
00000C92  206E 0008 1048          move.l    8(A6),A0
00000C96  D510      1049          add.b     D2,(A0)
                    1050   Get2HexDigits_1:
                    1051   ; return i ;
00000C98  2002      1052          move.l    D2,D0
00000C9A  241F      1053          move.l    (A7)+,D2
00000C9C  4E5E      1054          unlk      A6
00000C9E  4E75      1055          rts
                    1056   ; }
                    1057   ; int Get4HexDigits(char *CheckSumPtr)
                    1058   ; {
                    1059   _Get4HexDigits:
00000CA0  4E56 0000 1060          link      A6,#0
                    1061   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CA4  2F2E 0008 1062          move.l    8(A6),-(A7)
00000CA8  4EB8 0C4C 1063          jsr       _Get2HexDigits
00000CAC  584F      1064          addq.w    #4,A7
00000CAE  E180      1065          asl.l     #8,D0
00000CB0  2F00      1066          move.l    D0,-(A7)
00000CB2  2F2E 0008 1067          move.l    8(A6),-(A7)
00000CB6  4EB8 0C4C 1068          jsr       _Get2HexDigits
00000CBA  584F      1069          addq.w    #4,A7
00000CBC  2200      1070          move.l    D0,D1
00000CBE  201F      1071          move.l    (A7)+,D0
00000CC0  8081      1072          or.l      D1,D0
00000CC2  4E5E      1073          unlk      A6
00000CC4  4E75      1074          rts
                    1075   ; }
                    1076   ; int Get6HexDigits(char *CheckSumPtr)
                    1077   ; {
                    1078   _Get6HexDigits:
00000CC6  4E56 0000 1079          link      A6,#0
                    1080   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CCA  2F2E 0008 1081          move.l    8(A6),-(A7)
00000CCE  4EB8 0CA0 1082          jsr       _Get4HexDigits
00000CD2  584F      1083          addq.w    #4,A7
00000CD4  E180      1084          asl.l     #8,D0
00000CD6  2F00      1085          move.l    D0,-(A7)
00000CD8  2F2E 0008 1086          move.l    8(A6),-(A7)
00000CDC  4EB8 0C4C 1087          jsr       _Get2HexDigits
00000CE0  584F      1088          addq.w    #4,A7
00000CE2  2200      1089          move.l    D0,D1
00000CE4  201F      1090          move.l    (A7)+,D0
00000CE6  8081      1091          or.l      D1,D0
00000CE8  4E5E      1092          unlk      A6
00000CEA  4E75      1093          rts
                    1094   ; }
                    1095   ; int Get8HexDigits(char *CheckSumPtr)
                    1096   ; {
                    1097   _Get8HexDigits:
00000CEC  4E56 0000 1098          link      A6,#0
                    1099   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CF0  2F2E 0008 1100          move.l    8(A6),-(A7)
00000CF4  4EB8 0CA0 1101          jsr       _Get4HexDigits
00000CF8  584F      1102          addq.w    #4,A7
00000CFA  E180      1103          asl.l     #8,D0
00000CFC  E180      1104          asl.l     #8,D0
00000CFE  2F00      1105          move.l    D0,-(A7)
00000D00  2F2E 0008 1106          move.l    8(A6),-(A7)
00000D04  4EB8 0CA0 1107          jsr       _Get4HexDigits
00000D08  584F      1108          addq.w    #4,A7
00000D0A  2200      1109          move.l    D0,D1
00000D0C  201F      1110          move.l    (A7)+,D0
00000D0E  8081      1111          or.l      D1,D0
00000D10  4E5E      1112          unlk      A6
00000D12  4E75      1113          rts
                    1114   ; }
                    1115   ; void DumpMemory(void)   // simple dump memory fn
                    1116   ; {
                    1117   _DumpMemory:
00000D14  48E7 3C30 1118          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000D18  45F9 0000 1119          lea       _printf.L,A2
00000D1C  3618      
00000D1E  47F9 0000 1120          lea       _putch.L,A3
00000D22  34F2      
                    1121   ; int i, j ;
                    1122   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1123   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000D24  4879 0000 1124          pea       @final_~1_5.L
00000D28  3ED4      
00000D2A  4E92      1125          jsr       (A2)
00000D2C  584F      1126          addq.w    #4,A7
                    1127   ; printf("\r\nEnter Start Address: ") ;
00000D2E  4879 0000 1128          pea       @final_~1_6.L
00000D32  3F0E      
00000D34  4E92      1129          jsr       (A2)
00000D36  584F      1130          addq.w    #4,A7
                    1131   ; RamPtr = Get8HexDigits(0) ;
00000D38  42A7      1132          clr.l     -(A7)
00000D3A  4EB8 0CEC 1133          jsr       _Get8HexDigits
00000D3E  584F      1134          addq.w    #4,A7
00000D40  2600      1135          move.l    D0,D3
                    1136   ; while(1)    {
                    1137   DumpMemory_1:
                    1138   ; for(i = 0; i < 16; i ++)    {
00000D42  4285      1139          clr.l     D5
                    1140   DumpMemory_4:
00000D44  0C85 0000 1141          cmp.l     #16,D5
00000D48  0010      
00000D4A  6C00 0096 1142          bge       DumpMemory_6
                    1143   ; printf("\r\n%08x ", RamPtr) ;
00000D4E  2F03      1144          move.l    D3,-(A7)
00000D50  4879 0000 1145          pea       @final_~1_7.L
00000D54  3F26      
00000D56  4E92      1146          jsr       (A2)
00000D58  504F      1147          addq.w    #8,A7
                    1148   ; for(j=0; j < 16; j ++)  {
00000D5A  4282      1149          clr.l     D2
                    1150   DumpMemory_7:
00000D5C  0C82 0000 1151          cmp.l     #16,D2
00000D60  0010      
00000D62  6C24      1152          bge.s     DumpMemory_9
                    1153   ; printf("%02X",RamPtr[j]) ;
00000D64  2043      1154          move.l    D3,A0
00000D66  1230 2800 1155          move.b    0(A0,D2.L),D1
00000D6A  C2BC 0000 1156          and.l     #255,D1
00000D6E  00FF      
00000D70  2F01      1157          move.l    D1,-(A7)
00000D72  4879 0000 1158          pea       @final_~1_8.L
00000D76  3F2E      
00000D78  4E92      1159          jsr       (A2)
00000D7A  504F      1160          addq.w    #8,A7
                    1161   ; putchar(' ') ;
00000D7C  4878 0020 1162          pea       32
00000D80  4E93      1163          jsr       (A3)
00000D82  584F      1164          addq.w    #4,A7
00000D84  5282      1165          addq.l    #1,D2
00000D86  60D4      1166          bra       DumpMemory_7
                    1167   DumpMemory_9:
                    1168   ; }
                    1169   ; // now display the data as ASCII at the end
                    1170   ; printf("  ") ;
00000D88  4879 0000 1171          pea       @final_~1_9.L
00000D8C  3F34      
00000D8E  4E92      1172          jsr       (A2)
00000D90  584F      1173          addq.w    #4,A7
                    1174   ; for(j = 0; j < 16; j++) {
00000D92  4282      1175          clr.l     D2
                    1176   DumpMemory_10:
00000D94  0C82 0000 1177          cmp.l     #16,D2
00000D98  0010      
00000D9A  6C00 003A 1178          bge       DumpMemory_12
                    1179   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D9E  2043      1180          move.l    D3,A0
00000DA0  1030 2800 1181          move.b    0(A0,D2.L),D0
00000DA4  C03C 007F 1182          and.b     #127,D0
00000DA8  1800      1183          move.b    D0,D4
                    1184   ; if((c > (char)(0x7f)) || (c < ' '))
00000DAA  0C04 007F 1185          cmp.b     #127,D4
00000DAE  6206      1186          bhi.s     DumpMemory_15
00000DB0  0C04 0020 1187          cmp.b     #32,D4
00000DB4  640A      1188          bhs.s     DumpMemory_13
                    1189   DumpMemory_15:
                    1190   ; putchar('.') ;
00000DB6  4878 002E 1191          pea       46
00000DBA  4E93      1192          jsr       (A3)
00000DBC  584F      1193          addq.w    #4,A7
00000DBE  6012      1194          bra.s     DumpMemory_14
                    1195   DumpMemory_13:
                    1196   ; else
                    1197   ; putchar(RamPtr[j]) ;
00000DC0  2043      1198          move.l    D3,A0
00000DC2  1230 2800 1199          move.b    0(A0,D2.L),D1
00000DC6  C2BC 0000 1200          and.l     #255,D1
00000DCA  00FF      
00000DCC  2F01      1201          move.l    D1,-(A7)
00000DCE  4E93      1202          jsr       (A3)
00000DD0  584F      1203          addq.w    #4,A7
                    1204   DumpMemory_14:
00000DD2  5282      1205          addq.l    #1,D2
00000DD4  60BE      1206          bra       DumpMemory_10
                    1207   DumpMemory_12:
                    1208   ; }
                    1209   ; RamPtr = RamPtr + 16 ;
00000DD6  0683 0000 1210          add.l     #16,D3
00000DDA  0010      
00000DDC  5285      1211          addq.l    #1,D5
00000DDE  6000 FF64 1212          bra       DumpMemory_4
                    1213   DumpMemory_6:
                    1214   ; }
                    1215   ; printf("\r\n") ;
00000DE2  4879 0000 1216          pea       @final_~1_1.L
00000DE6  3EB6      
00000DE8  4E92      1217          jsr       (A2)
00000DEA  584F      1218          addq.w    #4,A7
                    1219   ; c = _getch() ;
00000DEC  4EB8 0BB0 1220          jsr       __getch
00000DF0  1800      1221          move.b    D0,D4
                    1222   ; if(c == 0x1b)          // break on ESC
00000DF2  0C04 001B 1223          cmp.b     #27,D4
00000DF6  6602      1224          bne.s     DumpMemory_16
                    1225   ; break ;
00000DF8  6004      1226          bra.s     DumpMemory_3
                    1227   DumpMemory_16:
00000DFA  6000 FF46 1228          bra       DumpMemory_1
                    1229   DumpMemory_3:
00000DFE  4CDF 0C3C 1230          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000E02  4E75      1231          rts
                    1232   ; }
                    1233   ; }
                    1234   ; void FillMemory()
                    1235   ; {
                    1236   _FillMemory:
00000E04  48E7 3820 1237          movem.l   D2/D3/D4/A2,-(A7)
00000E08  45F9 0000 1238          lea       _printf.L,A2
00000E0C  3618      
                    1239   ; char *StartRamPtr, *EndRamPtr ;
                    1240   ; unsigned char FillData ;
                    1241   ; printf("\r\nFill Memory Block") ;
00000E0E  4879 0000 1242          pea       @final_~1_10.L
00000E12  3F38      
00000E14  4E92      1243          jsr       (A2)
00000E16  584F      1244          addq.w    #4,A7
                    1245   ; printf("\r\nEnter Start Address: ") ;
00000E18  4879 0000 1246          pea       @final_~1_6.L
00000E1C  3F0E      
00000E1E  4E92      1247          jsr       (A2)
00000E20  584F      1248          addq.w    #4,A7
                    1249   ; StartRamPtr = Get8HexDigits(0) ;
00000E22  42A7      1250          clr.l     -(A7)
00000E24  4EB8 0CEC 1251          jsr       _Get8HexDigits
00000E28  584F      1252          addq.w    #4,A7
00000E2A  2400      1253          move.l    D0,D2
                    1254   ; printf("\r\nEnter End Address: ") ;
00000E2C  4879 0000 1255          pea       @final_~1_11.L
00000E30  3F4C      
00000E32  4E92      1256          jsr       (A2)
00000E34  584F      1257          addq.w    #4,A7
                    1258   ; EndRamPtr = Get8HexDigits(0) ;
00000E36  42A7      1259          clr.l     -(A7)
00000E38  4EB8 0CEC 1260          jsr       _Get8HexDigits
00000E3C  584F      1261          addq.w    #4,A7
00000E3E  2800      1262          move.l    D0,D4
                    1263   ; printf("\r\nEnter Fill Data: ") ;
00000E40  4879 0000 1264          pea       @final_~1_12.L
00000E44  3F62      
00000E46  4E92      1265          jsr       (A2)
00000E48  584F      1266          addq.w    #4,A7
                    1267   ; FillData = Get2HexDigits(0) ;
00000E4A  42A7      1268          clr.l     -(A7)
00000E4C  4EB8 0C4C 1269          jsr       _Get2HexDigits
00000E50  584F      1270          addq.w    #4,A7
00000E52  1600      1271          move.b    D0,D3
                    1272   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E54  C6BC 0000 1273          and.l     #255,D3
00000E58  00FF      
00000E5A  2F03      1274          move.l    D3,-(A7)
00000E5C  2F04      1275          move.l    D4,-(A7)
00000E5E  2F02      1276          move.l    D2,-(A7)
00000E60  4879 0000 1277          pea       @final_~1_13.L
00000E64  3F76      
00000E66  4E92      1278          jsr       (A2)
00000E68  DEFC 0010 1279          add.w     #16,A7
                    1280   ; while(StartRamPtr < EndRamPtr)
                    1281   FillMemory_1:
00000E6C  B484      1282          cmp.l     D4,D2
00000E6E  6408      1283          bhs.s     FillMemory_3
                    1284   ; *StartRamPtr++ = FillData ;
00000E70  2042      1285          move.l    D2,A0
00000E72  5282      1286          addq.l    #1,D2
00000E74  1083      1287          move.b    D3,(A0)
00000E76  60F4      1288          bra       FillMemory_1
                    1289   FillMemory_3:
00000E78  4CDF 041C 1290          movem.l   (A7)+,D2/D3/D4/A2
00000E7C  4E75      1291          rts
                    1292   ; }
                    1293   ; void Load_SRecordFile()
                    1294   ; {
                    1295   _Load_SRecordFile:
00000E7E  4E56 FFDC 1296          link      A6,#-36
00000E82  48E7 3F3C 1297          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E86  45EE FFFA 1298          lea       -6(A6),A2
00000E8A  47F8 0C4C 1299          lea       _Get2HexDigits.L,A3
00000E8E  49F9 0000 1300          lea       _printf.L,A4
00000E92  3618      
                    1301   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E94  42AE FFEE 1302          clr.l     -18(A6)
00000E98  3A7C 0000 1303          move.w    #0,A5
                    1304   ; int result, ByteCount ;
                    1305   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1306   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1307   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E9C  7E00      1308          moveq     #0,D7
                    1309   ; AddressFail = 0 ;
00000E9E  42AE FFEA 1310          clr.l     -22(A6)
                    1311   ; Echo = 0 ;                              // don't echo S records during download
00000EA2  42B9 0803 1312          clr.l     _Echo.L
00000EA6  00E0      
                    1313   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000EA8  4879 0000 1314          pea       @final_~1_14.L
00000EAC  3FA6      
00000EAE  4E94      1315          jsr       (A4)
00000EB0  584F      1316          addq.w    #4,A7
                    1317   ; while(1)    {
                    1318   Load_SRecordFile_1:
                    1319   ; CheckSum = 0 ;
00000EB2  4212      1320          clr.b     (A2)
                    1321   ; do {
                    1322   Load_SRecordFile_4:
                    1323   ; c = toupper(_getch()) ;
00000EB4  2F00      1324          move.l    D0,-(A7)
00000EB6  4EB8 0BB0 1325          jsr       __getch
00000EBA  2200      1326          move.l    D0,D1
00000EBC  201F      1327          move.l    (A7)+,D0
00000EBE  2F01      1328          move.l    D1,-(A7)
00000EC0  4EB9 0000 1329          jsr       _toupper
00000EC4  35EC      
00000EC6  584F      1330          addq.w    #4,A7
00000EC8  1C00      1331          move.b    D0,D6
                    1332   ; if(c == 0x1b )      // if break
00000ECA  0C06 001B 1333          cmp.b     #27,D6
00000ECE  6604      1334          bne.s     Load_SRecordFile_6
                    1335   ; return;
00000ED0  6000 0132 1336          bra       Load_SRecordFile_8
                    1337   Load_SRecordFile_6:
00000ED4  0C06 0053 1338          cmp.b     #83,D6
00000ED8  66DA      1339          bne       Load_SRecordFile_4
                    1340   ; }while(c != (char)('S'));   // wait for S start of header
                    1341   ; HeaderType = _getch() ;
00000EDA  4EB8 0BB0 1342          jsr       __getch
00000EDE  1600      1343          move.b    D0,D3
                    1344   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000EE0  0C03 0030 1345          cmp.b     #48,D3
00000EE4  6706      1346          beq.s     Load_SRecordFile_11
00000EE6  0C03 0035 1347          cmp.b     #53,D3
00000EEA  6604      1348          bne.s     Load_SRecordFile_9
                    1349   Load_SRecordFile_11:
                    1350   ; continue ;
00000EEC  6000 00D2 1351          bra       Load_SRecordFile_23
                    1352   Load_SRecordFile_9:
                    1353   ; if(HeaderType >= (char)('7'))
00000EF0  0C03 0037 1354          cmp.b     #55,D3
00000EF4  6D04      1355          blt.s     Load_SRecordFile_12
                    1356   ; break ;                 // end load on s7,s8,s9 records
00000EF6  6000 00CC 1357          bra       Load_SRecordFile_3
                    1358   Load_SRecordFile_12:
                    1359   ; // get the bytecount
                    1360   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EFA  2F0A      1361          move.l    A2,-(A7)
00000EFC  4E93      1362          jsr       (A3)
00000EFE  584F      1363          addq.w    #4,A7
00000F00  2D40 FFF6 1364          move.l    D0,-10(A6)
                    1365   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1366   ; if(HeaderType == (char)('1')) {
00000F04  0C03 0031 1367          cmp.b     #49,D3
00000F08  660E      1368          bne.s     Load_SRecordFile_14
                    1369   ; AddressSize = 2 ;       // 2 byte address
00000F0A  7A02      1370          moveq     #2,D5
                    1371   ; Address = Get4HexDigits(&CheckSum);
00000F0C  2F0A      1372          move.l    A2,-(A7)
00000F0E  4EB8 0CA0 1373          jsr       _Get4HexDigits
00000F12  584F      1374          addq.w    #4,A7
00000F14  2800      1375          move.l    D0,D4
00000F16  6020      1376          bra.s     Load_SRecordFile_17
                    1377   Load_SRecordFile_14:
                    1378   ; }
                    1379   ; else if (HeaderType == (char)('2')) {
00000F18  0C03 0032 1380          cmp.b     #50,D3
00000F1C  660E      1381          bne.s     Load_SRecordFile_16
                    1382   ; AddressSize = 3 ;       // 3 byte address
00000F1E  7A03      1383          moveq     #3,D5
                    1384   ; Address = Get6HexDigits(&CheckSum) ;
00000F20  2F0A      1385          move.l    A2,-(A7)
00000F22  4EB8 0CC6 1386          jsr       _Get6HexDigits
00000F26  584F      1387          addq.w    #4,A7
00000F28  2800      1388          move.l    D0,D4
00000F2A  600C      1389          bra.s     Load_SRecordFile_17
                    1390   Load_SRecordFile_16:
                    1391   ; }
                    1392   ; else    {
                    1393   ; AddressSize = 4 ;       // 4 byte address
00000F2C  7A04      1394          moveq     #4,D5
                    1395   ; Address = Get8HexDigits(&CheckSum) ;
00000F2E  2F0A      1396          move.l    A2,-(A7)
00000F30  4EB8 0CEC 1397          jsr       _Get8HexDigits
00000F34  584F      1398          addq.w    #4,A7
00000F36  2800      1399          move.l    D0,D4
                    1400   Load_SRecordFile_17:
                    1401   ; }
                    1402   ; RamPtr = (char *)(Address) ;                            // point to download area
00000F38  2D44 FFFC 1403          move.l    D4,-4(A6)
                    1404   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000F3C  202E FFF6 1405          move.l    -10(A6),D0
00000F40  9085      1406          sub.l     D5,D0
00000F42  5380      1407          subq.l    #1,D0
00000F44  2D40 FFE2 1408          move.l    D0,-30(A6)
                    1409   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F48  4282      1410          clr.l     D2
                    1411   Load_SRecordFile_18:
00000F4A  B4AE FFE2 1412          cmp.l     -30(A6),D2
00000F4E  6C1E      1413          bge.s     Load_SRecordFile_20
                    1414   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F50  2F0A      1415          move.l    A2,-(A7)
00000F52  4E93      1416          jsr       (A3)
00000F54  584F      1417          addq.w    #4,A7
00000F56  2D40 FFDE 1418          move.l    D0,-34(A6)
                    1419   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F5A  202E FFDE 1420          move.l    -34(A6),D0
00000F5E  206E FFFC 1421          move.l    -4(A6),A0
00000F62  52AE FFFC 1422          addq.l    #1,-4(A6)
00000F66  1080      1423          move.b    D0,(A0)
                    1424   ; ByteTotal++;
00000F68  524D      1425          addq.w    #1,A5
00000F6A  5282      1426          addq.l    #1,D2
00000F6C  60DC      1427          bra       Load_SRecordFile_18
                    1428   Load_SRecordFile_20:
                    1429   ; }
                    1430   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1431   ; ReadCheckSum = Get2HexDigits(0) ;
00000F6E  42A7      1432          clr.l     -(A7)
00000F70  4E93      1433          jsr       (A3)
00000F72  584F      1434          addq.w    #4,A7
00000F74  1D40 FFFB 1435          move.b    D0,-5(A6)
                    1436   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F78  1012      1437          move.b    (A2),D0
00000F7A  4600      1438          not.b     D0
00000F7C  4880      1439          ext.w     D0
00000F7E  C07C 00FF 1440          and.w     #255,D0
00000F82  122E FFFB 1441          move.b    -5(A6),D1
00000F86  4881      1442          ext.w     D1
00000F88  C27C 00FF 1443          and.w     #255,D1
00000F8C  B041      1444          cmp.w     D1,D0
00000F8E  6708      1445          beq.s     Load_SRecordFile_21
                    1446   ; LoadFailed = 1 ;
00000F90  7E01      1447          moveq     #1,D7
                    1448   ; FailedAddress = Address ;
00000F92  2D44 FFE6 1449          move.l    D4,-26(A6)
                    1450   ; break;
00000F96  602C      1451          bra.s     Load_SRecordFile_3
                    1452   Load_SRecordFile_21:
                    1453   ; }
                    1454   ; SRecordCount++ ;
00000F98  52AE FFEE 1455          addq.l    #1,-18(A6)
                    1456   ; // display feedback on progress
                    1457   ; if(SRecordCount % 25 == 0)
00000F9C  2F2E FFEE 1458          move.l    -18(A6),-(A7)
00000FA0  4878 0019 1459          pea       25
00000FA4  4EB9 0000 1460          jsr       LDIV
00000FA8  3374      
00000FAA  202F 0004 1461          move.l    4(A7),D0
00000FAE  504F      1462          addq.w    #8,A7
00000FB0  4A80      1463          tst.l     D0
00000FB2  660C      1464          bne.s     Load_SRecordFile_23
                    1465   ; putchar('.') ;
00000FB4  4878 002E 1466          pea       46
00000FB8  4EB9 0000 1467          jsr       _putch
00000FBC  34F2      
00000FBE  584F      1468          addq.w    #4,A7
                    1469   Load_SRecordFile_23:
00000FC0  6000 FEF0 1470          bra       Load_SRecordFile_1
                    1471   Load_SRecordFile_3:
                    1472   ; }
                    1473   ; if(LoadFailed == 1) {
00000FC4  0C87 0000 1474          cmp.l     #1,D7
00000FC8  0001      
00000FCA  6610      1475          bne.s     Load_SRecordFile_25
                    1476   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000FCC  2F2E FFE6 1477          move.l    -26(A6),-(A7)
00000FD0  4879 0000 1478          pea       @final_~1_15.L
00000FD4  3FD6      
00000FD6  4E94      1479          jsr       (A4)
00000FD8  504F      1480          addq.w    #8,A7
00000FDA  600C      1481          bra.s     Load_SRecordFile_26
                    1482   Load_SRecordFile_25:
                    1483   ; }
                    1484   ; else
                    1485   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000FDC  2F0D      1486          move.l    A5,-(A7)
00000FDE  4879 0000 1487          pea       @final_~1_16.L
00000FE2  3FFC      
00000FE4  4E94      1488          jsr       (A4)
00000FE6  504F      1489          addq.w    #8,A7
                    1490   Load_SRecordFile_26:
                    1491   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1492   ; for(i = 0; i < 400000; i ++)
00000FE8  4282      1493          clr.l     D2
                    1494   Load_SRecordFile_27:
00000FEA  0C82 0006 1495          cmp.l     #400000,D2
00000FEE  1A80      
00000FF0  6C04      1496          bge.s     Load_SRecordFile_29
00000FF2  5282      1497          addq.l    #1,D2
00000FF4  60F4      1498          bra       Load_SRecordFile_27
                    1499   Load_SRecordFile_29:
                    1500   ; ;
                    1501   ; FlushKeyboard() ;
00000FF6  4EB8 0BEE 1502          jsr       _FlushKeyboard
                    1503   ; Echo = 1;
00000FFA  23FC 0000 1504          move.l    #1,_Echo.L
00000FFE  0001 0803 
00001002  00E0      
                    1505   Load_SRecordFile_8:
00001004  4CDF 3CFC 1506          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001008  4E5E      1507          unlk      A6
0000100A  4E75      1508          rts
                    1509   ; }
                    1510   ; void MemoryChange(void)
                    1511   ; {
                    1512   _MemoryChange:
0000100C  48E7 3820 1513          movem.l   D2/D3/D4/A2,-(A7)
00001010  45F9 0000 1514          lea       _printf.L,A2
00001014  3618      
                    1515   ; unsigned char *RamPtr,c ; // pointer to memory
                    1516   ; int Data ;
                    1517   ; printf("\r\nExamine and Change Memory") ;
00001016  4879 0000 1518          pea       @final_~1_17.L
0000101A  401E      
0000101C  4E92      1519          jsr       (A2)
0000101E  584F      1520          addq.w    #4,A7
                    1521   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00001020  4879 0000 1522          pea       @final_~1_18.L
00001024  403A      
00001026  4E92      1523          jsr       (A2)
00001028  584F      1524          addq.w    #4,A7
                    1525   ; printf("\r\nEnter Address: ") ;
0000102A  4879 0000 1526          pea       @final_~1_19.L
0000102E  4080      
00001030  4E92      1527          jsr       (A2)
00001032  584F      1528          addq.w    #4,A7
                    1529   ; RamPtr = Get8HexDigits(0) ;
00001034  42A7      1530          clr.l     -(A7)
00001036  4EB8 0CEC 1531          jsr       _Get8HexDigits
0000103A  584F      1532          addq.w    #4,A7
0000103C  2600      1533          move.l    D0,D3
                    1534   ; while(1)    {
                    1535   MemoryChange_1:
                    1536   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000103E  2043      1537          move.l    D3,A0
00001040  1210      1538          move.b    (A0),D1
00001042  C2BC 0000 1539          and.l     #255,D1
00001046  00FF      
00001048  2F01      1540          move.l    D1,-(A7)
0000104A  2F03      1541          move.l    D3,-(A7)
0000104C  4879 0000 1542          pea       @final_~1_20.L
00001050  4092      
00001052  4E92      1543          jsr       (A2)
00001054  DEFC 000C 1544          add.w     #12,A7
                    1545   ; c = tolower(_getch()) ;
00001058  2F00      1546          move.l    D0,-(A7)
0000105A  4EB8 0BB0 1547          jsr       __getch
0000105E  2200      1548          move.l    D0,D1
00001060  201F      1549          move.l    (A7)+,D0
00001062  2F01      1550          move.l    D1,-(A7)
00001064  4EB9 0000 1551          jsr       _tolower
00001068  355E      
0000106A  584F      1552          addq.w    #4,A7
0000106C  1400      1553          move.b    D0,D2
                    1554   ; if(c == (char)(0x1b))
0000106E  0C02 001B 1555          cmp.b     #27,D2
00001072  6604      1556          bne.s     MemoryChange_4
                    1557   ; return ;                                // abort on escape
00001074  6000 0090 1558          bra       MemoryChange_6
                    1559   MemoryChange_4:
                    1560   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001078  0C02 0030 1561          cmp.b     #48,D2
0000107C  6506      1562          blo.s     MemoryChange_10
0000107E  0C02 0039 1563          cmp.b     #57,D2
00001082  6310      1564          bls.s     MemoryChange_9
                    1565   MemoryChange_10:
00001084  0C02 0061 1566          cmp.b     #97,D2
00001088  6500 006E 1567          blo       MemoryChange_7
0000108C  0C02 0066 1568          cmp.b     #102,D2
00001090  6200 0066 1569          bhi       MemoryChange_7
                    1570   MemoryChange_9:
                    1571   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001094  C4BC 0000 1572          and.l     #255,D2
00001098  00FF      
0000109A  2F02      1573          move.l    D2,-(A7)
0000109C  4EB8 0C1A 1574          jsr       _xtod
000010A0  584F      1575          addq.w    #4,A7
000010A2  C0BC 0000 1576          and.l     #255,D0
000010A6  00FF      
000010A8  E980      1577          asl.l     #4,D0
000010AA  2F00      1578          move.l    D0,-(A7)
000010AC  2F01      1579          move.l    D1,-(A7)
000010AE  4EB8 0BB0 1580          jsr       __getch
000010B2  221F      1581          move.l    (A7)+,D1
000010B4  2F00      1582          move.l    D0,-(A7)
000010B6  4EB8 0C1A 1583          jsr       _xtod
000010BA  584F      1584          addq.w    #4,A7
000010BC  2200      1585          move.l    D0,D1
000010BE  201F      1586          move.l    (A7)+,D0
000010C0  C2BC 0000 1587          and.l     #255,D1
000010C4  00FF      
000010C6  8081      1588          or.l      D1,D0
000010C8  2800      1589          move.l    D0,D4
                    1590   ; *RamPtr = (char)(Data) ;
000010CA  2043      1591          move.l    D3,A0
000010CC  1084      1592          move.b    D4,(A0)
                    1593   ; if(*RamPtr != Data) {
000010CE  2043      1594          move.l    D3,A0
000010D0  1010      1595          move.b    (A0),D0
000010D2  C0BC 0000 1596          and.l     #255,D0
000010D6  00FF      
000010D8  B084      1597          cmp.l     D4,D0
000010DA  671A      1598          beq.s     MemoryChange_11
                    1599   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000010DC  2043      1600          move.l    D3,A0
000010DE  1210      1601          move.b    (A0),D1
000010E0  C2BC 0000 1602          and.l     #255,D1
000010E4  00FF      
000010E6  2F01      1603          move.l    D1,-(A7)
000010E8  2F04      1604          move.l    D4,-(A7)
000010EA  4879 0000 1605          pea       @final_~1_21.L
000010EE  40A4      
000010F0  4E92      1606          jsr       (A2)
000010F2  DEFC 000C 1607          add.w     #12,A7
                    1608   MemoryChange_11:
000010F6  6008      1609          bra.s     MemoryChange_13
                    1610   MemoryChange_7:
                    1611   ; }
                    1612   ; }
                    1613   ; else if(c == (char)('-'))
000010F8  0C02 002D 1614          cmp.b     #45,D2
000010FC  6602      1615          bne.s     MemoryChange_13
                    1616   ; RamPtr -= 2 ; ;
000010FE  5583      1617          subq.l    #2,D3
                    1618   MemoryChange_13:
                    1619   ; RamPtr ++ ;
00001100  5283      1620          addq.l    #1,D3
00001102  6000 FF3A 1621          bra       MemoryChange_1
                    1622   MemoryChange_6:
00001106  4CDF 041C 1623          movem.l   (A7)+,D2/D3/D4/A2
0000110A  4E75      1624          rts
                    1625   ; }
                    1626   ; }
                    1627   ; /*******************************************************************
                    1628   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1629   ; ********************************************************************/
                    1630   ; void ProgramFlashChip(void)
                    1631   ; {
                    1632   _ProgramFlashChip:
0000110C  4E75      1633          rts
                    1634   ; //
                    1635   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1636   ; // TODO : then verify by reading it back and comparing to memory
                    1637   ; //
                    1638   ; }
                    1639   ; /*************************************************************************
                    1640   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1641   ; **************************************************************************/
                    1642   ; void LoadFromFlashChip(void)
                    1643   ; {
                    1644   _LoadFromFlashChip:
                    1645   ; printf("\r\nLoading Program From SPI Flash....") ;
0000110E  4879 0000 1646          pea       @final_~1_22.L
00001112  40D8      
00001114  4EB9 0000 1647          jsr       _printf
00001118  3618      
0000111A  584F      1648          addq.w    #4,A7
0000111C  4E75      1649          rts
                    1650   ; //
                    1651   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1652   ; //
                    1653   ; }
                    1654   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1655   ; // IMPORTANT
                    1656   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1657   ; // has to be done with an interrupt (IRQ Level 6)
                    1658   ; //
                    1659   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1660   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1661   ; //
                    1662   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1663   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1664   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1665   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1666   ; // program area
                    1667   ; //
                    1668   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1669   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1670   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1671   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1672   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1673   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1674   ; void DumpRegisters()
                    1675   ; {
                    1676   _DumpRegisters:
0000111E  48E7 3F3C 1677          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001122  45F9 0000 1678          lea       _putch.L,A2
00001126  34F2      
00001128  47F9 0000 1679          lea       _printf.L,A3
0000112C  3618      
0000112E  49F9 0803 1680          lea       _SR.L,A4
00001132  012C      
00001134  4BF9 0803 1681          lea       _WatchPointString.L,A5
00001138  01C2      
                    1682   ; short i, x, j, k ;
                    1683   ; unsigned char c, *BytePointer;
                    1684   ; // buld up strings for displaying watchpoints
                    1685   ; for(x = 0; x < (short)(8); x++)
0000113A  4242      1686          clr.w     D2
                    1687   DumpRegisters_1:
0000113C  0C42 0008 1688          cmp.w     #8,D2
00001140  6C00 01C6 1689          bge       DumpRegisters_3
                    1690   ; {
                    1691   ; if(WatchPointSetOrCleared[x] == 1)
00001144  48C2      1692          ext.l     D2
00001146  2002      1693          move.l    D2,D0
00001148  E588      1694          lsl.l     #2,D0
0000114A  41F9 0803 1695          lea       _WatchPointSetOrCleared.L,A0
0000114E  01A2      
00001150  2030 0800 1696          move.l    0(A0,D0.L),D0
00001154  0C80 0000 1697          cmp.l     #1,D0
00001158  0001      
0000115A  6600 0186 1698          bne       DumpRegisters_4
                    1699   ; {
                    1700   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000115E  48C2      1701          ext.l     D2
00001160  2202      1702          move.l    D2,D1
00001162  E589      1703          lsl.l     #2,D1
00001164  41F9 0803 1704          lea       _WatchPointAddress.L,A0
00001168  0182      
0000116A  2F30 1800 1705          move.l    0(A0,D1.L),-(A7)
0000116E  4879 0000 1706          pea       @final_~1_23.L
00001172  40FE      
00001174  220D      1707          move.l    A5,D1
00001176  48C2      1708          ext.l     D2
00001178  2F00      1709          move.l    D0,-(A7)
0000117A  2002      1710          move.l    D2,D0
0000117C  C1FC 0064 1711          muls      #100,D0
00001180  D280      1712          add.l     D0,D1
00001182  201F      1713          move.l    (A7)+,D0
00001184  2F01      1714          move.l    D1,-(A7)
00001186  4EB9 0000 1715          jsr       _sprintf
0000118A  358A      
0000118C  DEFC 000C 1716          add.w     #12,A7
                    1717   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001190  48C2      1718          ext.l     D2
00001192  2002      1719          move.l    D2,D0
00001194  E588      1720          lsl.l     #2,D0
00001196  41F9 0803 1721          lea       _WatchPointAddress.L,A0
0000119A  0182      
0000119C  2A30 0800 1722          move.l    0(A0,D0.L),D5
                    1723   ; for(j = 0; j < (short)(16); j+=2)
000011A0  4243      1724          clr.w     D3
                    1725   DumpRegisters_6:
000011A2  0C43 0010 1726          cmp.w     #16,D3
000011A6  6C00 0082 1727          bge       DumpRegisters_8
                    1728   ; {
                    1729   ; for(k = 0; k < (short)(2); k++)
000011AA  4246      1730          clr.w     D6
                    1731   DumpRegisters_9:
000011AC  0C46 0002 1732          cmp.w     #2,D6
000011B0  6C00 0052 1733          bge       DumpRegisters_11
                    1734   ; {
                    1735   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000011B4  2045      1736          move.l    D5,A0
000011B6  48C3      1737          ext.l     D3
000011B8  2203      1738          move.l    D3,D1
000011BA  48C6      1739          ext.l     D6
000011BC  D286      1740          add.l     D6,D1
000011BE  1230 1800 1741          move.b    0(A0,D1.L),D1
000011C2  C2BC 0000 1742          and.l     #255,D1
000011C6  00FF      
000011C8  2F01      1743          move.l    D1,-(A7)
000011CA  4879 0000 1744          pea       @final_~1_8.L
000011CE  3F2E      
000011D0  4879 0803 1745          pea       _TempString.L
000011D4  04E2      
000011D6  4EB9 0000 1746          jsr       _sprintf
000011DA  358A      
000011DC  DEFC 000C 1747          add.w     #12,A7
                    1748   ; strcat(WatchPointString[x], TempString) ;
000011E0  4879 0803 1749          pea       _TempString.L
000011E4  04E2      
000011E6  220D      1750          move.l    A5,D1
000011E8  48C2      1751          ext.l     D2
000011EA  2F00      1752          move.l    D0,-(A7)
000011EC  2002      1753          move.l    D2,D0
000011EE  C1FC 0064 1754          muls      #100,D0
000011F2  D280      1755          add.l     D0,D1
000011F4  201F      1756          move.l    (A7)+,D0
000011F6  2F01      1757          move.l    D1,-(A7)
000011F8  4EB9 0000 1758          jsr       _strcat
000011FC  35D6      
000011FE  504F      1759          addq.w    #8,A7
00001200  5246      1760          addq.w    #1,D6
00001202  60A8      1761          bra       DumpRegisters_9
                    1762   DumpRegisters_11:
                    1763   ; }
                    1764   ; strcat(WatchPointString[x]," ") ;
00001204  4879 0000 1765          pea       @final_~1_24.L
00001208  4106      
0000120A  220D      1766          move.l    A5,D1
0000120C  48C2      1767          ext.l     D2
0000120E  2F00      1768          move.l    D0,-(A7)
00001210  2002      1769          move.l    D2,D0
00001212  C1FC 0064 1770          muls      #100,D0
00001216  D280      1771          add.l     D0,D1
00001218  201F      1772          move.l    (A7)+,D0
0000121A  2F01      1773          move.l    D1,-(A7)
0000121C  4EB9 0000 1774          jsr       _strcat
00001220  35D6      
00001222  504F      1775          addq.w    #8,A7
00001224  5443      1776          addq.w    #2,D3
00001226  6000 FF7A 1777          bra       DumpRegisters_6
                    1778   DumpRegisters_8:
                    1779   ; }
                    1780   ; strcat(WatchPointString[x], "  ") ;
0000122A  4879 0000 1781          pea       @final_~1_9.L
0000122E  3F34      
00001230  220D      1782          move.l    A5,D1
00001232  48C2      1783          ext.l     D2
00001234  2F00      1784          move.l    D0,-(A7)
00001236  2002      1785          move.l    D2,D0
00001238  C1FC 0064 1786          muls      #100,D0
0000123C  D280      1787          add.l     D0,D1
0000123E  201F      1788          move.l    (A7)+,D0
00001240  2F01      1789          move.l    D1,-(A7)
00001242  4EB9 0000 1790          jsr       _strcat
00001246  35D6      
00001248  504F      1791          addq.w    #8,A7
                    1792   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000124A  48C2      1793          ext.l     D2
0000124C  2002      1794          move.l    D2,D0
0000124E  E588      1795          lsl.l     #2,D0
00001250  41F9 0803 1796          lea       _WatchPointAddress.L,A0
00001254  0182      
00001256  2A30 0800 1797          move.l    0(A0,D0.L),D5
                    1798   ; for(j = 0; j < (short)(16); j++)
0000125A  4243      1799          clr.w     D3
                    1800   DumpRegisters_12:
0000125C  0C43 0010 1801          cmp.w     #16,D3
00001260  6C00 007E 1802          bge       DumpRegisters_14
                    1803   ; {
                    1804   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001264  2045      1805          move.l    D5,A0
00001266  48C3      1806          ext.l     D3
00001268  1030 3800 1807          move.b    0(A0,D3.L),D0
0000126C  C03C 007F 1808          and.b     #127,D0
00001270  1E00      1809          move.b    D0,D7
                    1810   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001272  0C07 007F 1811          cmp.b     #127,D7
00001276  6206      1812          bhi.s     DumpRegisters_17
00001278  0C07 0020 1813          cmp.b     #32,D7
0000127C  6416      1814          bhs.s     DumpRegisters_15
                    1815   DumpRegisters_17:
                    1816   ; sprintf(TempString, ".") ;
0000127E  4879 0000 1817          pea       @final_~1_25.L
00001282  4108      
00001284  4879 0803 1818          pea       _TempString.L
00001288  04E2      
0000128A  4EB9 0000 1819          jsr       _sprintf
0000128E  358A      
00001290  504F      1820          addq.w    #8,A7
00001292  6026      1821          bra.s     DumpRegisters_16
                    1822   DumpRegisters_15:
                    1823   ; else
                    1824   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001294  2045      1825          move.l    D5,A0
00001296  48C3      1826          ext.l     D3
00001298  1230 3800 1827          move.b    0(A0,D3.L),D1
0000129C  C2BC 0000 1828          and.l     #255,D1
000012A0  00FF      
000012A2  2F01      1829          move.l    D1,-(A7)
000012A4  4879 0000 1830          pea       @final_~1_26.L
000012A8  410A      
000012AA  4879 0803 1831          pea       _TempString.L
000012AE  04E2      
000012B0  4EB9 0000 1832          jsr       _sprintf
000012B4  358A      
000012B6  DEFC 000C 1833          add.w     #12,A7
                    1834   DumpRegisters_16:
                    1835   ; strcat(WatchPointString[x], TempString) ;
000012BA  4879 0803 1836          pea       _TempString.L
000012BE  04E2      
000012C0  220D      1837          move.l    A5,D1
000012C2  48C2      1838          ext.l     D2
000012C4  2F00      1839          move.l    D0,-(A7)
000012C6  2002      1840          move.l    D2,D0
000012C8  C1FC 0064 1841          muls      #100,D0
000012CC  D280      1842          add.l     D0,D1
000012CE  201F      1843          move.l    (A7)+,D0
000012D0  2F01      1844          move.l    D1,-(A7)
000012D2  4EB9 0000 1845          jsr       _strcat
000012D6  35D6      
000012D8  504F      1846          addq.w    #8,A7
000012DA  5243      1847          addq.w    #1,D3
000012DC  6000 FF7E 1848          bra       DumpRegisters_12
                    1849   DumpRegisters_14:
000012E0  6020      1850          bra.s     DumpRegisters_5
                    1851   DumpRegisters_4:
                    1852   ; }
                    1853   ; }
                    1854   ; else
                    1855   ; strcpy(WatchPointString[x], "") ;
000012E2  4879 0000 1856          pea       @final_~1_27.L
000012E6  410E      
000012E8  220D      1857          move.l    A5,D1
000012EA  48C2      1858          ext.l     D2
000012EC  2F00      1859          move.l    D0,-(A7)
000012EE  2002      1860          move.l    D2,D0
000012F0  C1FC 0064 1861          muls      #100,D0
000012F4  D280      1862          add.l     D0,D1
000012F6  201F      1863          move.l    (A7)+,D0
000012F8  2F01      1864          move.l    D1,-(A7)
000012FA  4EB9 0000 1865          jsr       _strcpy
000012FE  3352      
00001300  504F      1866          addq.w    #8,A7
                    1867   DumpRegisters_5:
00001302  5242      1868          addq.w    #1,D2
00001304  6000 FE36 1869          bra       DumpRegisters_1
                    1870   DumpRegisters_3:
                    1871   ; }
                    1872   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001308  2F39 0803 1873          move.l    _a0.L,-(A7)
0000130C  0104      
0000130E  2F39 0803 1874          move.l    _d0.L,-(A7)
00001312  00E4      
00001314  4879 0000 1875          pea       @final_~1_28.L
00001318  4110      
0000131A  4E93      1876          jsr       (A3)
0000131C  DEFC 000C 1877          add.w     #12,A7
                    1878   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001320  2F39 0803 1879          move.l    _a1.L,-(A7)
00001324  0108      
00001326  2F39 0803 1880          move.l    _d1.L,-(A7)
0000132A  00E8      
0000132C  4879 0000 1881          pea       @final_~1_29.L
00001330  412C      
00001332  4E93      1882          jsr       (A3)
00001334  DEFC 000C 1883          add.w     #12,A7
                    1884   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001338  2F39 0803 1885          move.l    _a2.L,-(A7)
0000133C  010C      
0000133E  2F39 0803 1886          move.l    _d2.L,-(A7)
00001342  00EC      
00001344  4879 0000 1887          pea       @final_~1_30.L
00001348  4146      
0000134A  4E93      1888          jsr       (A3)
0000134C  DEFC 000C 1889          add.w     #12,A7
                    1890   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001350  2F39 0803 1891          move.l    _a3.L,-(A7)
00001354  0110      
00001356  2F39 0803 1892          move.l    _d3.L,-(A7)
0000135A  00F0      
0000135C  4879 0000 1893          pea       @final_~1_31.L
00001360  4160      
00001362  4E93      1894          jsr       (A3)
00001364  DEFC 000C 1895          add.w     #12,A7
                    1896   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001368  2F39 0803 1897          move.l    _a4.L,-(A7)
0000136C  0114      
0000136E  2F39 0803 1898          move.l    _d4.L,-(A7)
00001372  00F4      
00001374  4879 0000 1899          pea       @final_~1_32.L
00001378  417A      
0000137A  4E93      1900          jsr       (A3)
0000137C  DEFC 000C 1901          add.w     #12,A7
                    1902   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001380  2F39 0803 1903          move.l    _a5.L,-(A7)
00001384  0118      
00001386  2F39 0803 1904          move.l    _d5.L,-(A7)
0000138A  00F8      
0000138C  4879 0000 1905          pea       @final_~1_33.L
00001390  4194      
00001392  4E93      1906          jsr       (A3)
00001394  DEFC 000C 1907          add.w     #12,A7
                    1908   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001398  2F39 0803 1909          move.l    _a6.L,-(A7)
0000139C  011C      
0000139E  2F39 0803 1910          move.l    _d6.L,-(A7)
000013A2  00FC      
000013A4  4879 0000 1911          pea       @final_~1_34.L
000013A8  41AE      
000013AA  4E93      1912          jsr       (A3)
000013AC  DEFC 000C 1913          add.w     #12,A7
                    1914   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000013B0  3214      1915          move.w    (A4),D1
000013B2  C27C 2000 1916          and.w     #8192,D1
000013B6  0C41 2000 1917          cmp.w     #8192,D1
000013BA  6608      1918          bne.s     DumpRegisters_18
000013BC  2239 0803 1919          move.l    _SSP.L,D1
000013C0  0124      
000013C2  6006      1920          bra.s     DumpRegisters_19
                    1921   DumpRegisters_18:
000013C4  2239 0803 1922          move.l    _USP.L,D1
000013C8  0128      
                    1923   DumpRegisters_19:
000013CA  2F01      1924          move.l    D1,-(A7)
000013CC  2F39 0803 1925          move.l    _d7.L,-(A7)
000013D0  0100      
000013D2  4879 0000 1926          pea       @final_~1_35.L
000013D6  41C8      
000013D8  4E93      1927          jsr       (A3)
000013DA  DEFC 000C 1928          add.w     #12,A7
                    1929   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000013DE  2F39 0803 1930          move.l    _USP.L,-(A7)
000013E2  0128      
000013E4  4879 0000 1931          pea       @final_~1_36.L
000013E8  41E2      
000013EA  4E93      1932          jsr       (A3)
000013EC  504F      1933          addq.w    #8,A7
                    1934   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013EE  2F39 0803 1935          move.l    _SSP.L,-(A7)
000013F2  0124      
000013F4  4879 0000 1936          pea       @final_~1_37.L
000013F8  4200      
000013FA  4E93      1937          jsr       (A3)
000013FC  504F      1938          addq.w    #8,A7
                    1939   ; printf("\r\n SR = $%04X   ",SR) ;
000013FE  3214      1940          move.w    (A4),D1
00001400  C2BC 0000 1941          and.l     #65535,D1
00001404  FFFF      
00001406  2F01      1942          move.l    D1,-(A7)
00001408  4879 0000 1943          pea       @final_~1_38.L
0000140C  4222      
0000140E  4E93      1944          jsr       (A3)
00001410  504F      1945          addq.w    #8,A7
                    1946   ; // display the status word in characters etc.
                    1947   ; printf("   [") ;
00001412  4879 0000 1948          pea       @final_~1_39.L
00001416  4234      
00001418  4E93      1949          jsr       (A3)
0000141A  584F      1950          addq.w    #4,A7
                    1951   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000141C  3014      1952          move.w    (A4),D0
0000141E  C07C 8000 1953          and.w     #32768,D0
00001422  0C40 8000 1954          cmp.w     #32768,D0
00001426  660A      1955          bne.s     DumpRegisters_20
00001428  4878 0054 1956          pea       84
0000142C  4E92      1957          jsr       (A2)
0000142E  584F      1958          addq.w    #4,A7
00001430  6008      1959          bra.s     DumpRegisters_21
                    1960   DumpRegisters_20:
00001432  4878 002D 1961          pea       45
00001436  4E92      1962          jsr       (A2)
00001438  584F      1963          addq.w    #4,A7
                    1964   DumpRegisters_21:
                    1965   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000143A  3014      1966          move.w    (A4),D0
0000143C  C07C 2000 1967          and.w     #8192,D0
00001440  0C40 2000 1968          cmp.w     #8192,D0
00001444  660A      1969          bne.s     DumpRegisters_22
00001446  4878 0053 1970          pea       83
0000144A  4E92      1971          jsr       (A2)
0000144C  584F      1972          addq.w    #4,A7
0000144E  6008      1973          bra.s     DumpRegisters_23
                    1974   DumpRegisters_22:
00001450  4878 0055 1975          pea       85
00001454  4E92      1976          jsr       (A2)
00001456  584F      1977          addq.w    #4,A7
                    1978   DumpRegisters_23:
                    1979   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001458  3014      1980          move.w    (A4),D0
0000145A  C07C 0400 1981          and.w     #1024,D0
0000145E  0C40 0400 1982          cmp.w     #1024,D0
00001462  660A      1983          bne.s     DumpRegisters_24
00001464  4878 0031 1984          pea       49
00001468  4E92      1985          jsr       (A2)
0000146A  584F      1986          addq.w    #4,A7
0000146C  6008      1987          bra.s     DumpRegisters_25
                    1988   DumpRegisters_24:
0000146E  4878 0030 1989          pea       48
00001472  4E92      1990          jsr       (A2)
00001474  584F      1991          addq.w    #4,A7
                    1992   DumpRegisters_25:
                    1993   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001476  3014      1994          move.w    (A4),D0
00001478  C07C 0200 1995          and.w     #512,D0
0000147C  0C40 0200 1996          cmp.w     #512,D0
00001480  660A      1997          bne.s     DumpRegisters_26
00001482  4878 0031 1998          pea       49
00001486  4E92      1999          jsr       (A2)
00001488  584F      2000          addq.w    #4,A7
0000148A  6008      2001          bra.s     DumpRegisters_27
                    2002   DumpRegisters_26:
0000148C  4878 0030 2003          pea       48
00001490  4E92      2004          jsr       (A2)
00001492  584F      2005          addq.w    #4,A7
                    2006   DumpRegisters_27:
                    2007   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001494  3014      2008          move.w    (A4),D0
00001496  C07C 0100 2009          and.w     #256,D0
0000149A  0C40 0100 2010          cmp.w     #256,D0
0000149E  660A      2011          bne.s     DumpRegisters_28
000014A0  4878 0031 2012          pea       49
000014A4  4E92      2013          jsr       (A2)
000014A6  584F      2014          addq.w    #4,A7
000014A8  6008      2015          bra.s     DumpRegisters_29
                    2016   DumpRegisters_28:
000014AA  4878 0030 2017          pea       48
000014AE  4E92      2018          jsr       (A2)
000014B0  584F      2019          addq.w    #4,A7
                    2020   DumpRegisters_29:
                    2021   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000014B2  3014      2022          move.w    (A4),D0
000014B4  C07C 0010 2023          and.w     #16,D0
000014B8  0C40 0010 2024          cmp.w     #16,D0
000014BC  660A      2025          bne.s     DumpRegisters_30
000014BE  4878 0058 2026          pea       88
000014C2  4E92      2027          jsr       (A2)
000014C4  584F      2028          addq.w    #4,A7
000014C6  6008      2029          bra.s     DumpRegisters_31
                    2030   DumpRegisters_30:
000014C8  4878 002D 2031          pea       45
000014CC  4E92      2032          jsr       (A2)
000014CE  584F      2033          addq.w    #4,A7
                    2034   DumpRegisters_31:
                    2035   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000014D0  3014      2036          move.w    (A4),D0
000014D2  C07C 0008 2037          and.w     #8,D0
000014D6  0C40 0008 2038          cmp.w     #8,D0
000014DA  660A      2039          bne.s     DumpRegisters_32
000014DC  4878 004E 2040          pea       78
000014E0  4E92      2041          jsr       (A2)
000014E2  584F      2042          addq.w    #4,A7
000014E4  6008      2043          bra.s     DumpRegisters_33
                    2044   DumpRegisters_32:
000014E6  4878 002D 2045          pea       45
000014EA  4E92      2046          jsr       (A2)
000014EC  584F      2047          addq.w    #4,A7
                    2048   DumpRegisters_33:
                    2049   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014EE  3014      2050          move.w    (A4),D0
000014F0  C07C 0004 2051          and.w     #4,D0
000014F4  0C40 0004 2052          cmp.w     #4,D0
000014F8  660A      2053          bne.s     DumpRegisters_34
000014FA  4878 005A 2054          pea       90
000014FE  4E92      2055          jsr       (A2)
00001500  584F      2056          addq.w    #4,A7
00001502  6008      2057          bra.s     DumpRegisters_35
                    2058   DumpRegisters_34:
00001504  4878 002D 2059          pea       45
00001508  4E92      2060          jsr       (A2)
0000150A  584F      2061          addq.w    #4,A7
                    2062   DumpRegisters_35:
                    2063   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000150C  3014      2064          move.w    (A4),D0
0000150E  C07C 0002 2065          and.w     #2,D0
00001512  0C40 0002 2066          cmp.w     #2,D0
00001516  660A      2067          bne.s     DumpRegisters_36
00001518  4878 0056 2068          pea       86
0000151C  4E92      2069          jsr       (A2)
0000151E  584F      2070          addq.w    #4,A7
00001520  6008      2071          bra.s     DumpRegisters_37
                    2072   DumpRegisters_36:
00001522  4878 002D 2073          pea       45
00001526  4E92      2074          jsr       (A2)
00001528  584F      2075          addq.w    #4,A7
                    2076   DumpRegisters_37:
                    2077   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000152A  3014      2078          move.w    (A4),D0
0000152C  C07C 0001 2079          and.w     #1,D0
00001530  0C40 0001 2080          cmp.w     #1,D0
00001534  660A      2081          bne.s     DumpRegisters_38
00001536  4878 0043 2082          pea       67
0000153A  4E92      2083          jsr       (A2)
0000153C  584F      2084          addq.w    #4,A7
0000153E  6008      2085          bra.s     DumpRegisters_39
                    2086   DumpRegisters_38:
00001540  4878 002D 2087          pea       45
00001544  4E92      2088          jsr       (A2)
00001546  584F      2089          addq.w    #4,A7
                    2090   DumpRegisters_39:
                    2091   ; putchar(']') ;
00001548  4878 005D 2092          pea       93
0000154C  4E92      2093          jsr       (A2)
0000154E  584F      2094          addq.w    #4,A7
                    2095   ; printf("\r\n PC = $%08X  ", PC) ;
00001550  2F39 0803 2096          move.l    _PC.L,-(A7)
00001554  0120      
00001556  4879 0000 2097          pea       @final_~1_40.L
0000155A  423A      
0000155C  4E93      2098          jsr       (A3)
0000155E  504F      2099          addq.w    #8,A7
                    2100   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001560  2039 0803 2101          move.l    _PC.L,D0
00001564  0120      
00001566  2040      2102          move.l    D0,A0
00001568  3010      2103          move.w    (A0),D0
0000156A  0C40 4E4E 2104          cmp.w     #20046,D0
0000156E  660A      2105          bne.s     DumpRegisters_40
                    2106   ; printf("[@ BREAKPOINT]") ;
00001570  4879 0000 2107          pea       @final_~1_41.L
00001574  424A      
00001576  4E93      2108          jsr       (A3)
00001578  584F      2109          addq.w    #4,A7
                    2110   DumpRegisters_40:
                    2111   ; printf("\r\n") ;
0000157A  4879 0000 2112          pea       @final_~1_1.L
0000157E  3EB6      
00001580  4E93      2113          jsr       (A3)
00001582  584F      2114          addq.w    #4,A7
                    2115   ; for(i=0; i < 8; i++)    {
00001584  4244      2116          clr.w     D4
                    2117   DumpRegisters_42:
00001586  0C44 0008 2118          cmp.w     #8,D4
0000158A  6C00 0040 2119          bge       DumpRegisters_44
                    2120   ; if(WatchPointSetOrCleared[i] == 1)
0000158E  48C4      2121          ext.l     D4
00001590  2004      2122          move.l    D4,D0
00001592  E588      2123          lsl.l     #2,D0
00001594  41F9 0803 2124          lea       _WatchPointSetOrCleared.L,A0
00001598  01A2      
0000159A  2030 0800 2125          move.l    0(A0,D0.L),D0
0000159E  0C80 0000 2126          cmp.l     #1,D0
000015A2  0001      
000015A4  6622      2127          bne.s     DumpRegisters_45
                    2128   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
000015A6  220D      2129          move.l    A5,D1
000015A8  48C4      2130          ext.l     D4
000015AA  2F00      2131          move.l    D0,-(A7)
000015AC  2004      2132          move.l    D4,D0
000015AE  C1FC 0064 2133          muls      #100,D0
000015B2  D280      2134          add.l     D0,D1
000015B4  201F      2135          move.l    (A7)+,D0
000015B6  2F01      2136          move.l    D1,-(A7)
000015B8  48C4      2137          ext.l     D4
000015BA  2F04      2138          move.l    D4,-(A7)
000015BC  4879 0000 2139          pea       @final_~1_42.L
000015C0  425A      
000015C2  4E93      2140          jsr       (A3)
000015C4  DEFC 000C 2141          add.w     #12,A7
                    2142   DumpRegisters_45:
000015C8  5244      2143          addq.w    #1,D4
000015CA  60BA      2144          bra       DumpRegisters_42
                    2145   DumpRegisters_44:
000015CC  4CDF 3CFC 2146          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000015D0  4E75      2147          rts
                    2148   ; }
                    2149   ; }
                    2150   ; // Trace Exception Handler
                    2151   ; void DumpRegistersandPause(void)
                    2152   ; {
                    2153   _DumpRegistersandPause:
000015D2  2F0A      2154          move.l    A2,-(A7)
000015D4  45F9 0000 2155          lea       _printf.L,A2
000015D8  3618      
                    2156   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000015DA  4879 0000 2157          pea       @final_~1_43.L
000015DE  4266      
000015E0  4E92      2158          jsr       (A2)
000015E2  584F      2159          addq.w    #4,A7
                    2160   ; printf("\r\nBreak Points :[Disabled]") ;
000015E4  4879 0000 2161          pea       @final_~1_44.L
000015E8  4286      
000015EA  4E92      2162          jsr       (A2)
000015EC  584F      2163          addq.w    #4,A7
                    2164   ; DumpRegisters() ;
000015EE  4EB8 111E 2165          jsr       _DumpRegisters
                    2166   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015F2  4879 0000 2167          pea       @final_~1_45.L
000015F6  42A2      
000015F8  4E92      2168          jsr       (A2)
000015FA  584F      2169          addq.w    #4,A7
                    2170   ; printf("\r\nPress <ESC> to Resume Program") ;
000015FC  4879 0000 2171          pea       @final_~1_46.L
00001600  42CE      
00001602  4E92      2172          jsr       (A2)
00001604  584F      2173          addq.w    #4,A7
                    2174   ; menu() ;
00001606  4EB9 0000 2175          jsr       _menu
0000160A  21B6      
0000160C  245F      2176          move.l    (A7)+,A2
0000160E  4E75      2177          rts
                    2178   ; }
                    2179   ; void ChangeRegisters(void)
                    2180   ; {
                    2181   _ChangeRegisters:
00001610  4E56 FFFC 2182          link      A6,#-4
00001614  48E7 303C 2183          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001618  45F9 0000 2184          lea       _printf.L,A2
0000161C  3618      
0000161E  47EE FFFC 2185          lea       -4(A6),A3
00001622  49F8 0CEC 2186          lea       _Get8HexDigits.L,A4
00001626  4BF8 0BB0 2187          lea       __getch.L,A5
                    2188   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2189   ; int reg_val ;
                    2190   ; char c, reg[3] ;
                    2191   ; reg[0] = tolower(_getch()) ;
0000162A  2F00      2192          move.l    D0,-(A7)
0000162C  4E95      2193          jsr       (A5)
0000162E  2200      2194          move.l    D0,D1
00001630  201F      2195          move.l    (A7)+,D0
00001632  2F01      2196          move.l    D1,-(A7)
00001634  4EB9 0000 2197          jsr       _tolower
00001638  355E      
0000163A  584F      2198          addq.w    #4,A7
0000163C  1680      2199          move.b    D0,(A3)
                    2200   ; reg[1] = c = tolower(_getch()) ;
0000163E  2F00      2201          move.l    D0,-(A7)
00001640  4E95      2202          jsr       (A5)
00001642  2200      2203          move.l    D0,D1
00001644  201F      2204          move.l    (A7)+,D0
00001646  2F01      2205          move.l    D1,-(A7)
00001648  4EB9 0000 2206          jsr       _tolower
0000164C  355E      
0000164E  584F      2207          addq.w    #4,A7
00001650  1400      2208          move.b    D0,D2
00001652  1740 0001 2209          move.b    D0,1(A3)
                    2210   ; if(reg[0] == (char)('d'))  {    // change data register
00001656  1013      2211          move.b    (A3),D0
00001658  0C00 0064 2212          cmp.b     #100,D0
0000165C  6600 00AE 2213          bne       ChangeRegisters_1
                    2214   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001660  102B 0001 2215          move.b    1(A3),D0
00001664  0C00 0037 2216          cmp.b     #55,D0
00001668  6E0A      2217          bgt.s     ChangeRegisters_5
0000166A  102B 0001 2218          move.b    1(A3),D0
0000166E  0C00 0030 2219          cmp.b     #48,D0
00001672  6C0E      2220          bge.s     ChangeRegisters_3
                    2221   ChangeRegisters_5:
                    2222   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001674  4879 0000 2223          pea       @final_~1_47.L
00001678  42EE      
0000167A  4E92      2224          jsr       (A2)
0000167C  584F      2225          addq.w    #4,A7
                    2226   ; return ;
0000167E  6000 0244 2227          bra       ChangeRegisters_6
                    2228   ChangeRegisters_3:
                    2229   ; }
                    2230   ; else {
                    2231   ; printf("\r\nD%c = ", c) ;
00001682  4882      2232          ext.w     D2
00001684  48C2      2233          ext.l     D2
00001686  2F02      2234          move.l    D2,-(A7)
00001688  4879 0000 2235          pea       @final_~1_48.L
0000168C  431A      
0000168E  4E92      2236          jsr       (A2)
00001690  504F      2237          addq.w    #8,A7
                    2238   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001692  42A7      2239          clr.l     -(A7)
00001694  4E94      2240          jsr       (A4)
00001696  584F      2241          addq.w    #4,A7
00001698  2600      2242          move.l    D0,D3
                    2243   ; }
                    2244   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2245   ; if(c == (char)('0'))
0000169A  0C02 0030 2246          cmp.b     #48,D2
0000169E  660A      2247          bne.s     ChangeRegisters_7
                    2248   ; d0 = reg_val ;
000016A0  23C3 0803 2249          move.l    D3,_d0.L
000016A4  00E4      
000016A6  6000 0060 2250          bra       ChangeRegisters_20
                    2251   ChangeRegisters_7:
                    2252   ; else if(c == (char)('1'))
000016AA  0C02 0031 2253          cmp.b     #49,D2
000016AE  660A      2254          bne.s     ChangeRegisters_9
                    2255   ; d1 = reg_val ;
000016B0  23C3 0803 2256          move.l    D3,_d1.L
000016B4  00E8      
000016B6  6000 0050 2257          bra       ChangeRegisters_20
                    2258   ChangeRegisters_9:
                    2259   ; else if(c == (char)('2'))
000016BA  0C02 0032 2260          cmp.b     #50,D2
000016BE  660A      2261          bne.s     ChangeRegisters_11
                    2262   ; d2 = reg_val ;
000016C0  23C3 0803 2263          move.l    D3,_d2.L
000016C4  00EC      
000016C6  6000 0040 2264          bra       ChangeRegisters_20
                    2265   ChangeRegisters_11:
                    2266   ; else if(c == (char)('3'))
000016CA  0C02 0033 2267          cmp.b     #51,D2
000016CE  6608      2268          bne.s     ChangeRegisters_13
                    2269   ; d3 = reg_val ;
000016D0  23C3 0803 2270          move.l    D3,_d3.L
000016D4  00F0      
000016D6  6030      2271          bra.s     ChangeRegisters_20
                    2272   ChangeRegisters_13:
                    2273   ; else if(c == (char)('4'))
000016D8  0C02 0034 2274          cmp.b     #52,D2
000016DC  6608      2275          bne.s     ChangeRegisters_15
                    2276   ; d4 = reg_val ;
000016DE  23C3 0803 2277          move.l    D3,_d4.L
000016E2  00F4      
000016E4  6022      2278          bra.s     ChangeRegisters_20
                    2279   ChangeRegisters_15:
                    2280   ; else if(c == (char)('5'))
000016E6  0C02 0035 2281          cmp.b     #53,D2
000016EA  6608      2282          bne.s     ChangeRegisters_17
                    2283   ; d5 = reg_val ;
000016EC  23C3 0803 2284          move.l    D3,_d5.L
000016F0  00F8      
000016F2  6014      2285          bra.s     ChangeRegisters_20
                    2286   ChangeRegisters_17:
                    2287   ; else if(c == (char)('6'))
000016F4  0C02 0036 2288          cmp.b     #54,D2
000016F8  6608      2289          bne.s     ChangeRegisters_19
                    2290   ; d6 = reg_val ;
000016FA  23C3 0803 2291          move.l    D3,_d6.L
000016FE  00FC      
00001700  6006      2292          bra.s     ChangeRegisters_20
                    2293   ChangeRegisters_19:
                    2294   ; else
                    2295   ; d7 = reg_val ;
00001702  23C3 0803 2296          move.l    D3,_d7.L
00001706  0100      
                    2297   ChangeRegisters_20:
00001708  6000 01B6 2298          bra       ChangeRegisters_51
                    2299   ChangeRegisters_1:
                    2300   ; }
                    2301   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
0000170C  1013      2302          move.b    (A3),D0
0000170E  0C00 0061 2303          cmp.b     #97,D0
00001712  6600 00A6 2304          bne       ChangeRegisters_21
                    2305   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001716  0C02 0037 2306          cmp.b     #55,D2
0000171A  6E06      2307          bgt.s     ChangeRegisters_25
0000171C  0C02 0030 2308          cmp.b     #48,D2
00001720  6C0E      2309          bge.s     ChangeRegisters_23
                    2310   ChangeRegisters_25:
                    2311   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001722  4879 0000 2312          pea       @final_~1_49.L
00001726  4324      
00001728  4E92      2313          jsr       (A2)
0000172A  584F      2314          addq.w    #4,A7
                    2315   ; return ;
0000172C  6000 0196 2316          bra       ChangeRegisters_6
                    2317   ChangeRegisters_23:
                    2318   ; }
                    2319   ; else {
                    2320   ; printf("\r\nA%c = ", c) ;
00001730  4882      2321          ext.w     D2
00001732  48C2      2322          ext.l     D2
00001734  2F02      2323          move.l    D2,-(A7)
00001736  4879 0000 2324          pea       @final_~1_50.L
0000173A  4352      
0000173C  4E92      2325          jsr       (A2)
0000173E  504F      2326          addq.w    #8,A7
                    2327   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001740  42A7      2328          clr.l     -(A7)
00001742  4E94      2329          jsr       (A4)
00001744  584F      2330          addq.w    #4,A7
00001746  2600      2331          move.l    D0,D3
                    2332   ; }
                    2333   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2334   ; if(c == (char)('0'))
00001748  0C02 0030 2335          cmp.b     #48,D2
0000174C  660A      2336          bne.s     ChangeRegisters_26
                    2337   ; a0 = reg_val ;
0000174E  23C3 0803 2338          move.l    D3,_a0.L
00001752  0104      
00001754  6000 0060 2339          bra       ChangeRegisters_39
                    2340   ChangeRegisters_26:
                    2341   ; else if(c == (char)('1'))
00001758  0C02 0031 2342          cmp.b     #49,D2
0000175C  660A      2343          bne.s     ChangeRegisters_28
                    2344   ; a1 = reg_val ;
0000175E  23C3 0803 2345          move.l    D3,_a1.L
00001762  0108      
00001764  6000 0050 2346          bra       ChangeRegisters_39
                    2347   ChangeRegisters_28:
                    2348   ; else if(c == (char)('2'))
00001768  0C02 0032 2349          cmp.b     #50,D2
0000176C  660A      2350          bne.s     ChangeRegisters_30
                    2351   ; a2 = reg_val ;
0000176E  23C3 0803 2352          move.l    D3,_a2.L
00001772  010C      
00001774  6000 0040 2353          bra       ChangeRegisters_39
                    2354   ChangeRegisters_30:
                    2355   ; else if(c == (char)('3'))
00001778  0C02 0033 2356          cmp.b     #51,D2
0000177C  6608      2357          bne.s     ChangeRegisters_32
                    2358   ; a3 = reg_val ;
0000177E  23C3 0803 2359          move.l    D3,_a3.L
00001782  0110      
00001784  6030      2360          bra.s     ChangeRegisters_39
                    2361   ChangeRegisters_32:
                    2362   ; else if(c == (char)('4'))
00001786  0C02 0034 2363          cmp.b     #52,D2
0000178A  6608      2364          bne.s     ChangeRegisters_34
                    2365   ; a4 = reg_val ;
0000178C  23C3 0803 2366          move.l    D3,_a4.L
00001790  0114      
00001792  6022      2367          bra.s     ChangeRegisters_39
                    2368   ChangeRegisters_34:
                    2369   ; else if(c == (char)('5'))
00001794  0C02 0035 2370          cmp.b     #53,D2
00001798  6608      2371          bne.s     ChangeRegisters_36
                    2372   ; a5 = reg_val ;
0000179A  23C3 0803 2373          move.l    D3,_a5.L
0000179E  0118      
000017A0  6014      2374          bra.s     ChangeRegisters_39
                    2375   ChangeRegisters_36:
                    2376   ; else if(c == (char)('6'))
000017A2  0C02 0036 2377          cmp.b     #54,D2
000017A6  6608      2378          bne.s     ChangeRegisters_38
                    2379   ; a6 = reg_val ;
000017A8  23C3 0803 2380          move.l    D3,_a6.L
000017AC  011C      
000017AE  6006      2381          bra.s     ChangeRegisters_39
                    2382   ChangeRegisters_38:
                    2383   ; else
                    2384   ; USP = reg_val ;
000017B0  23C3 0803 2385          move.l    D3,_USP.L
000017B4  0128      
                    2386   ChangeRegisters_39:
000017B6  6000 0108 2387          bra       ChangeRegisters_51
                    2388   ChangeRegisters_21:
                    2389   ; }
                    2390   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
000017BA  1013      2391          move.b    (A3),D0
000017BC  0C00 0075 2392          cmp.b     #117,D0
000017C0  6600 004E 2393          bne       ChangeRegisters_40
000017C4  0C02 0073 2394          cmp.b     #115,D2
000017C8  6600 0046 2395          bne       ChangeRegisters_40
                    2396   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
000017CC  2F00      2397          move.l    D0,-(A7)
000017CE  4E95      2398          jsr       (A5)
000017D0  2200      2399          move.l    D0,D1
000017D2  201F      2400          move.l    (A7)+,D0
000017D4  2F01      2401          move.l    D1,-(A7)
000017D6  4EB9 0000 2402          jsr       _tolower
000017DA  355E      
000017DC  584F      2403          addq.w    #4,A7
000017DE  0C80 0000 2404          cmp.l     #112,D0
000017E2  0070      
000017E4  6618      2405          bne.s     ChangeRegisters_42
                    2406   ; printf("\r\nUser SP = ") ;
000017E6  4879 0000 2407          pea       @final_~1_51.L
000017EA  435C      
000017EC  4E92      2408          jsr       (A2)
000017EE  584F      2409          addq.w    #4,A7
                    2410   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017F0  42A7      2411          clr.l     -(A7)
000017F2  4E94      2412          jsr       (A4)
000017F4  584F      2413          addq.w    #4,A7
000017F6  23C0 0803 2414          move.l    D0,_USP.L
000017FA  0128      
000017FC  600E      2415          bra.s     ChangeRegisters_43
                    2416   ChangeRegisters_42:
                    2417   ; }
                    2418   ; else {
                    2419   ; printf("\r\nIllegal Register....") ;
000017FE  4879 0000 2420          pea       @final_~1_52.L
00001802  436A      
00001804  4E92      2421          jsr       (A2)
00001806  584F      2422          addq.w    #4,A7
                    2423   ; return ;
00001808  6000 00BA 2424          bra       ChangeRegisters_6
                    2425   ChangeRegisters_43:
0000180C  6000 00B2 2426          bra       ChangeRegisters_51
                    2427   ChangeRegisters_40:
                    2428   ; }
                    2429   ; }
                    2430   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001810  1013      2431          move.b    (A3),D0
00001812  0C00 0073 2432          cmp.b     #115,D0
00001816  6600 004E 2433          bne       ChangeRegisters_44
0000181A  0C02 0073 2434          cmp.b     #115,D2
0000181E  6600 0046 2435          bne       ChangeRegisters_44
                    2436   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001822  2F00      2437          move.l    D0,-(A7)
00001824  4E95      2438          jsr       (A5)
00001826  2200      2439          move.l    D0,D1
00001828  201F      2440          move.l    (A7)+,D0
0000182A  2F01      2441          move.l    D1,-(A7)
0000182C  4EB9 0000 2442          jsr       _tolower
00001830  355E      
00001832  584F      2443          addq.w    #4,A7
00001834  0C80 0000 2444          cmp.l     #112,D0
00001838  0070      
0000183A  6618      2445          bne.s     ChangeRegisters_46
                    2446   ; printf("\r\nSystem SP = ") ;
0000183C  4879 0000 2447          pea       @final_~1_53.L
00001840  4382      
00001842  4E92      2448          jsr       (A2)
00001844  584F      2449          addq.w    #4,A7
                    2450   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001846  42A7      2451          clr.l     -(A7)
00001848  4E94      2452          jsr       (A4)
0000184A  584F      2453          addq.w    #4,A7
0000184C  23C0 0803 2454          move.l    D0,_SSP.L
00001850  0124      
00001852  600E      2455          bra.s     ChangeRegisters_47
                    2456   ChangeRegisters_46:
                    2457   ; }
                    2458   ; else {
                    2459   ; printf("\r\nIllegal Register....") ;
00001854  4879 0000 2460          pea       @final_~1_52.L
00001858  436A      
0000185A  4E92      2461          jsr       (A2)
0000185C  584F      2462          addq.w    #4,A7
                    2463   ; return ;
0000185E  6000 0064 2464          bra       ChangeRegisters_6
                    2465   ChangeRegisters_47:
00001862  6000 005C 2466          bra       ChangeRegisters_51
                    2467   ChangeRegisters_44:
                    2468   ; }
                    2469   ; }
                    2470   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001866  1013      2471          move.b    (A3),D0
00001868  0C00 0070 2472          cmp.b     #112,D0
0000186C  6620      2473          bne.s     ChangeRegisters_48
0000186E  0C02 0063 2474          cmp.b     #99,D2
00001872  661A      2475          bne.s     ChangeRegisters_48
                    2476   ; printf("\r\nPC = ") ;
00001874  4879 0000 2477          pea       @final_~1_54.L
00001878  4392      
0000187A  4E92      2478          jsr       (A2)
0000187C  584F      2479          addq.w    #4,A7
                    2480   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000187E  42A7      2481          clr.l     -(A7)
00001880  4E94      2482          jsr       (A4)
00001882  584F      2483          addq.w    #4,A7
00001884  23C0 0803 2484          move.l    D0,_PC.L
00001888  0120      
0000188A  6000 0034 2485          bra       ChangeRegisters_51
                    2486   ChangeRegisters_48:
                    2487   ; }
                    2488   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
0000188E  1013      2489          move.b    (A3),D0
00001890  0C00 0073 2490          cmp.b     #115,D0
00001894  6620      2491          bne.s     ChangeRegisters_50
00001896  0C02 0072 2492          cmp.b     #114,D2
0000189A  661A      2493          bne.s     ChangeRegisters_50
                    2494   ; printf("\r\nSR = ") ;
0000189C  4879 0000 2495          pea       @final_~1_55.L
000018A0  439A      
000018A2  4E92      2496          jsr       (A2)
000018A4  584F      2497          addq.w    #4,A7
                    2498   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
000018A6  42A7      2499          clr.l     -(A7)
000018A8  4EB8 0CA0 2500          jsr       _Get4HexDigits
000018AC  584F      2501          addq.w    #4,A7
000018AE  33C0 0803 2502          move.w    D0,_SR.L
000018B2  012C      
000018B4  600A      2503          bra.s     ChangeRegisters_51
                    2504   ChangeRegisters_50:
                    2505   ; }
                    2506   ; else
                    2507   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
000018B6  4879 0000 2508          pea       @final_~1_56.L
000018BA  43A2      
000018BC  4E92      2509          jsr       (A2)
000018BE  584F      2510          addq.w    #4,A7
                    2511   ChangeRegisters_51:
                    2512   ; DumpRegisters() ;
000018C0  4EB8 111E 2513          jsr       _DumpRegisters
                    2514   ChangeRegisters_6:
000018C4  4CDF 3C0C 2515          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000018C8  4E5E      2516          unlk      A6
000018CA  4E75      2517          rts
                    2518   ; }
                    2519   ; void BreakPointDisplay(void)
                    2520   ; {
                    2521   _BreakPointDisplay:
000018CC  48E7 3030 2522          movem.l   D2/D3/A2/A3,-(A7)
000018D0  45F9 0000 2523          lea       _printf.L,A2
000018D4  3618      
000018D6  47F9 0803 2524          lea       _BreakPointAddress.L,A3
000018DA  012E      
                    2525   ; int i, BreakPointsSet = 0 ;
000018DC  4283      2526          clr.l     D3
                    2527   ; // any break points  set
                    2528   ; for(i = 0; i < 8; i++)  {
000018DE  4282      2529          clr.l     D2
                    2530   BreakPointDisplay_1:
000018E0  0C82 0000 2531          cmp.l     #8,D2
000018E4  0008      
000018E6  6C1C      2532          bge.s     BreakPointDisplay_3
                    2533   ; if(BreakPointSetOrCleared[i] == 1)
000018E8  2002      2534          move.l    D2,D0
000018EA  E588      2535          lsl.l     #2,D0
000018EC  41F9 0803 2536          lea       _BreakPointSetOrCleared.L,A0
000018F0  015E      
000018F2  2030 0800 2537          move.l    0(A0,D0.L),D0
000018F6  0C80 0000 2538          cmp.l     #1,D0
000018FA  0001      
000018FC  6602      2539          bne.s     BreakPointDisplay_4
                    2540   ; BreakPointsSet = 1;
000018FE  7601      2541          moveq     #1,D3
                    2542   BreakPointDisplay_4:
00001900  5282      2543          addq.l    #1,D2
00001902  60DC      2544          bra       BreakPointDisplay_1
                    2545   BreakPointDisplay_3:
                    2546   ; }
                    2547   ; if(BreakPointsSet == 1) {
00001904  0C83 0000 2548          cmp.l     #1,D3
00001908  0001      
0000190A  6616      2549          bne.s     BreakPointDisplay_6
                    2550   ; printf("\r\n\r\nNum     Address      Instruction") ;
0000190C  4879 0000 2551          pea       @final_~1_57.L
00001910  43DE      
00001912  4E92      2552          jsr       (A2)
00001914  584F      2553          addq.w    #4,A7
                    2554   ; printf("\r\n---     ---------    -----------") ;
00001916  4879 0000 2555          pea       @final_~1_58.L
0000191A  4404      
0000191C  4E92      2556          jsr       (A2)
0000191E  584F      2557          addq.w    #4,A7
00001920  600A      2558          bra.s     BreakPointDisplay_7
                    2559   BreakPointDisplay_6:
                    2560   ; }
                    2561   ; else
                    2562   ; printf("\r\nNo BreakPoints Set") ;
00001922  4879 0000 2563          pea       @final_~1_59.L
00001926  4428      
00001928  4E92      2564          jsr       (A2)
0000192A  584F      2565          addq.w    #4,A7
                    2566   BreakPointDisplay_7:
                    2567   ; for(i = 0; i < 8; i++)  {
0000192C  4282      2568          clr.l     D2
                    2569   BreakPointDisplay_8:
0000192E  0C82 0000 2570          cmp.l     #8,D2
00001932  0008      
00001934  6C00 005A 2571          bge       BreakPointDisplay_10
                    2572   ; // put opcode back, then put break point back
                    2573   ; if(BreakPointSetOrCleared[i] == 1)  {
00001938  2002      2574          move.l    D2,D0
0000193A  E588      2575          lsl.l     #2,D0
0000193C  41F9 0803 2576          lea       _BreakPointSetOrCleared.L,A0
00001940  015E      
00001942  2030 0800 2577          move.l    0(A0,D0.L),D0
00001946  0C80 0000 2578          cmp.l     #1,D0
0000194A  0001      
0000194C  6600 003E 2579          bne       BreakPointDisplay_11
                    2580   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001950  2002      2581          move.l    D2,D0
00001952  E388      2582          lsl.l     #1,D0
00001954  41F9 0803 2583          lea       _BreakPointInstruction.L,A0
00001958  014E      
0000195A  2202      2584          move.l    D2,D1
0000195C  E589      2585          lsl.l     #2,D1
0000195E  2233 1800 2586          move.l    0(A3,D1.L),D1
00001962  2241      2587          move.l    D1,A1
00001964  32B0 0800 2588          move.w    0(A0,D0.L),(A1)
                    2589   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001968  2002      2590          move.l    D2,D0
0000196A  E588      2591          lsl.l     #2,D0
0000196C  2033 0800 2592          move.l    0(A3,D0.L),D0
00001970  2040      2593          move.l    D0,A0
00001972  30BC 4E4E 2594          move.w    #20046,(A0)
                    2595   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001976  2202      2596          move.l    D2,D1
00001978  E589      2597          lsl.l     #2,D1
0000197A  2F33 1800 2598          move.l    0(A3,D1.L),-(A7)
0000197E  2F02      2599          move.l    D2,-(A7)
00001980  4879 0000 2600          pea       @final_~1_60.L
00001984  443E      
00001986  4E92      2601          jsr       (A2)
00001988  DEFC 000C 2602          add.w     #12,A7
                    2603   BreakPointDisplay_11:
0000198C  5282      2604          addq.l    #1,D2
0000198E  609E      2605          bra       BreakPointDisplay_8
                    2606   BreakPointDisplay_10:
                    2607   ; }
                    2608   ; }
                    2609   ; printf("\r\n") ;
00001990  4879 0000 2610          pea       @final_~1_1.L
00001994  3EB6      
00001996  4E92      2611          jsr       (A2)
00001998  584F      2612          addq.w    #4,A7
0000199A  4CDF 0C0C 2613          movem.l   (A7)+,D2/D3/A2/A3
0000199E  4E75      2614          rts
                    2615   ; }
                    2616   ; void WatchPointDisplay(void)
                    2617   ; {
                    2618   _WatchPointDisplay:
000019A0  48E7 3020 2619          movem.l   D2/D3/A2,-(A7)
000019A4  45F9 0000 2620          lea       _printf.L,A2
000019A8  3618      
                    2621   ; int i ;
                    2622   ; int WatchPointsSet = 0 ;
000019AA  4283      2623          clr.l     D3
                    2624   ; // any watchpoints set
                    2625   ; for(i = 0; i < 8; i++)  {
000019AC  4282      2626          clr.l     D2
                    2627   WatchPointDisplay_1:
000019AE  0C82 0000 2628          cmp.l     #8,D2
000019B2  0008      
000019B4  6C1C      2629          bge.s     WatchPointDisplay_3
                    2630   ; if(WatchPointSetOrCleared[i] == 1)
000019B6  2002      2631          move.l    D2,D0
000019B8  E588      2632          lsl.l     #2,D0
000019BA  41F9 0803 2633          lea       _WatchPointSetOrCleared.L,A0
000019BE  01A2      
000019C0  2030 0800 2634          move.l    0(A0,D0.L),D0
000019C4  0C80 0000 2635          cmp.l     #1,D0
000019C8  0001      
000019CA  6602      2636          bne.s     WatchPointDisplay_4
                    2637   ; WatchPointsSet = 1;
000019CC  7601      2638          moveq     #1,D3
                    2639   WatchPointDisplay_4:
000019CE  5282      2640          addq.l    #1,D2
000019D0  60DC      2641          bra       WatchPointDisplay_1
                    2642   WatchPointDisplay_3:
                    2643   ; }
                    2644   ; if(WatchPointsSet == 1) {
000019D2  0C83 0000 2645          cmp.l     #1,D3
000019D6  0001      
000019D8  6616      2646          bne.s     WatchPointDisplay_6
                    2647   ; printf("\r\nNum     Address") ;
000019DA  4879 0000 2648          pea       @final_~1_61.L
000019DE  444E      
000019E0  4E92      2649          jsr       (A2)
000019E2  584F      2650          addq.w    #4,A7
                    2651   ; printf("\r\n---     ---------") ;
000019E4  4879 0000 2652          pea       @final_~1_62.L
000019E8  4460      
000019EA  4E92      2653          jsr       (A2)
000019EC  584F      2654          addq.w    #4,A7
000019EE  600A      2655          bra.s     WatchPointDisplay_7
                    2656   WatchPointDisplay_6:
                    2657   ; }
                    2658   ; else
                    2659   ; printf("\r\nNo WatchPoints Set") ;
000019F0  4879 0000 2660          pea       @final_~1_63.L
000019F4  4474      
000019F6  4E92      2661          jsr       (A2)
000019F8  584F      2662          addq.w    #4,A7
                    2663   WatchPointDisplay_7:
                    2664   ; for(i = 0; i < 8; i++)  {
000019FA  4282      2665          clr.l     D2
                    2666   WatchPointDisplay_8:
000019FC  0C82 0000 2667          cmp.l     #8,D2
00001A00  0008      
00001A02  6C00 0038 2668          bge       WatchPointDisplay_10
                    2669   ; if(WatchPointSetOrCleared[i] == 1)
00001A06  2002      2670          move.l    D2,D0
00001A08  E588      2671          lsl.l     #2,D0
00001A0A  41F9 0803 2672          lea       _WatchPointSetOrCleared.L,A0
00001A0E  01A2      
00001A10  2030 0800 2673          move.l    0(A0,D0.L),D0
00001A14  0C80 0000 2674          cmp.l     #1,D0
00001A18  0001      
00001A1A  661C      2675          bne.s     WatchPointDisplay_11
                    2676   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001A1C  2202      2677          move.l    D2,D1
00001A1E  E589      2678          lsl.l     #2,D1
00001A20  41F9 0803 2679          lea       _WatchPointAddress.L,A0
00001A24  0182      
00001A26  2F30 1800 2680          move.l    0(A0,D1.L),-(A7)
00001A2A  2F02      2681          move.l    D2,-(A7)
00001A2C  4879 0000 2682          pea       @final_~1_60.L
00001A30  443E      
00001A32  4E92      2683          jsr       (A2)
00001A34  DEFC 000C 2684          add.w     #12,A7
                    2685   WatchPointDisplay_11:
00001A38  5282      2686          addq.l    #1,D2
00001A3A  60C0      2687          bra       WatchPointDisplay_8
                    2688   WatchPointDisplay_10:
                    2689   ; }
                    2690   ; printf("\r\n") ;
00001A3C  4879 0000 2691          pea       @final_~1_1.L
00001A40  3EB6      
00001A42  4E92      2692          jsr       (A2)
00001A44  584F      2693          addq.w    #4,A7
00001A46  4CDF 040C 2694          movem.l   (A7)+,D2/D3/A2
00001A4A  4E75      2695          rts
                    2696   ; }
                    2697   ; void BreakPointClear(void)
                    2698   ; {
                    2699   _BreakPointClear:
00001A4C  4E56 FFFC 2700          link      A6,#-4
00001A50  48E7 2020 2701          movem.l   D2/A2,-(A7)
00001A54  45F9 0000 2702          lea       _printf.L,A2
00001A58  3618      
                    2703   ; unsigned int i ;
                    2704   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2705   ; BreakPointDisplay() ;
00001A5A  4EB8 18CC 2706          jsr       _BreakPointDisplay
                    2707   ; printf("\r\nEnter Break Point Number: ") ;
00001A5E  4879 0000 2708          pea       @final_~1_64.L
00001A62  448A      
00001A64  4E92      2709          jsr       (A2)
00001A66  584F      2710          addq.w    #4,A7
                    2711   ; i = xtod(_getch()) ;           // get break pointer number
00001A68  2F00      2712          move.l    D0,-(A7)
00001A6A  4EB8 0BB0 2713          jsr       __getch
00001A6E  2200      2714          move.l    D0,D1
00001A70  201F      2715          move.l    (A7)+,D0
00001A72  2F01      2716          move.l    D1,-(A7)
00001A74  4EB8 0C1A 2717          jsr       _xtod
00001A78  584F      2718          addq.w    #4,A7
00001A7A  C0BC 0000 2719          and.l     #255,D0
00001A7E  00FF      
00001A80  2400      2720          move.l    D0,D2
                    2721   ; if((i < 0) || (i > 7))   {
00001A82  0C82 0000 2722          cmp.l     #0,D2
00001A86  0000      
00001A88  6508      2723          blo.s     BreakPointClear_3
00001A8A  0C82 0000 2724          cmp.l     #7,D2
00001A8E  0007      
00001A90  630E      2725          bls.s     BreakPointClear_1
                    2726   BreakPointClear_3:
                    2727   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A92  4879 0000 2728          pea       @final_~1_65.L
00001A96  44A8      
00001A98  4E92      2729          jsr       (A2)
00001A9A  584F      2730          addq.w    #4,A7
                    2731   ; return ;
00001A9C  6000 0080 2732          bra       BreakPointClear_4
                    2733   BreakPointClear_1:
                    2734   ; }
                    2735   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001AA0  2002      2736          move.l    D2,D0
00001AA2  E588      2737          lsl.l     #2,D0
00001AA4  41F9 0803 2738          lea       _BreakPointSetOrCleared.L,A0
00001AA8  015E      
00001AAA  2030 0800 2739          move.l    0(A0,D0.L),D0
00001AAE  0C80 0000 2740          cmp.l     #1,D0
00001AB2  0001      
00001AB4  6600 005A 2741          bne       BreakPointClear_5
                    2742   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001AB8  2002      2743          move.l    D2,D0
00001ABA  E588      2744          lsl.l     #2,D0
00001ABC  41F9 0803 2745          lea       _BreakPointAddress.L,A0
00001AC0  012E      
00001AC2  2D70 0800 2746          move.l    0(A0,D0.L),-4(A6)
00001AC6  FFFC      
                    2747   ; BreakPointAddress[i] = 0 ;
00001AC8  2002      2748          move.l    D2,D0
00001ACA  E588      2749          lsl.l     #2,D0
00001ACC  41F9 0803 2750          lea       _BreakPointAddress.L,A0
00001AD0  012E      
00001AD2  42B0 0800 2751          clr.l     0(A0,D0.L)
                    2752   ; BreakPointSetOrCleared[i] = 0 ;
00001AD6  2002      2753          move.l    D2,D0
00001AD8  E588      2754          lsl.l     #2,D0
00001ADA  41F9 0803 2755          lea       _BreakPointSetOrCleared.L,A0
00001ADE  015E      
00001AE0  42B0 0800 2756          clr.l     0(A0,D0.L)
                    2757   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001AE4  2002      2758          move.l    D2,D0
00001AE6  E388      2759          lsl.l     #1,D0
00001AE8  41F9 0803 2760          lea       _BreakPointInstruction.L,A0
00001AEC  014E      
00001AEE  226E FFFC 2761          move.l    -4(A6),A1
00001AF2  32B0 0800 2762          move.w    0(A0,D0.L),(A1)
                    2763   ; BreakPointInstruction[i] = 0 ;
00001AF6  2002      2764          move.l    D2,D0
00001AF8  E388      2765          lsl.l     #1,D0
00001AFA  41F9 0803 2766          lea       _BreakPointInstruction.L,A0
00001AFE  014E      
00001B00  4270 0800 2767          clr.w     0(A0,D0.L)
                    2768   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001B04  4879 0000 2769          pea       @final_~1_66.L
00001B08  44C4      
00001B0A  4E92      2770          jsr       (A2)
00001B0C  584F      2771          addq.w    #4,A7
00001B0E  600A      2772          bra.s     BreakPointClear_6
                    2773   BreakPointClear_5:
                    2774   ; }
                    2775   ; else
                    2776   ; printf("\r\nBreak Point wasn't Set.....") ;
00001B10  4879 0000 2777          pea       @final_~1_67.L
00001B14  44E2      
00001B16  4E92      2778          jsr       (A2)
00001B18  584F      2779          addq.w    #4,A7
                    2780   BreakPointClear_6:
                    2781   ; BreakPointDisplay() ;
00001B1A  4EB8 18CC 2782          jsr       _BreakPointDisplay
                    2783   ; return ;
                    2784   BreakPointClear_4:
00001B1E  4CDF 0404 2785          movem.l   (A7)+,D2/A2
00001B22  4E5E      2786          unlk      A6
00001B24  4E75      2787          rts
                    2788   ; }
                    2789   ; void WatchPointClear(void)
                    2790   ; {
                    2791   _WatchPointClear:
00001B26  48E7 2020 2792          movem.l   D2/A2,-(A7)
00001B2A  45F9 0000 2793          lea       _printf.L,A2
00001B2E  3618      
                    2794   ; unsigned int i ;
                    2795   ; WatchPointDisplay() ;
00001B30  4EB8 19A0 2796          jsr       _WatchPointDisplay
                    2797   ; printf("\r\nEnter Watch Point Number: ") ;
00001B34  4879 0000 2798          pea       @final_~1_68.L
00001B38  4500      
00001B3A  4E92      2799          jsr       (A2)
00001B3C  584F      2800          addq.w    #4,A7
                    2801   ; i = xtod(_getch()) ;           // get watch pointer number
00001B3E  2F00      2802          move.l    D0,-(A7)
00001B40  4EB8 0BB0 2803          jsr       __getch
00001B44  2200      2804          move.l    D0,D1
00001B46  201F      2805          move.l    (A7)+,D0
00001B48  2F01      2806          move.l    D1,-(A7)
00001B4A  4EB8 0C1A 2807          jsr       _xtod
00001B4E  584F      2808          addq.w    #4,A7
00001B50  C0BC 0000 2809          and.l     #255,D0
00001B54  00FF      
00001B56  2400      2810          move.l    D0,D2
                    2811   ; if((i < 0) || (i > 7))   {
00001B58  0C82 0000 2812          cmp.l     #0,D2
00001B5C  0000      
00001B5E  6508      2813          blo.s     WatchPointClear_3
00001B60  0C82 0000 2814          cmp.l     #7,D2
00001B64  0007      
00001B66  630E      2815          bls.s     WatchPointClear_1
                    2816   WatchPointClear_3:
                    2817   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B68  4879 0000 2818          pea       @final_~1_65.L
00001B6C  44A8      
00001B6E  4E92      2819          jsr       (A2)
00001B70  584F      2820          addq.w    #4,A7
                    2821   ; return ;
00001B72  6000 004E 2822          bra       WatchPointClear_4
                    2823   WatchPointClear_1:
                    2824   ; }
                    2825   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B76  2002      2826          move.l    D2,D0
00001B78  E588      2827          lsl.l     #2,D0
00001B7A  41F9 0803 2828          lea       _WatchPointSetOrCleared.L,A0
00001B7E  01A2      
00001B80  2030 0800 2829          move.l    0(A0,D0.L),D0
00001B84  0C80 0000 2830          cmp.l     #1,D0
00001B88  0001      
00001B8A  6628      2831          bne.s     WatchPointClear_5
                    2832   ; WatchPointAddress[i] = 0 ;
00001B8C  2002      2833          move.l    D2,D0
00001B8E  E588      2834          lsl.l     #2,D0
00001B90  41F9 0803 2835          lea       _WatchPointAddress.L,A0
00001B94  0182      
00001B96  42B0 0800 2836          clr.l     0(A0,D0.L)
                    2837   ; WatchPointSetOrCleared[i] = 0 ;
00001B9A  2002      2838          move.l    D2,D0
00001B9C  E588      2839          lsl.l     #2,D0
00001B9E  41F9 0803 2840          lea       _WatchPointSetOrCleared.L,A0
00001BA2  01A2      
00001BA4  42B0 0800 2841          clr.l     0(A0,D0.L)
                    2842   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001BA8  4879 0000 2843          pea       @final_~1_69.L
00001BAC  451E      
00001BAE  4E92      2844          jsr       (A2)
00001BB0  584F      2845          addq.w    #4,A7
00001BB2  600A      2846          bra.s     WatchPointClear_6
                    2847   WatchPointClear_5:
                    2848   ; }
                    2849   ; else
                    2850   ; printf("\r\nWatch Point Was not Set.....") ;
00001BB4  4879 0000 2851          pea       @final_~1_70.L
00001BB8  453C      
00001BBA  4E92      2852          jsr       (A2)
00001BBC  584F      2853          addq.w    #4,A7
                    2854   WatchPointClear_6:
                    2855   ; WatchPointDisplay() ;
00001BBE  4EB8 19A0 2856          jsr       _WatchPointDisplay
                    2857   ; return ;
                    2858   WatchPointClear_4:
00001BC2  4CDF 0404 2859          movem.l   (A7)+,D2/A2
00001BC6  4E75      2860          rts
                    2861   ; }
                    2862   ; void DisableBreakPoints(void)
                    2863   ; {
                    2864   _DisableBreakPoints:
00001BC8  4E56 FFFC 2865          link      A6,#-4
00001BCC  2F02      2866          move.l    D2,-(A7)
                    2867   ; int i ;
                    2868   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2869   ; for(i = 0; i < 8; i++)  {
00001BCE  4282      2870          clr.l     D2
                    2871   DisableBreakPoints_1:
00001BD0  0C82 0000 2872          cmp.l     #8,D2
00001BD4  0008      
00001BD6  6C00 003E 2873          bge       DisableBreakPoints_3
                    2874   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001BDA  2002      2875          move.l    D2,D0
00001BDC  E588      2876          lsl.l     #2,D0
00001BDE  41F9 0803 2877          lea       _BreakPointSetOrCleared.L,A0
00001BE2  015E      
00001BE4  2030 0800 2878          move.l    0(A0,D0.L),D0
00001BE8  0C80 0000 2879          cmp.l     #1,D0
00001BEC  0001      
00001BEE  6622      2880          bne.s     DisableBreakPoints_4
                    2881   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BF0  2002      2882          move.l    D2,D0
00001BF2  E588      2883          lsl.l     #2,D0
00001BF4  41F9 0803 2884          lea       _BreakPointAddress.L,A0
00001BF8  012E      
00001BFA  2D70 0800 2885          move.l    0(A0,D0.L),-4(A6)
00001BFE  FFFC      
                    2886   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001C00  2002      2887          move.l    D2,D0
00001C02  E388      2888          lsl.l     #1,D0
00001C04  41F9 0803 2889          lea       _BreakPointInstruction.L,A0
00001C08  014E      
00001C0A  226E FFFC 2890          move.l    -4(A6),A1
00001C0E  32B0 0800 2891          move.w    0(A0,D0.L),(A1)
                    2892   DisableBreakPoints_4:
00001C12  5282      2893          addq.l    #1,D2
00001C14  60BA      2894          bra       DisableBreakPoints_1
                    2895   DisableBreakPoints_3:
00001C16  241F      2896          move.l    (A7)+,D2
00001C18  4E5E      2897          unlk      A6
00001C1A  4E75      2898          rts
                    2899   ; }
                    2900   ; }
                    2901   ; }
                    2902   ; void EnableBreakPoints(void)
                    2903   ; {
                    2904   _EnableBreakPoints:
00001C1C  4E56 FFFC 2905          link      A6,#-4
00001C20  2F02      2906          move.l    D2,-(A7)
                    2907   ; int i ;
                    2908   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2909   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2910          clr.l     D2
                    2911   EnableBreakPoints_1:
00001C24  0C82 0000 2912          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C32      2913          bge.s     EnableBreakPoints_3
                    2914   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001C2C  2002      2915          move.l    D2,D0
00001C2E  E588      2916          lsl.l     #2,D0
00001C30  41F9 0803 2917          lea       _BreakPointSetOrCleared.L,A0
00001C34  015E      
00001C36  2030 0800 2918          move.l    0(A0,D0.L),D0
00001C3A  0C80 0000 2919          cmp.l     #1,D0
00001C3E  0001      
00001C40  6618      2920          bne.s     EnableBreakPoints_4
                    2921   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C42  2002      2922          move.l    D2,D0
00001C44  E588      2923          lsl.l     #2,D0
00001C46  41F9 0803 2924          lea       _BreakPointAddress.L,A0
00001C4A  012E      
00001C4C  2D70 0800 2925          move.l    0(A0,D0.L),-4(A6)
00001C50  FFFC      
                    2926   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C52  206E FFFC 2927          move.l    -4(A6),A0
00001C56  30BC 4E4E 2928          move.w    #20046,(A0)
                    2929   EnableBreakPoints_4:
00001C5A  5282      2930          addq.l    #1,D2
00001C5C  60C6      2931          bra       EnableBreakPoints_1
                    2932   EnableBreakPoints_3:
00001C5E  241F      2933          move.l    (A7)+,D2
00001C60  4E5E      2934          unlk      A6
00001C62  4E75      2935          rts
                    2936   ; }
                    2937   ; }
                    2938   ; }
                    2939   ; void KillAllBreakPoints(void)
                    2940   ; {
                    2941   _KillAllBreakPoints:
00001C64  4E56 FFFC 2942          link      A6,#-4
00001C68  2F02      2943          move.l    D2,-(A7)
                    2944   ; int i ;
                    2945   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2946   ; for(i = 0; i < 8; i++)  {
00001C6A  4282      2947          clr.l     D2
                    2948   KillAllBreakPoints_1:
00001C6C  0C82 0000 2949          cmp.l     #8,D2
00001C70  0008      
00001C72  6C00 0052 2950          bge       KillAllBreakPoints_3
                    2951   ; // clear BP
                    2952   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C76  2002      2953          move.l    D2,D0
00001C78  E588      2954          lsl.l     #2,D0
00001C7A  41F9 0803 2955          lea       _BreakPointAddress.L,A0
00001C7E  012E      
00001C80  2D70 0800 2956          move.l    0(A0,D0.L),-4(A6)
00001C84  FFFC      
                    2957   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C86  2002      2958          move.l    D2,D0
00001C88  E388      2959          lsl.l     #1,D0
00001C8A  41F9 0803 2960          lea       _BreakPointInstruction.L,A0
00001C8E  014E      
00001C90  226E FFFC 2961          move.l    -4(A6),A1
00001C94  32B0 0800 2962          move.w    0(A0,D0.L),(A1)
                    2963   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C98  2002      2964          move.l    D2,D0
00001C9A  E588      2965          lsl.l     #2,D0
00001C9C  41F9 0803 2966          lea       _BreakPointAddress.L,A0
00001CA0  012E      
00001CA2  42B0 0800 2967          clr.l     0(A0,D0.L)
                    2968   ; BreakPointInstruction[i] = 0 ;
00001CA6  2002      2969          move.l    D2,D0
00001CA8  E388      2970          lsl.l     #1,D0
00001CAA  41F9 0803 2971          lea       _BreakPointInstruction.L,A0
00001CAE  014E      
00001CB0  4270 0800 2972          clr.w     0(A0,D0.L)
                    2973   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001CB4  2002      2974          move.l    D2,D0
00001CB6  E588      2975          lsl.l     #2,D0
00001CB8  41F9 0803 2976          lea       _BreakPointSetOrCleared.L,A0
00001CBC  015E      
00001CBE  42B0 0800 2977          clr.l     0(A0,D0.L)
00001CC2  5282      2978          addq.l    #1,D2
00001CC4  60A6      2979          bra       KillAllBreakPoints_1
                    2980   KillAllBreakPoints_3:
00001CC6  241F      2981          move.l    (A7)+,D2
00001CC8  4E5E      2982          unlk      A6
00001CCA  4E75      2983          rts
                    2984   ; }
                    2985   ; //BreakPointDisplay() ;       // display the break points
                    2986   ; }
                    2987   ; void KillAllWatchPoints(void)
                    2988   ; {
                    2989   _KillAllWatchPoints:
00001CCC  2F02      2990          move.l    D2,-(A7)
                    2991   ; int i ;
                    2992   ; for(i = 0; i < 8; i++)  {
00001CCE  4282      2993          clr.l     D2
                    2994   KillAllWatchPoints_1:
00001CD0  0C82 0000 2995          cmp.l     #8,D2
00001CD4  0008      
00001CD6  6C20      2996          bge.s     KillAllWatchPoints_3
                    2997   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001CD8  2002      2998          move.l    D2,D0
00001CDA  E588      2999          lsl.l     #2,D0
00001CDC  41F9 0803 3000          lea       _WatchPointAddress.L,A0
00001CE0  0182      
00001CE2  42B0 0800 3001          clr.l     0(A0,D0.L)
                    3002   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001CE6  2002      3003          move.l    D2,D0
00001CE8  E588      3004          lsl.l     #2,D0
00001CEA  41F9 0803 3005          lea       _WatchPointSetOrCleared.L,A0
00001CEE  01A2      
00001CF0  42B0 0800 3006          clr.l     0(A0,D0.L)
00001CF4  5282      3007          addq.l    #1,D2
00001CF6  60D8      3008          bra       KillAllWatchPoints_1
                    3009   KillAllWatchPoints_3:
00001CF8  241F      3010          move.l    (A7)+,D2
00001CFA  4E75      3011          rts
                    3012   ; }
                    3013   ; //WatchPointDisplay() ;       // display the break points
                    3014   ; }
                    3015   ; void SetBreakPoint(void)
                    3016   ; {
                    3017   _SetBreakPoint:
00001CFC  4E56 FFFC 3018          link      A6,#-4
00001D00  48E7 3830 3019          movem.l   D2/D3/D4/A2/A3,-(A7)
00001D04  45F9 0000 3020          lea       _printf.L,A2
00001D08  3618      
00001D0A  47F9 0803 3021          lea       _BreakPointSetOrCleared.L,A3
00001D0E  015E      
                    3022   ; int i ;
                    3023   ; int BPNumber;
                    3024   ; int BPAddress;
                    3025   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3026   ; // see if any free break points
                    3027   ; for(i = 0; i < 8; i ++) {
00001D10  4282      3028          clr.l     D2
                    3029   SetBreakPoint_1:
00001D12  0C82 0000 3030          cmp.l     #8,D2
00001D16  0008      
00001D18  6C10      3031          bge.s     SetBreakPoint_3
                    3032   ; if( BreakPointSetOrCleared[i] == 0)
00001D1A  2002      3033          move.l    D2,D0
00001D1C  E588      3034          lsl.l     #2,D0
00001D1E  2033 0800 3035          move.l    0(A3,D0.L),D0
00001D22  6602      3036          bne.s     SetBreakPoint_4
                    3037   ; break ;         // if spare BP found allow user to set it
00001D24  6004      3038          bra.s     SetBreakPoint_3
                    3039   SetBreakPoint_4:
00001D26  5282      3040          addq.l    #1,D2
00001D28  60E8      3041          bra       SetBreakPoint_1
                    3042   SetBreakPoint_3:
                    3043   ; }
                    3044   ; if(i == 8) {
00001D2A  0C82 0000 3045          cmp.l     #8,D2
00001D2E  0008      
00001D30  660E      3046          bne.s     SetBreakPoint_6
                    3047   ; printf("\r\nNo FREE Break Points.....") ;
00001D32  4879 0000 3048          pea       @final_~1_71.L
00001D36  455C      
00001D38  4E92      3049          jsr       (A2)
00001D3A  584F      3050          addq.w    #4,A7
                    3051   ; return ;
00001D3C  6000 00D6 3052          bra       SetBreakPoint_15
                    3053   SetBreakPoint_6:
                    3054   ; }
                    3055   ; printf("\r\nBreak Point Address: ") ;
00001D40  4879 0000 3056          pea       @final_~1_72.L
00001D44  4578      
00001D46  4E92      3057          jsr       (A2)
00001D48  584F      3058          addq.w    #4,A7
                    3059   ; BPAddress = Get8HexDigits(0) ;
00001D4A  42A7      3060          clr.l     -(A7)
00001D4C  4EB8 0CEC 3061          jsr       _Get8HexDigits
00001D50  584F      3062          addq.w    #4,A7
00001D52  2600      3063          move.l    D0,D3
                    3064   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D54  2803      3065          move.l    D3,D4
                    3066   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D56  2003      3067          move.l    D3,D0
00001D58  C0BC 0000 3068          and.l     #1,D0
00001D5C  0001      
00001D5E  0C80 0000 3069          cmp.l     #1,D0
00001D62  0001      
00001D64  660E      3070          bne.s     SetBreakPoint_9
                    3071   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D66  4879 0000 3072          pea       @final_~1_73.L
00001D6A  4590      
00001D6C  4E92      3073          jsr       (A2)
00001D6E  584F      3074          addq.w    #4,A7
                    3075   ; return ;
00001D70  6000 00A2 3076          bra       SetBreakPoint_15
                    3077   SetBreakPoint_9:
                    3078   ; }
                    3079   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D74  0C83 0000 3080          cmp.l     #32768,D3
00001D78  8000      
00001D7A  640E      3081          bhs.s     SetBreakPoint_11
                    3082   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D7C  4879 0000 3083          pea       @final_~1_74.L
00001D80  45C6      
00001D82  4E92      3084          jsr       (A2)
00001D84  584F      3085          addq.w    #4,A7
                    3086   ; return ;
00001D86  6000 008C 3087          bra       SetBreakPoint_15
                    3088   SetBreakPoint_11:
                    3089   ; }
                    3090   ; // search for first free bp or existing same BP
                    3091   ; for(i = 0; i < 8; i++)  {
00001D8A  4282      3092          clr.l     D2
                    3093   SetBreakPoint_13:
00001D8C  0C82 0000 3094          cmp.l     #8,D2
00001D90  0008      
00001D92  6C00 0080 3095          bge       SetBreakPoint_15
                    3096   ; if(BreakPointAddress[i] == BPAddress)   {
00001D96  2002      3097          move.l    D2,D0
00001D98  E588      3098          lsl.l     #2,D0
00001D9A  41F9 0803 3099          lea       _BreakPointAddress.L,A0
00001D9E  012E      
00001DA0  B6B0 0800 3100          cmp.l     0(A0,D0.L),D3
00001DA4  6610      3101          bne.s     SetBreakPoint_16
                    3102   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001DA6  2F03      3103          move.l    D3,-(A7)
00001DA8  4879 0000 3104          pea       @final_~1_75.L
00001DAC  460E      
00001DAE  4E92      3105          jsr       (A2)
00001DB0  504F      3106          addq.w    #8,A7
                    3107   ; return ;
00001DB2  6000 0060 3108          bra       SetBreakPoint_15
                    3109   SetBreakPoint_16:
                    3110   ; }
                    3111   ; if(BreakPointSetOrCleared[i] == 0) {
00001DB6  2002      3112          move.l    D2,D0
00001DB8  E588      3113          lsl.l     #2,D0
00001DBA  2033 0800 3114          move.l    0(A3,D0.L),D0
00001DBE  6600 004E 3115          bne       SetBreakPoint_18
                    3116   ; // set BP here
                    3117   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001DC2  2002      3118          move.l    D2,D0
00001DC4  E588      3119          lsl.l     #2,D0
00001DC6  27BC 0000 3120          move.l    #1,0(A3,D0.L)
00001DCA  0001 0800 
                    3121   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001DCE  2044      3122          move.l    D4,A0
00001DD0  2002      3123          move.l    D2,D0
00001DD2  E388      3124          lsl.l     #1,D0
00001DD4  43F9 0803 3125          lea       _BreakPointInstruction.L,A1
00001DD8  014E      
00001DDA  3390 0800 3126          move.w    (A0),0(A1,D0.L)
                    3127   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001DDE  2F04      3128          move.l    D4,-(A7)
00001DE0  4879 0000 3129          pea       @final_~1_76.L
00001DE4  4646      
00001DE6  4E92      3130          jsr       (A2)
00001DE8  504F      3131          addq.w    #8,A7
                    3132   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DEA  2044      3133          move.l    D4,A0
00001DEC  30BC 4E4E 3134          move.w    #20046,(A0)
                    3135   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DF0  2002      3136          move.l    D2,D0
00001DF2  E588      3137          lsl.l     #2,D0
00001DF4  41F9 0803 3138          lea       _BreakPointAddress.L,A0
00001DF8  012E      
00001DFA  2183 0800 3139          move.l    D3,0(A0,D0.L)
                    3140   ; printf("\r\n") ;
00001DFE  4879 0000 3141          pea       @final_~1_1.L
00001E02  3EB6      
00001E04  4E92      3142          jsr       (A2)
00001E06  584F      3143          addq.w    #4,A7
                    3144   ; BreakPointDisplay() ;       // display the break points
00001E08  4EB8 18CC 3145          jsr       _BreakPointDisplay
                    3146   ; return ;
00001E0C  6006      3147          bra.s     SetBreakPoint_15
                    3148   SetBreakPoint_18:
00001E0E  5282      3149          addq.l    #1,D2
00001E10  6000 FF7A 3150          bra       SetBreakPoint_13
                    3151   SetBreakPoint_15:
00001E14  4CDF 0C1C 3152          movem.l   (A7)+,D2/D3/D4/A2/A3
00001E18  4E5E      3153          unlk      A6
00001E1A  4E75      3154          rts
                    3155   ; }
                    3156   ; }
                    3157   ; }
                    3158   ; void SetWatchPoint(void)
                    3159   ; {
                    3160   _SetWatchPoint:
00001E1C  4E56 FFF8 3161          link      A6,#-8
00001E20  48E7 3030 3162          movem.l   D2/D3/A2/A3,-(A7)
00001E24  45F9 0000 3163          lea       _printf.L,A2
00001E28  3618      
00001E2A  47F9 0803 3164          lea       _WatchPointSetOrCleared.L,A3
00001E2E  01A2      
                    3165   ; int i ;
                    3166   ; int WPNumber;
                    3167   ; int WPAddress;
                    3168   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3169   ; // see if any free break points
                    3170   ; for(i = 0; i < 8; i ++) {
00001E30  4282      3171          clr.l     D2
                    3172   SetWatchPoint_1:
00001E32  0C82 0000 3173          cmp.l     #8,D2
00001E36  0008      
00001E38  6C10      3174          bge.s     SetWatchPoint_3
                    3175   ; if( WatchPointSetOrCleared[i] == 0)
00001E3A  2002      3176          move.l    D2,D0
00001E3C  E588      3177          lsl.l     #2,D0
00001E3E  2033 0800 3178          move.l    0(A3,D0.L),D0
00001E42  6602      3179          bne.s     SetWatchPoint_4
                    3180   ; break ;         // if spare WP found allow user to set it
00001E44  6004      3181          bra.s     SetWatchPoint_3
                    3182   SetWatchPoint_4:
00001E46  5282      3183          addq.l    #1,D2
00001E48  60E8      3184          bra       SetWatchPoint_1
                    3185   SetWatchPoint_3:
                    3186   ; }
                    3187   ; if(i == 8) {
00001E4A  0C82 0000 3188          cmp.l     #8,D2
00001E4E  0008      
00001E50  660E      3189          bne.s     SetWatchPoint_6
                    3190   ; printf("\r\nNo FREE Watch Points.....") ;
00001E52  4879 0000 3191          pea       @final_~1_77.L
00001E56  466C      
00001E58  4E92      3192          jsr       (A2)
00001E5A  584F      3193          addq.w    #4,A7
                    3194   ; return ;
00001E5C  6000 008C 3195          bra       SetWatchPoint_11
                    3196   SetWatchPoint_6:
                    3197   ; }
                    3198   ; printf("\r\nWatch Point Address: ") ;
00001E60  4879 0000 3199          pea       @final_~1_78.L
00001E64  4688      
00001E66  4E92      3200          jsr       (A2)
00001E68  584F      3201          addq.w    #4,A7
                    3202   ; WPAddress = Get8HexDigits(0) ;
00001E6A  42A7      3203          clr.l     -(A7)
00001E6C  4EB8 0CEC 3204          jsr       _Get8HexDigits
00001E70  584F      3205          addq.w    #4,A7
00001E72  2600      3206          move.l    D0,D3
                    3207   ; // search for first free wp or existing same wp
                    3208   ; for(i = 0; i < 8; i++)  {
00001E74  4282      3209          clr.l     D2
                    3210   SetWatchPoint_9:
00001E76  0C82 0000 3211          cmp.l     #8,D2
00001E7A  0008      
00001E7C  6C00 006C 3212          bge       SetWatchPoint_11
                    3213   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E80  2002      3214          move.l    D2,D0
00001E82  E588      3215          lsl.l     #2,D0
00001E84  41F9 0803 3216          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  B6B0 0800 3217          cmp.l     0(A0,D0.L),D3
00001E8E  6614      3218          bne.s     SetWatchPoint_12
00001E90  4A83      3219          tst.l     D3
00001E92  6710      3220          beq.s     SetWatchPoint_12
                    3221   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E94  2F03      3222          move.l    D3,-(A7)
00001E96  4879 0000 3223          pea       @final_~1_79.L
00001E9A  46A0      
00001E9C  4E92      3224          jsr       (A2)
00001E9E  504F      3225          addq.w    #8,A7
                    3226   ; return ;
00001EA0  6000 0048 3227          bra       SetWatchPoint_11
                    3228   SetWatchPoint_12:
                    3229   ; }
                    3230   ; if(WatchPointSetOrCleared[i] == 0) {
00001EA4  2002      3231          move.l    D2,D0
00001EA6  E588      3232          lsl.l     #2,D0
00001EA8  2033 0800 3233          move.l    0(A3,D0.L),D0
00001EAC  6600 0038 3234          bne       SetWatchPoint_14
                    3235   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001EB0  2002      3236          move.l    D2,D0
00001EB2  E588      3237          lsl.l     #2,D0
00001EB4  27BC 0000 3238          move.l    #1,0(A3,D0.L)
00001EB8  0001 0800 
                    3239   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001EBC  2F03      3240          move.l    D3,-(A7)
00001EBE  4879 0000 3241          pea       @final_~1_80.L
00001EC2  46D6      
00001EC4  4E92      3242          jsr       (A2)
00001EC6  504F      3243          addq.w    #8,A7
                    3244   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001EC8  2002      3245          move.l    D2,D0
00001ECA  E588      3246          lsl.l     #2,D0
00001ECC  41F9 0803 3247          lea       _WatchPointAddress.L,A0
00001ED0  0182      
00001ED2  2183 0800 3248          move.l    D3,0(A0,D0.L)
                    3249   ; printf("\r\n") ;
00001ED6  4879 0000 3250          pea       @final_~1_1.L
00001EDA  3EB6      
00001EDC  4E92      3251          jsr       (A2)
00001EDE  584F      3252          addq.w    #4,A7
                    3253   ; WatchPointDisplay() ;       // display the break points
00001EE0  4EB8 19A0 3254          jsr       _WatchPointDisplay
                    3255   ; return ;
00001EE4  6004      3256          bra.s     SetWatchPoint_11
                    3257   SetWatchPoint_14:
00001EE6  5282      3258          addq.l    #1,D2
00001EE8  608C      3259          bra       SetWatchPoint_9
                    3260   SetWatchPoint_11:
00001EEA  4CDF 0C0C 3261          movem.l   (A7)+,D2/D3/A2/A3
00001EEE  4E5E      3262          unlk      A6
00001EF0  4E75      3263          rts
                    3264   ; }
                    3265   ; }
                    3266   ; }
                    3267   ; void HandleBreakPoint(void)
                    3268   ; {
                    3269   _HandleBreakPoint:
00001EF2  4E56 FFFC 3270          link      A6,#-4
00001EF6  48E7 0038 3271          movem.l   A2/A3/A4,-(A7)
00001EFA  45F9 0803 3272          lea       _i.L,A2
00001EFE  00C4      
00001F00  47F9 0000 3273          lea       _printf.L,A3
00001F04  3618      
00001F06  49F9 0803 3274          lea       _PC.L,A4
00001F0A  0120      
                    3275   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3276   ; // now we have to put the break point back to run the instruction
                    3277   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3278   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001F0C  5594      3279          subq.l    #2,(A4)
                    3280   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001F0E  4879 0000 3281          pea       @final_~1_81.L
00001F12  46FC      
00001F14  4E93      3282          jsr       (A3)
00001F16  584F      3283          addq.w    #4,A7
                    3284   ; printf("\r\nSingle Step : [ON]") ;
00001F18  4879 0000 3285          pea       @final_~1_82.L
00001F1C  4710      
00001F1E  4E93      3286          jsr       (A3)
00001F20  584F      3287          addq.w    #4,A7
                    3288   ; printf("\r\nBreakPoints : [Enabled]") ;
00001F22  4879 0000 3289          pea       @final_~1_83.L
00001F26  4726      
00001F28  4E93      3290          jsr       (A3)
00001F2A  584F      3291          addq.w    #4,A7
                    3292   ; // now clear the break point (put original instruction back)
                    3293   ; ProgramBreakPointAddress = PC ;
00001F2C  2D54 FFFC 3294          move.l    (A4),-4(A6)
                    3295   ; for(i = 0; i < 8; i ++) {
00001F30  4292      3296          clr.l     (A2)
                    3297   HandleBreakPoint_1:
00001F32  2012      3298          move.l    (A2),D0
00001F34  0C80 0000 3299          cmp.l     #8,D0
00001F38  0008      
00001F3A  6400 0056 3300          bhs       HandleBreakPoint_3
                    3301   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001F3E  2012      3302          move.l    (A2),D0
00001F40  E588      3303          lsl.l     #2,D0
00001F42  41F9 0803 3304          lea       _BreakPointAddress.L,A0
00001F46  012E      
00001F48  2230 0800 3305          move.l    0(A0,D0.L),D1
00001F4C  B294      3306          cmp.l     (A4),D1
00001F4E  6600 003E 3307          bne       HandleBreakPoint_4
                    3308   ; BreakPointAddress[i] = 0 ;
00001F52  2012      3309          move.l    (A2),D0
00001F54  E588      3310          lsl.l     #2,D0
00001F56  41F9 0803 3311          lea       _BreakPointAddress.L,A0
00001F5A  012E      
00001F5C  42B0 0800 3312          clr.l     0(A0,D0.L)
                    3313   ; BreakPointSetOrCleared[i] = 0 ;
00001F60  2012      3314          move.l    (A2),D0
00001F62  E588      3315          lsl.l     #2,D0
00001F64  41F9 0803 3316          lea       _BreakPointSetOrCleared.L,A0
00001F68  015E      
00001F6A  42B0 0800 3317          clr.l     0(A0,D0.L)
                    3318   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F6E  2012      3319          move.l    (A2),D0
00001F70  E388      3320          lsl.l     #1,D0
00001F72  41F9 0803 3321          lea       _BreakPointInstruction.L,A0
00001F76  014E      
00001F78  226E FFFC 3322          move.l    -4(A6),A1
00001F7C  32B0 0800 3323          move.w    0(A0,D0.L),(A1)
                    3324   ; BreakPointInstruction[i] = 0 ;
00001F80  2012      3325          move.l    (A2),D0
00001F82  E388      3326          lsl.l     #1,D0
00001F84  41F9 0803 3327          lea       _BreakPointInstruction.L,A0
00001F88  014E      
00001F8A  4270 0800 3328          clr.w     0(A0,D0.L)
                    3329   HandleBreakPoint_4:
00001F8E  5292      3330          addq.l    #1,(A2)
00001F90  60A0      3331          bra       HandleBreakPoint_1
                    3332   HandleBreakPoint_3:
                    3333   ; }
                    3334   ; }
                    3335   ; DumpRegisters() ;
00001F92  4EB8 111E 3336          jsr       _DumpRegisters
                    3337   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F96  4879 0000 3338          pea       @final_~1_45.L
00001F9A  42A2      
00001F9C  4E93      3339          jsr       (A3)
00001F9E  584F      3340          addq.w    #4,A7
                    3341   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001FA0  4879 0000 3342          pea       @final_~1_84.L
00001FA4  4740      
00001FA6  4E93      3343          jsr       (A3)
00001FA8  584F      3344          addq.w    #4,A7
                    3345   ; menu() ;
00001FAA  4EB9 0000 3346          jsr       _menu
00001FAE  21B6      
00001FB0  4CDF 1C00 3347          movem.l   (A7)+,A2/A3/A4
00001FB4  4E5E      3348          unlk      A6
00001FB6  4E75      3349          rts
                    3350   ; }
                    3351   ; void UnknownCommand()
                    3352   ; {
                    3353   _UnknownCommand:
                    3354   ; printf("\r\nUnknown Command.....\r\n") ;
00001FB8  4879 0000 3355          pea       @final_~1_85.L
00001FBC  4768      
00001FBE  4EB9 0000 3356          jsr       _printf
00001FC2  3618      
00001FC4  584F      3357          addq.w    #4,A7
                    3358   ; Help() ;
00001FC6  4EB9 0000 3359          jsr       _Help
00001FCA  20DC      
00001FCC  4E75      3360          rts
                    3361   ; }
                    3362   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3363   ; void CallDebugMonitor(void)
                    3364   ; {
                    3365   _CallDebugMonitor:
                    3366   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001FCE  4879 0000 3367          pea       @final_~1_86.L
00001FD2  4782      
00001FD4  4EB9 0000 3368          jsr       _printf
00001FD8  3618      
00001FDA  584F      3369          addq.w    #4,A7
                    3370   ; menu();
00001FDC  4EB9 0000 3371          jsr       _menu
00001FE0  21B6      
00001FE2  4E75      3372          rts
                    3373   ; }
                    3374   ; void Breakpoint(void)
                    3375   ; {
                    3376   _Breakpoint:
00001FE4  2F02      3377          move.l    D2,-(A7)
                    3378   ; char c;
                    3379   ; c = toupper(_getch());
00001FE6  2F00      3380          move.l    D0,-(A7)
00001FE8  4EB8 0BB0 3381          jsr       __getch
00001FEC  2200      3382          move.l    D0,D1
00001FEE  201F      3383          move.l    (A7)+,D0
00001FF0  2F01      3384          move.l    D1,-(A7)
00001FF2  4EB9 0000 3385          jsr       _toupper
00001FF6  35EC      
00001FF8  584F      3386          addq.w    #4,A7
00001FFA  1400      3387          move.b    D0,D2
                    3388   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FFC  0C02 0044 3389          cmp.b     #68,D2
00002000  6608      3390          bne.s     Breakpoint_1
                    3391   ; BreakPointDisplay() ;
00002002  4EB8 18CC 3392          jsr       _BreakPointDisplay
00002006  6000 0054 3393          bra       Breakpoint_10
                    3394   Breakpoint_1:
                    3395   ; else if(c == (char)('K')) {                                 // breakpoint Kill
0000200A  0C02 004B 3396          cmp.b     #75,D2
0000200E  6630      3397          bne.s     Breakpoint_3
                    3398   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002010  4879 0000 3399          pea       @final_~1_87.L
00002014  47A2      
00002016  4EB9 0000 3400          jsr       _printf
0000201A  3618      
0000201C  584F      3401          addq.w    #4,A7
                    3402   ; c = toupper(_getch());
0000201E  2F00      3403          move.l    D0,-(A7)
00002020  4EB8 0BB0 3404          jsr       __getch
00002024  2200      3405          move.l    D0,D1
00002026  201F      3406          move.l    (A7)+,D0
00002028  2F01      3407          move.l    D1,-(A7)
0000202A  4EB9 0000 3408          jsr       _toupper
0000202E  35EC      
00002030  584F      3409          addq.w    #4,A7
00002032  1400      3410          move.b    D0,D2
                    3411   ; if(c == (char)('Y'))
00002034  0C02 0059 3412          cmp.b     #89,D2
00002038  6604      3413          bne.s     Breakpoint_5
                    3414   ; KillAllBreakPoints() ;
0000203A  4EB8 1C64 3415          jsr       _KillAllBreakPoints
                    3416   Breakpoint_5:
0000203E  601C      3417          bra.s     Breakpoint_10
                    3418   Breakpoint_3:
                    3419   ; }
                    3420   ; else if(c == (char)('S')) {
00002040  0C02 0053 3421          cmp.b     #83,D2
00002044  6606      3422          bne.s     Breakpoint_7
                    3423   ; SetBreakPoint() ;
00002046  4EB8 1CFC 3424          jsr       _SetBreakPoint
0000204A  6010      3425          bra.s     Breakpoint_10
                    3426   Breakpoint_7:
                    3427   ; }
                    3428   ; else if(c == (char)('C')) {
0000204C  0C02 0043 3429          cmp.b     #67,D2
00002050  6606      3430          bne.s     Breakpoint_9
                    3431   ; BreakPointClear() ;
00002052  4EB8 1A4C 3432          jsr       _BreakPointClear
00002056  6004      3433          bra.s     Breakpoint_10
                    3434   Breakpoint_9:
                    3435   ; }
                    3436   ; else
                    3437   ; UnknownCommand() ;
00002058  4EB8 1FB8 3438          jsr       _UnknownCommand
                    3439   Breakpoint_10:
0000205C  241F      3440          move.l    (A7)+,D2
0000205E  4E75      3441          rts
                    3442   ; }
                    3443   ; void Watchpoint(void)
                    3444   ; {
                    3445   _Watchpoint:
00002060  2F02      3446          move.l    D2,-(A7)
                    3447   ; char c;
                    3448   ; c = toupper(_getch());
00002062  2F00      3449          move.l    D0,-(A7)
00002064  4EB8 0BB0 3450          jsr       __getch
00002068  2200      3451          move.l    D0,D1
0000206A  201F      3452          move.l    (A7)+,D0
0000206C  2F01      3453          move.l    D1,-(A7)
0000206E  4EB9 0000 3454          jsr       _toupper
00002072  35EC      
00002074  584F      3455          addq.w    #4,A7
00002076  1400      3456          move.b    D0,D2
                    3457   ; if( c == (char)('D'))                                      // WatchPoint Display
00002078  0C02 0044 3458          cmp.b     #68,D2
0000207C  6608      3459          bne.s     Watchpoint_1
                    3460   ; WatchPointDisplay() ;
0000207E  4EB8 19A0 3461          jsr       _WatchPointDisplay
00002082  6000 0054 3462          bra       Watchpoint_10
                    3463   Watchpoint_1:
                    3464   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002086  0C02 004B 3465          cmp.b     #75,D2
0000208A  6630      3466          bne.s     Watchpoint_3
                    3467   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000208C  4879 0000 3468          pea       @final_~1_88.L
00002090  47C4      
00002092  4EB9 0000 3469          jsr       _printf
00002096  3618      
00002098  584F      3470          addq.w    #4,A7
                    3471   ; c = toupper(_getch());
0000209A  2F00      3472          move.l    D0,-(A7)
0000209C  4EB8 0BB0 3473          jsr       __getch
000020A0  2200      3474          move.l    D0,D1
000020A2  201F      3475          move.l    (A7)+,D0
000020A4  2F01      3476          move.l    D1,-(A7)
000020A6  4EB9 0000 3477          jsr       _toupper
000020AA  35EC      
000020AC  584F      3478          addq.w    #4,A7
000020AE  1400      3479          move.b    D0,D2
                    3480   ; if(c == (char)('Y'))
000020B0  0C02 0059 3481          cmp.b     #89,D2
000020B4  6604      3482          bne.s     Watchpoint_5
                    3483   ; KillAllWatchPoints() ;
000020B6  4EB8 1CCC 3484          jsr       _KillAllWatchPoints
                    3485   Watchpoint_5:
000020BA  601C      3486          bra.s     Watchpoint_10
                    3487   Watchpoint_3:
                    3488   ; }
                    3489   ; else if(c == (char)('S')) {
000020BC  0C02 0053 3490          cmp.b     #83,D2
000020C0  6606      3491          bne.s     Watchpoint_7
                    3492   ; SetWatchPoint() ;
000020C2  4EB8 1E1C 3493          jsr       _SetWatchPoint
000020C6  6010      3494          bra.s     Watchpoint_10
                    3495   Watchpoint_7:
                    3496   ; }
                    3497   ; else if(c == (char)('C')) {
000020C8  0C02 0043 3498          cmp.b     #67,D2
000020CC  6606      3499          bne.s     Watchpoint_9
                    3500   ; WatchPointClear() ;
000020CE  4EB8 1B26 3501          jsr       _WatchPointClear
000020D2  6004      3502          bra.s     Watchpoint_10
                    3503   Watchpoint_9:
                    3504   ; }
                    3505   ; else
                    3506   ; UnknownCommand() ;
000020D4  4EB8 1FB8 3507          jsr       _UnknownCommand
                    3508   Watchpoint_10:
000020D8  241F      3509          move.l    (A7)+,D2
000020DA  4E75      3510          rts
                    3511   ; }
                    3512   ; void Help(void)
                    3513   ; {
                    3514   _Help:
000020DC  48E7 2020 3515          movem.l   D2/A2,-(A7)
000020E0  45F9 0000 3516          lea       _printf.L,A2
000020E4  3618      
                    3517   ; char *banner = "\r\n----------------------------------------------------------------" ;
000020E6  41F9 0000 3518          lea       @final_~1_89.L,A0
000020EA  47E6      
000020EC  2408      3519          move.l    A0,D2
                    3520   ; printf(banner) ;
000020EE  2F02      3521          move.l    D2,-(A7)
000020F0  4E92      3522          jsr       (A2)
000020F2  584F      3523          addq.w    #4,A7
                    3524   ; printf("\r\n  Debugger Command Summary") ;
000020F4  4879 0000 3525          pea       @final_~1_90.L
000020F8  482A      
000020FA  4E92      3526          jsr       (A2)
000020FC  584F      3527          addq.w    #4,A7
                    3528   ; printf(banner) ;
000020FE  2F02      3529          move.l    D2,-(A7)
00002100  4E92      3530          jsr       (A2)
00002102  584F      3531          addq.w    #4,A7
                    3532   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002104  4879 0000 3533          pea       @final_~1_91.L
00002108  4848      
0000210A  4E92      3534          jsr       (A2)
0000210C  584F      3535          addq.w    #4,A7
                    3536   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
0000210E  4879 0000 3537          pea       @final_~1_92.L
00002112  488C      
00002114  4E92      3538          jsr       (A2)
00002116  584F      3539          addq.w    #4,A7
                    3540   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002118  4879 0000 3541          pea       @final_~1_93.L
0000211C  48C4      
0000211E  4E92      3542          jsr       (A2)
00002120  584F      3543          addq.w    #4,A7
                    3544   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
00002122  4879 0000 3545          pea       @final_~1_94.L
00002126  48FE      
00002128  4E92      3546          jsr       (A2)
0000212A  584F      3547          addq.w    #4,A7
                    3548   ; printf("\r\n  E            - Enter String into Memory") ;
0000212C  4879 0000 3549          pea       @final_~1_95.L
00002130  4930      
00002132  4E92      3550          jsr       (A2)
00002134  584F      3551          addq.w    #4,A7
                    3552   ; printf("\r\n  F            - Fill Memory with Data") ;
00002136  4879 0000 3553          pea       @final_~1_96.L
0000213A  495C      
0000213C  4E92      3554          jsr       (A2)
0000213E  584F      3555          addq.w    #4,A7
                    3556   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002140  2F39 0803 3557          move.l    _PC.L,-(A7)
00002144  0120      
00002146  4879 0000 3558          pea       @final_~1_97.L
0000214A  4986      
0000214C  4E92      3559          jsr       (A2)
0000214E  504F      3560          addq.w    #8,A7
                    3561   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002150  4879 0000 3562          pea       @final_~1_98.L
00002154  49C0      
00002156  4E92      3563          jsr       (A2)
00002158  584F      3564          addq.w    #4,A7
                    3565   ; printf("\r\n  M            - Memory Examine and Change");
0000215A  4879 0000 3566          pea       @final_~1_99.L
0000215E  49F8      
00002160  4E92      3567          jsr       (A2)
00002162  584F      3568          addq.w    #4,A7
                    3569   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002164  4879 0000 3570          pea       @final_~1_100.L
00002168  4A26      
0000216A  4E92      3571          jsr       (A2)
0000216C  584F      3572          addq.w    #4,A7
                    3573   ; printf("\r\n  R            - Display 68000 Registers") ;
0000216E  4879 0000 3574          pea       @final_~1_101.L
00002172  4A60      
00002174  4E92      3575          jsr       (A2)
00002176  584F      3576          addq.w    #4,A7
                    3577   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002178  4879 0000 3578          pea       @final_~1_102.L
0000217C  4A8C      
0000217E  4E92      3579          jsr       (A2)
00002180  584F      3580          addq.w    #4,A7
                    3581   ; printf("\r\n  TM           - Test Memory") ;
00002182  4879 0000 3582          pea       @final_~1_103.L
00002186  4ABE      
00002188  4E92      3583          jsr       (A2)
0000218A  584F      3584          addq.w    #4,A7
                    3585   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000218C  4879 0000 3586          pea       @final_~1_104.L
00002190  4ADE      
00002192  4E92      3587          jsr       (A2)
00002194  584F      3588          addq.w    #4,A7
                    3589   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002196  4879 0000 3590          pea       @final_~1_105.L
0000219A  4B06      
0000219C  4E92      3591          jsr       (A2)
0000219E  584F      3592          addq.w    #4,A7
                    3593   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
000021A0  4879 0000 3594          pea       @final_~1_106.L
000021A4  4B3C      
000021A6  4E92      3595          jsr       (A2)
000021A8  584F      3596          addq.w    #4,A7
                    3597   ; printf(banner) ;
000021AA  2F02      3598          move.l    D2,-(A7)
000021AC  4E92      3599          jsr       (A2)
000021AE  584F      3600          addq.w    #4,A7
000021B0  4CDF 0404 3601          movem.l   (A7)+,D2/A2
000021B4  4E75      3602          rts
                    3603   ; }
                    3604   ; void menu(void)
                    3605   ; {
                    3606   _menu:
000021B6  48E7 303C 3607          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000021BA  45F9 0000 3608          lea       _printf.L,A2
000021BE  3618      
000021C0  47F9 0803 3609          lea       _Trace.L,A3
000021C4  00D8      
000021C6  49F9 0803 3610          lea       _x.L,A4
000021CA  00C8      
000021CC  4BF9 0803 3611          lea       _SR.L,A5
000021D0  012C      
                    3612   ; char c,c1 ;
                    3613   ; while(1)    {
                    3614   menu_1:
                    3615   ; FlushKeyboard() ;               // dump unread characters from keyboard
000021D2  4EB8 0BEE 3616          jsr       _FlushKeyboard
                    3617   ; printf("\r\n#") ;
000021D6  4879 0000 3618          pea       @final_~1_107.L
000021DA  4B74      
000021DC  4E92      3619          jsr       (A2)
000021DE  584F      3620          addq.w    #4,A7
                    3621   ; c = toupper(_getch());
000021E0  2F00      3622          move.l    D0,-(A7)
000021E2  4EB8 0BB0 3623          jsr       __getch
000021E6  2200      3624          move.l    D0,D1
000021E8  201F      3625          move.l    (A7)+,D0
000021EA  2F01      3626          move.l    D1,-(A7)
000021EC  4EB9 0000 3627          jsr       _toupper
000021F0  35EC      
000021F2  584F      3628          addq.w    #4,A7
000021F4  1400      3629          move.b    D0,D2
                    3630   ; if( c == (char)('L'))                  // load s record file
000021F6  0C02 004C 3631          cmp.b     #76,D2
000021FA  6608      3632          bne.s     menu_4
                    3633   ; Load_SRecordFile() ;
000021FC  4EB8 0E7E 3634          jsr       _Load_SRecordFile
00002200  6000 0220 3635          bra       menu_46
                    3636   menu_4:
                    3637   ; else if( c == (char)('D'))             // dump memory
00002204  0C02 0044 3638          cmp.b     #68,D2
00002208  6608      3639          bne.s     menu_6
                    3640   ; DumpMemory() ;
0000220A  4EB8 0D14 3641          jsr       _DumpMemory
0000220E  6000 0212 3642          bra       menu_46
                    3643   menu_6:
                    3644   ; else if( c == (char)('E'))             // Enter String into memory
00002212  0C02 0045 3645          cmp.b     #69,D2
00002216  660A      3646          bne.s     menu_8
                    3647   ; EnterString() ;
00002218  4EB9 0000 3648          jsr       _EnterString
0000221C  256A      
0000221E  6000 0202 3649          bra       menu_46
                    3650   menu_8:
                    3651   ; else if( c == (char)('F'))             // fill memory
00002222  0C02 0046 3652          cmp.b     #70,D2
00002226  6608      3653          bne.s     menu_10
                    3654   ; FillMemory() ;
00002228  4EB8 0E04 3655          jsr       _FillMemory
0000222C  6000 01F4 3656          bra       menu_46
                    3657   menu_10:
                    3658   ; else if( c == (char)('G'))  {           // go user program
00002230  0C02 0047 3659          cmp.b     #71,D2
00002234  6628      3660          bne.s     menu_12
                    3661   ; printf("\r\nProgram Running.....") ;
00002236  4879 0000 3662          pea       @final_~1_108.L
0000223A  4B78      
0000223C  4E92      3663          jsr       (A2)
0000223E  584F      3664          addq.w    #4,A7
                    3665   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002240  4879 0000 3666          pea       @final_~1_109.L
00002244  4B90      
00002246  4E92      3667          jsr       (A2)
00002248  584F      3668          addq.w    #4,A7
                    3669   ; GoFlag = 1 ;
0000224A  23FC 0000 3670          move.l    #1,_GoFlag.L
0000224E  0001 0803 
00002252  00DC      
                    3671   ; snake_game();
00002254  4EB9 0000 3672          jsr       _snake_game
00002258  3132      
0000225A  6000 01C6 3673          bra       menu_46
                    3674   menu_12:
                    3675   ; }
                    3676   ; else if( c == (char)('M'))           // memory examine and modify
0000225E  0C02 004D 3677          cmp.b     #77,D2
00002262  6608      3678          bne.s     menu_14
                    3679   ; MemoryChange() ;
00002264  4EB8 100C 3680          jsr       _MemoryChange
00002268  6000 01B8 3681          bra       menu_46
                    3682   menu_14:
                    3683   ; else if( c == (char)('P'))            // Program Flash Chip
0000226C  0C02 0050 3684          cmp.b     #80,D2
00002270  6608      3685          bne.s     menu_16
                    3686   ; ProgramFlashChip() ;
00002272  4EB8 110C 3687          jsr       _ProgramFlashChip
00002276  6000 01AA 3688          bra       menu_46
                    3689   menu_16:
                    3690   ; else if( c == (char)('C'))             // copy flash chip to ram and go
0000227A  0C02 0043 3691          cmp.b     #67,D2
0000227E  6608      3692          bne.s     menu_18
                    3693   ; LoadFromFlashChip();
00002280  4EB8 110E 3694          jsr       _LoadFromFlashChip
00002284  6000 019C 3695          bra       menu_46
                    3696   menu_18:
                    3697   ; else if( c == (char)('R'))             // dump registers
00002288  0C02 0052 3698          cmp.b     #82,D2
0000228C  6608      3699          bne.s     menu_20
                    3700   ; DumpRegisters() ;
0000228E  4EB8 111E 3701          jsr       _DumpRegisters
00002292  6000 018E 3702          bra       menu_46
                    3703   menu_20:
                    3704   ; else if( c == (char)('.'))           // change registers
00002296  0C02 002E 3705          cmp.b     #46,D2
0000229A  6608      3706          bne.s     menu_22
                    3707   ; ChangeRegisters() ;
0000229C  4EB8 1610 3708          jsr       _ChangeRegisters
000022A0  6000 0180 3709          bra       menu_46
                    3710   menu_22:
                    3711   ; else if( c == (char)('B'))              // breakpoint command
000022A4  0C02 0042 3712          cmp.b     #66,D2
000022A8  6608      3713          bne.s     menu_24
                    3714   ; Breakpoint() ;
000022AA  4EB8 1FE4 3715          jsr       _Breakpoint
000022AE  6000 0172 3716          bra       menu_46
                    3717   menu_24:
                    3718   ; else if( c == (char)('T'))  {          // Test command
000022B2  0C02 0054 3719          cmp.b     #84,D2
000022B6  6600 0046 3720          bne       menu_26
                    3721   ; c1 = toupper(_getch()) ;
000022BA  2F00      3722          move.l    D0,-(A7)
000022BC  4EB8 0BB0 3723          jsr       __getch
000022C0  2200      3724          move.l    D0,D1
000022C2  201F      3725          move.l    (A7)+,D0
000022C4  2F01      3726          move.l    D1,-(A7)
000022C6  4EB9 0000 3727          jsr       _toupper
000022CA  35EC      
000022CC  584F      3728          addq.w    #4,A7
000022CE  1600      3729          move.b    D0,D3
                    3730   ; if(c1 == (char)('M'))                    // memory test
000022D0  0C03 004D 3731          cmp.b     #77,D3
000022D4  6608      3732          bne.s     menu_28
                    3733   ; MemoryTest() ;
000022D6  4EB9 0000 3734          jsr       _MemoryTest
000022DA  25BA      
000022DC  601C      3735          bra.s     menu_33
                    3736   menu_28:
                    3737   ; else if( c1 == (char)('S'))              // Switch Test command
000022DE  0C03 0053 3738          cmp.b     #83,D3
000022E2  6606      3739          bne.s     menu_30
                    3740   ; SwitchTest() ;
000022E4  4EB8 0AEC 3741          jsr       _SwitchTest
000022E8  6010      3742          bra.s     menu_33
                    3743   menu_30:
                    3744   ; else if( c1 == (char)('D'))              // display Test command
000022EA  0C03 0044 3745          cmp.b     #68,D3
000022EE  6606      3746          bne.s     menu_32
                    3747   ; TestLEDS() ;
000022F0  4EB8 0A98 3748          jsr       _TestLEDS
000022F4  6004      3749          bra.s     menu_33
                    3750   menu_32:
                    3751   ; else
                    3752   ; UnknownCommand() ;
000022F6  4EB8 1FB8 3753          jsr       _UnknownCommand
                    3754   menu_33:
000022FA  6000 0126 3755          bra       menu_46
                    3756   menu_26:
                    3757   ; }
                    3758   ; else if( c == (char)(' ')) {             // Next instruction command
000022FE  0C02 0020 3759          cmp.b     #32,D2
00002302  6636      3760          bne.s     menu_34
                    3761   ; DisableBreakPoints() ;
00002304  4EB8 1BC8 3762          jsr       _DisableBreakPoints
                    3763   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002308  2013      3764          move.l    (A3),D0
0000230A  0C80 0000 3765          cmp.l     #1,D0
0000230E  0001      
00002310  661A      3766          bne.s     menu_36
00002312  2039 0803 3767          move.l    _GoFlag.L,D0
00002316  00DC      
00002318  0C80 0000 3768          cmp.l     #1,D0
0000231C  0001      
0000231E  660C      3769          bne.s     menu_36
                    3770   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002320  13FC 0001 3771          move.b    #1,4194314
00002324  0040 000A 
                    3772   ; return ;
00002328  6000 00FC 3773          bra       menu_38
                    3774   menu_36:
                    3775   ; }
                    3776   ; else
                    3777   ; printf("\r\nError: Press 'G' first to start program") ;
0000232C  4879 0000 3778          pea       @final_~1_110.L
00002330  4BBE      
00002332  4E92      3779          jsr       (A2)
00002334  584F      3780          addq.w    #4,A7
00002336  6000 00EA 3781          bra       menu_46
                    3782   menu_34:
                    3783   ; }
                    3784   ; else if( c == (char)('S')) {             // single step
0000233A  0C02 0053 3785          cmp.b     #83,D2
0000233E  6600 008C 3786          bne       menu_39
                    3787   ; if(Trace == 0) {
00002342  2013      3788          move.l    (A3),D0
00002344  6600 0050 3789          bne       menu_41
                    3790   ; DisableBreakPoints() ;
00002348  4EB8 1BC8 3791          jsr       _DisableBreakPoints
                    3792   ; printf("\r\nSingle Step  :[ON]") ;
0000234C  4879 0000 3793          pea       @final_~1_111.L
00002350  4BE8      
00002352  4E92      3794          jsr       (A2)
00002354  584F      3795          addq.w    #4,A7
                    3796   ; printf("\r\nBreak Points :[Disabled]") ;
00002356  4879 0000 3797          pea       @final_~1_44.L
0000235A  4286      
0000235C  4E92      3798          jsr       (A2)
0000235E  584F      3799          addq.w    #4,A7
                    3800   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002360  0055 8000 3801          or.w      #32768,(A5)
                    3802   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002364  2F39 0803 3803          move.l    _PC.L,-(A7)
00002368  0120      
0000236A  4879 0000 3804          pea       @final_~1_112.L
0000236E  4BFE      
00002370  4E92      3805          jsr       (A2)
00002372  504F      3806          addq.w    #8,A7
                    3807   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002374  4879 0000 3808          pea       @final_~1_113.L
00002378  4C32      
0000237A  4E92      3809          jsr       (A2)
0000237C  584F      3810          addq.w    #4,A7
                    3811   ; DumpRegisters() ;
0000237E  4EB8 111E 3812          jsr       _DumpRegisters
                    3813   ; Trace = 1;
00002382  26BC 0000 3814          move.l    #1,(A3)
00002386  0001      
                    3815   ; TraceException = 1;
00002388  13FC 0001 3816          move.b    #1,4194314
0000238C  0040 000A 
                    3817   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002390  28B8 0074 3818          move.l    116,(A4)
00002394  6032      3819          bra.s     menu_42
                    3820   menu_41:
                    3821   ; }
                    3822   ; else {
                    3823   ; Trace = 0 ;
00002396  4293      3824          clr.l     (A3)
                    3825   ; TraceException = 0 ;
00002398  4239 0040 3826          clr.b     4194314
0000239C  000A      
                    3827   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000239E  28B8 0074 3828          move.l    116,(A4)
                    3829   ; EnableBreakPoints() ;
000023A2  4EB8 1C1C 3830          jsr       _EnableBreakPoints
                    3831   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000023A6  0255 7FFF 3832          and.w     #32767,(A5)
                    3833   ; printf("\r\nSingle Step : [OFF]") ;
000023AA  4879 0000 3834          pea       @final_~1_114.L
000023AE  4C56      
000023B0  4E92      3835          jsr       (A2)
000023B2  584F      3836          addq.w    #4,A7
                    3837   ; printf("\r\nBreak Points :[Enabled]") ;
000023B4  4879 0000 3838          pea       @final_~1_115.L
000023B8  4C6C      
000023BA  4E92      3839          jsr       (A2)
000023BC  584F      3840          addq.w    #4,A7
                    3841   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000023BE  4879 0000 3842          pea       @final_~1_116.L
000023C2  4C86      
000023C4  4E92      3843          jsr       (A2)
000023C6  584F      3844          addq.w    #4,A7
                    3845   menu_42:
000023C8  6000 0058 3846          bra       menu_46
                    3847   menu_39:
                    3848   ; }
                    3849   ; }
                    3850   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000023CC  0C02 001B 3851          cmp.b     #27,D2
000023D0  6600 0040 3852          bne       menu_43
                    3853   ; Trace = 0;
000023D4  4293      3854          clr.l     (A3)
                    3855   ; TraceException = 0;
000023D6  4239 0040 3856          clr.b     4194314
000023DA  000A      
                    3857   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000023DC  28B8 0074 3858          move.l    116,(A4)
                    3859   ; EnableBreakPoints() ;
000023E0  4EB8 1C1C 3860          jsr       _EnableBreakPoints
                    3861   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000023E4  0255 7FFF 3862          and.w     #32767,(A5)
                    3863   ; printf("\r\nSingle Step  :[OFF]") ;
000023E8  4879 0000 3864          pea       @final_~1_117.L
000023EC  4CB0      
000023EE  4E92      3865          jsr       (A2)
000023F0  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\nBreak Points :[Enabled]");
000023F2  4879 0000 3868          pea       @final_~1_115.L
000023F6  4C6C      
000023F8  4E92      3869          jsr       (A2)
000023FA  584F      3870          addq.w    #4,A7
                    3871   ; printf("\r\nProgram Running.....") ;
000023FC  4879 0000 3872          pea       @final_~1_108.L
00002400  4B78      
00002402  4E92      3873          jsr       (A2)
00002404  584F      3874          addq.w    #4,A7
                    3875   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002406  4879 0000 3876          pea       @final_~1_109.L
0000240A  4B90      
0000240C  4E92      3877          jsr       (A2)
0000240E  584F      3878          addq.w    #4,A7
                    3879   ; return ;
00002410  6014      3880          bra.s     menu_38
                    3881   menu_43:
                    3882   ; }
                    3883   ; else if( c == (char)('W'))              // Watchpoint command
00002412  0C02 0057 3884          cmp.b     #87,D2
00002416  6606      3885          bne.s     menu_45
                    3886   ; Watchpoint() ;
00002418  4EB8 2060 3887          jsr       _Watchpoint
0000241C  6004      3888          bra.s     menu_46
                    3889   menu_45:
                    3890   ; else
                    3891   ; UnknownCommand() ;
0000241E  4EB8 1FB8 3892          jsr       _UnknownCommand
                    3893   menu_46:
00002422  6000 FDAE 3894          bra       menu_1
                    3895   menu_38:
00002426  4CDF 3C0C 3896          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000242A  4E75      3897          rts
                    3898   ; }
                    3899   ; }
                    3900   ; void PrintErrorMessageandAbort(char *string) {
                    3901   _PrintErrorMessageandAbort:
0000242C  4E56 0000 3902          link      A6,#0
                    3903   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002430  4879 0000 3904          pea       @final_~1_118.L
00002434  4CC6      
00002436  4EB9 0000 3905          jsr       _printf
0000243A  3618      
0000243C  584F      3906          addq.w    #4,A7
                    3907   ; printf("%s\r\n", string) ;
0000243E  2F2E 0008 3908          move.l    8(A6),-(A7)
00002442  4879 0000 3909          pea       @final_~1_119.L
00002446  4CE2      
00002448  4EB9 0000 3910          jsr       _printf
0000244C  3618      
0000244E  504F      3911          addq.w    #8,A7
                    3912   ; menu() ;
00002450  4EB8 21B6 3913          jsr       _menu
00002454  4E5E      3914          unlk      A6
00002456  4E75      3915          rts
                    3916   ; }
                    3917   ; void IRQMessage(int level) {
                    3918   _IRQMessage:
00002458  4E56 0000 3919          link      A6,#0
                    3920   ; printf("\r\n\r\nProgram ABORT !!!!!");
0000245C  4879 0000 3921          pea       @final_~1_120.L
00002460  4CE8      
00002462  4EB9 0000 3922          jsr       _printf
00002466  3618      
00002468  584F      3923          addq.w    #4,A7
                    3924   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000246A  2F2E 0008 3925          move.l    8(A6),-(A7)
0000246E  4879 0000 3926          pea       @final_~1_121.L
00002472  4D00      
00002474  4EB9 0000 3927          jsr       _printf
00002478  3618      
0000247A  504F      3928          addq.w    #8,A7
                    3929   ; menu() ;
0000247C  4EB8 21B6 3930          jsr       _menu
00002480  4E5E      3931          unlk      A6
00002482  4E75      3932          rts
                    3933   ; }
                    3934   ; void UnhandledIRQ1(void) {
                    3935   _UnhandledIRQ1:
                    3936   ; IRQMessage(1);
00002484  4878 0001 3937          pea       1
00002488  4EB8 2458 3938          jsr       _IRQMessage
0000248C  584F      3939          addq.w    #4,A7
0000248E  4E75      3940          rts
                    3941   ; }
                    3942   ; void UnhandledIRQ2(void) {
                    3943   _UnhandledIRQ2:
                    3944   ; IRQMessage(2);
00002490  4878 0002 3945          pea       2
00002494  4EB8 2458 3946          jsr       _IRQMessage
00002498  584F      3947          addq.w    #4,A7
0000249A  4E75      3948          rts
                    3949   ; }
                    3950   ; void UnhandledIRQ3(void){
                    3951   _UnhandledIRQ3:
                    3952   ; IRQMessage(3);
0000249C  4878 0003 3953          pea       3
000024A0  4EB8 2458 3954          jsr       _IRQMessage
000024A4  584F      3955          addq.w    #4,A7
000024A6  4E75      3956          rts
                    3957   ; }
                    3958   ; void UnhandledIRQ4(void) {
                    3959   _UnhandledIRQ4:
                    3960   ; IRQMessage(4);
000024A8  4878 0004 3961          pea       4
000024AC  4EB8 2458 3962          jsr       _IRQMessage
000024B0  584F      3963          addq.w    #4,A7
000024B2  4E75      3964          rts
                    3965   ; }
                    3966   ; void UnhandledIRQ5(void) {
                    3967   _UnhandledIRQ5:
                    3968   ; IRQMessage(5);
000024B4  4878 0005 3969          pea       5
000024B8  4EB8 2458 3970          jsr       _IRQMessage
000024BC  584F      3971          addq.w    #4,A7
000024BE  4E75      3972          rts
                    3973   ; }
                    3974   ; void UnhandledIRQ6(void) {
                    3975   _UnhandledIRQ6:
                    3976   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000024C0  4879 0000 3977          pea       @final_~1_122.L
000024C4  4D24      
000024C6  4EB8 242C 3978          jsr       _PrintErrorMessageandAbort
000024CA  584F      3979          addq.w    #4,A7
                    3980   ; menu() ;
000024CC  4EB8 21B6 3981          jsr       _menu
000024D0  4E75      3982          rts
                    3983   ; }
                    3984   ; void UnhandledIRQ7(void) {
                    3985   _UnhandledIRQ7:
                    3986   ; IRQMessage(7);
000024D2  4878 0007 3987          pea       7
000024D6  4EB8 2458 3988          jsr       _IRQMessage
000024DA  584F      3989          addq.w    #4,A7
000024DC  4E75      3990          rts
                    3991   ; }
                    3992   ; void UnhandledTrap(void) {
                    3993   _UnhandledTrap:
                    3994   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000024DE  4879 0000 3995          pea       @final_~1_123.L
000024E2  4D64      
000024E4  4EB8 242C 3996          jsr       _PrintErrorMessageandAbort
000024E8  584F      3997          addq.w    #4,A7
000024EA  4E75      3998          rts
                    3999   ; }
                    4000   ; void BusError() {
                    4001   _BusError:
                    4002   ; PrintErrorMessageandAbort("BUS Error!") ;
000024EC  4879 0000 4003          pea       @final_~1_124.L
000024F0  4D7A      
000024F2  4EB8 242C 4004          jsr       _PrintErrorMessageandAbort
000024F6  584F      4005          addq.w    #4,A7
000024F8  4E75      4006          rts
                    4007   ; }
                    4008   ; void AddressError() {
                    4009   _AddressError:
                    4010   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024FA  4879 0000 4011          pea       @final_~1_125.L
000024FE  4D86      
00002500  4EB8 242C 4012          jsr       _PrintErrorMessageandAbort
00002504  584F      4013          addq.w    #4,A7
00002506  4E75      4014          rts
                    4015   ; }
                    4016   ; void IllegalInstruction() {
                    4017   _IllegalInstruction:
                    4018   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002508  4879 0000 4019          pea       @final_~1_126.L
0000250C  4D96      
0000250E  4EB8 242C 4020          jsr       _PrintErrorMessageandAbort
00002512  584F      4021          addq.w    #4,A7
00002514  4E75      4022          rts
                    4023   ; }
                    4024   ; void Dividebyzero() {
                    4025   _Dividebyzero:
                    4026   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002516  4879 0000 4027          pea       @final_~1_127.L
0000251A  4DAA      
0000251C  4EB8 242C 4028          jsr       _PrintErrorMessageandAbort
00002520  584F      4029          addq.w    #4,A7
00002522  4E75      4030          rts
                    4031   ; }
                    4032   ; void Check() {
                    4033   _Check:
                    4034   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002524  4879 0000 4035          pea       @final_~1_128.L
00002528  4DBA      
0000252A  4EB8 242C 4036          jsr       _PrintErrorMessageandAbort
0000252E  584F      4037          addq.w    #4,A7
00002530  4E75      4038          rts
                    4039   ; }
                    4040   ; void Trapv() {
                    4041   _Trapv:
                    4042   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002532  4879 0000 4043          pea       @final_~1_129.L
00002536  4DCC      
00002538  4EB8 242C 4044          jsr       _PrintErrorMessageandAbort
0000253C  584F      4045          addq.w    #4,A7
0000253E  4E75      4046          rts
                    4047   ; }
                    4048   ; void PrivError() {
                    4049   _PrivError:
                    4050   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002540  4879 0000 4051          pea       @final_~1_130.L
00002544  4DDE      
00002546  4EB8 242C 4052          jsr       _PrintErrorMessageandAbort
0000254A  584F      4053          addq.w    #4,A7
0000254C  4E75      4054          rts
                    4055   ; }
                    4056   ; void UnitIRQ() {
                    4057   _UnitIRQ:
                    4058   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000254E  4879 0000 4059          pea       @final_~1_131.L
00002552  4DF2      
00002554  4EB8 242C 4060          jsr       _PrintErrorMessageandAbort
00002558  584F      4061          addq.w    #4,A7
0000255A  4E75      4062          rts
                    4063   ; }
                    4064   ; void Spurious() {
                    4065   _Spurious:
                    4066   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
0000255C  4879 0000 4067          pea       @final_~1_132.L
00002560  4E04      
00002562  4EB8 242C 4068          jsr       _PrintErrorMessageandAbort
00002566  584F      4069          addq.w    #4,A7
00002568  4E75      4070          rts
                    4071   ; }
                    4072   ; void EnterString(void)
                    4073   ; {
                    4074   _EnterString:
0000256A  4E56 FFFC 4075          link      A6,#-4
0000256E  2F02      4076          move.l    D2,-(A7)
                    4077   ; unsigned char *Start;
                    4078   ; unsigned char c;
                    4079   ; printf("\r\nStart Address in Memory: ") ;
00002570  4879 0000 4080          pea       @final_~1_133.L
00002574  4E12      
00002576  4EB9 0000 4081          jsr       _printf
0000257A  3618      
0000257C  584F      4082          addq.w    #4,A7
                    4083   ; Start = Get8HexDigits(0) ;
0000257E  42A7      4084          clr.l     -(A7)
00002580  4EB8 0CEC 4085          jsr       _Get8HexDigits
00002584  584F      4086          addq.w    #4,A7
00002586  2400      4087          move.l    D0,D2
                    4088   ; printf("\r\nEnter String (ESC to end) :") ;
00002588  4879 0000 4089          pea       @final_~1_134.L
0000258C  4E2E      
0000258E  4EB9 0000 4090          jsr       _printf
00002592  3618      
00002594  584F      4091          addq.w    #4,A7
                    4092   ; while((c = getchar()) != 0x1b)
                    4093   EnterString_1:
00002596  4EB9 0000 4094          jsr       _getch
0000259A  3522      
0000259C  1D40 FFFF 4095          move.b    D0,-1(A6)
000025A0  0C00 001B 4096          cmp.b     #27,D0
000025A4  670A      4097          beq.s     EnterString_3
                    4098   ; *Start++ = c ;
000025A6  2042      4099          move.l    D2,A0
000025A8  5282      4100          addq.l    #1,D2
000025AA  10AE FFFF 4101          move.b    -1(A6),(A0)
000025AE  60E6      4102          bra       EnterString_1
                    4103   EnterString_3:
                    4104   ; *Start = 0x00;  // terminate with a null
000025B0  2042      4105          move.l    D2,A0
000025B2  4210      4106          clr.b     (A0)
000025B4  241F      4107          move.l    (A7)+,D2
000025B6  4E5E      4108          unlk      A6
000025B8  4E75      4109          rts
                    4110   ; }
                    4111   ; void MemoryTest(void)
                    4112   ; {
                    4113   _MemoryTest:
000025BA  4E56 FFE8 4114          link      A6,#-24
                    4115   ; unsigned int *RamPtr, counter1=1 ;
000025BE  2D7C 0000 4116          move.l    #1,-18(A6)
000025C2  0001 FFEE 
                    4117   ; register unsigned int i ;
                    4118   ; unsigned int Start, End ;
                    4119   ; char c ;
                    4120   ; printf("\r\nStart Address: ") ;
000025C6  4879 0000 4121          pea       @final_~1_135.L
000025CA  4E4C      
000025CC  4EB9 0000 4122          jsr       _printf
000025D0  3618      
000025D2  584F      4123          addq.w    #4,A7
                    4124   ; Start = Get8HexDigits(0) ;
000025D4  42A7      4125          clr.l     -(A7)
000025D6  4EB8 0CEC 4126          jsr       _Get8HexDigits
000025DA  584F      4127          addq.w    #4,A7
000025DC  2D40 FFF6 4128          move.l    D0,-10(A6)
                    4129   ; printf("\r\nEnd Address: ") ;
000025E0  4879 0000 4130          pea       @final_~1_136.L
000025E4  4E5E      
000025E6  4EB9 0000 4131          jsr       _printf
000025EA  3618      
000025EC  584F      4132          addq.w    #4,A7
                    4133   ; End = Get8HexDigits(0) ;
000025EE  42A7      4134          clr.l     -(A7)
000025F0  4EB8 0CEC 4135          jsr       _Get8HexDigits
000025F4  584F      4136          addq.w    #4,A7
000025F6  2D40 FFFA 4137          move.l    D0,-6(A6)
000025FA  4E5E      4138          unlk      A6
000025FC  4E75      4139          rts
                    4140   ; // TODO
                    4141   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4142   ; }
                    4143   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4144   ; //
                    4145   ; //
                    4146   ; //                        functions to implement
                    4147   ; //
                    4148   ; //
                    4149   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4150   ; /**********************************************************************************/
                    4151   ; //SNAKE GAME STUFF
                    4152   ; /**********************************************************************************/
                    4153   ; void putcharxy(int x, int y, char ch) {
                    4154   _putcharxy:
000025FE  4E56 FFF8 4155          link      A6,#-8
                    4156   ; int cursor = x+(80*y);
00002602  202E 0008 4157          move.l    8(A6),D0
00002606  2F2E 000C 4158          move.l    12(A6),-(A7)
0000260A  4878 0050 4159          pea       80
0000260E  4EB9 0000 4160          jsr       LMUL
00002612  3452      
00002614  2217      4161          move.l    (A7),D1
00002616  504F      4162          addq.w    #8,A7
00002618  D081      4163          add.l     D1,D0
0000261A  2D40 FFF8 4164          move.l    D0,-8(A6)
                    4165   ; int addr = VGA_START + cursor;
0000261E  203C 0070 4166          move.l    #7340032,D0
00002622  0000      
00002624  D0AE FFF8 4167          add.l     -8(A6),D0
00002628  2D40 FFFC 4168          move.l    D0,-4(A6)
                    4169   ; memset(addr,ch,sizeof(char));
0000262C  4878 0001 4170          pea       1
00002630  122E 0013 4171          move.b    19(A6),D1
00002634  4881      4172          ext.w     D1
00002636  48C1      4173          ext.l     D1
00002638  2F01      4174          move.l    D1,-(A7)
0000263A  2F2E FFFC 4175          move.l    -4(A6),-(A7)
0000263E  4EB9 0000 4176          jsr       _memset
00002642  35BE      
00002644  DEFC 000C 4177          add.w     #12,A7
00002648  4E5E      4178          unlk      A6
0000264A  4E75      4179          rts
                    4180   ; }
                    4181   ; void print_at_xy(int x,int y, const char* str) {
                    4182   _print_at_xy:
0000264C  4E56 FFFC 4183          link      A6,#-4
00002650  48E7 3000 4184          movem.l   D2/D3,-(A7)
                    4185   ; //print a string on the VGA, starting at column x, line y.
                    4186   ; //Wrap around to the next line if we reach the edge of the screen
                    4187   ; int cursor = x+(80*y);
00002654  202E 0008 4188          move.l    8(A6),D0
00002658  2F2E 000C 4189          move.l    12(A6),-(A7)
0000265C  4878 0050 4190          pea       80
00002660  4EB9 0000 4191          jsr       LMUL
00002664  3452      
00002666  2217      4192          move.l    (A7),D1
00002668  504F      4193          addq.w    #8,A7
0000266A  D081      4194          add.l     D1,D0
0000266C  2D40 FFFC 4195          move.l    D0,-4(A6)
                    4196   ; int addr = VGA_START + cursor;
00002670  203C 0070 4197          move.l    #7340032,D0
00002674  0000      
00002676  D0AE FFFC 4198          add.l     -4(A6),D0
0000267A  2600      4199          move.l    D0,D3
                    4200   ; int i;
                    4201   ; //int i;
                    4202   ; //int length = strlen(str);
                    4203   ; //printf(length);
                    4204   ; for (i = 0; i<strlen(str); i++) {
0000267C  4282      4205          clr.l     D2
                    4206   print_at_xy_1:
0000267E  2F2E 0010 4207          move.l    16(A6),-(A7)
00002682  4EB9 0000 4208          jsr       _strlen
00002686  34E0      
00002688  584F      4209          addq.w    #4,A7
0000268A  B480      4210          cmp.l     D0,D2
0000268C  6C24      4211          bge.s     print_at_xy_3
                    4212   ; memset(addr, str[i], sizeof(char));
0000268E  4878 0001 4213          pea       1
00002692  206E 0010 4214          move.l    16(A6),A0
00002696  1230 2800 4215          move.b    0(A0,D2.L),D1
0000269A  4881      4216          ext.w     D1
0000269C  48C1      4217          ext.l     D1
0000269E  2F01      4218          move.l    D1,-(A7)
000026A0  2F03      4219          move.l    D3,-(A7)
000026A2  4EB9 0000 4220          jsr       _memset
000026A6  35BE      
000026A8  DEFC 000C 4221          add.w     #12,A7
                    4222   ; addr++;
000026AC  5283      4223          addq.l    #1,D3
000026AE  5282      4224          addq.l    #1,D2
000026B0  60CC      4225          bra       print_at_xy_1
                    4226   print_at_xy_3:
000026B2  4CDF 000C 4227          movem.l   (A7)+,D2/D3
000026B6  4E5E      4228          unlk      A6
000026B8  4E75      4229          rts
                    4230   ; }
                    4231   ; }
                    4232   ; void cls()
                    4233   ; {
                    4234   _cls:
                    4235   ; memset(0x00700000,' ',3200);
000026BA  4878 0C80 4236          pea       3200
000026BE  4878 0020 4237          pea       32
000026C2  4879 0070 4238          pea       7340032
000026C6  0000      
000026C8  4EB9 0000 4239          jsr       _memset
000026CC  35BE      
000026CE  DEFC 000C 4240          add.w     #12,A7
000026D2  4E75      4241          rts
                    4242   ; }
                    4243   ; void gotoxy(int x, int y)
                    4244   ; {
                    4245   _gotoxy:
000026D4  4E56 0000 4246          link      A6,#0
                    4247   ; //move the cursor to location column = x, row = y
                    4248   ; VGA_CRX = x;
000026D8  202E 0008 4249          move.l    8(A6),D0
000026DC  13C0 0070 4250          move.b    D0,7343874
000026E0  0F02      
                    4251   ; VGA_CRY = y;
000026E2  202E 000C 4252          move.l    12(A6),D0
000026E6  13C0 0070 4253          move.b    D0,7343876
000026EA  0F04      
000026EC  4E5E      4254          unlk      A6
000026EE  4E75      4255          rts
                    4256   ; }
                    4257   ; void set_vga_control_reg(char x) {
                    4258   _set_vga_control_reg:
000026F0  4E56 0000 4259          link      A6,#0
                    4260   ; VGA_CTL = x;
000026F4  13EE 000B 4261          move.b    11(A6),7343872
000026F8  0070 0F00 
000026FC  4E5E      4262          unlk      A6
000026FE  4E75      4263          rts
                    4264   ; }
                    4265   ; char get_vga_control_reg() {
                    4266   _get_vga_control_reg:
                    4267   ; //return the VGA control (OCTL) value
                    4268   ; return VGA_CTL;
00002700  1039 0070 4269          move.b    7343872,D0
00002704  0F00      
00002706  4E75      4270          rts
                    4271   ; }
                    4272   ; int clock() {
                    4273   _clock:
                    4274   ; //return the current value of a milliseconds counter, with a resolution of 10ms or better
                    4275   ; if(Timer8Status == 1) {
00002708  1039 0040 4276          move.b    4194622,D0
0000270C  013E      
0000270E  0C00 0001 4277          cmp.b     #1,D0
00002712  6612      4278          bne.s     clock_1
                    4279   ; Timer8Control = 3;
00002714  13FC 0003 4280          move.b    #3,4194622
00002718  0040 013E 
                    4281   ; Timer8Count += 10;
0000271C  06B9 0000 4282          add.l     #10,_Timer8Count.L
00002720  000A 0803 
00002724  0546      
                    4283   clock_1:
                    4284   ; }
                    4285   ; return Timer8Count;
00002726  2039 0803 4286          move.l    _Timer8Count.L,D0
0000272A  0546      
0000272C  4E75      4287          rts
                    4288   ; }
                    4289   ; void delay_ms(int num_ms) {
                    4290   _delay_ms:
0000272E  4E56 FFFC 4291          link      A6,#-4
                    4292   ; //delay a certain number of milliseconds
                    4293   ; int i = clock();
00002732  4EB8 2708 4294          jsr       _clock
00002736  2D40 FFFC 4295          move.l    D0,-4(A6)
                    4296   ; while(clock() - i <num_ms);
                    4297   delay_ms_1:
0000273A  4EB8 2708 4298          jsr       _clock
0000273E  90AE FFFC 4299          sub.l     -4(A6),D0
00002742  B0AE 0008 4300          cmp.l     8(A6),D0
00002746  6C02      4301          bge.s     delay_ms_3
00002748  60F0      4302          bra       delay_ms_1
                    4303   delay_ms_3:
0000274A  4E5E      4304          unlk      A6
0000274C  4E75      4305          rts
                    4306   ; }
                    4307   ; void gameOver()
                    4308   ; {
                    4309   _gameOver:
0000274E  4E56 FFFC 4310          link      A6,#-4
00002752  48E7 003C 4311          movem.l   A2/A3/A4/A5,-(A7)
00002756  45F8 095E 4312          lea       _Wait100ms.L,A2
0000275A  47F8 25FE 4313          lea       _putcharxy.L,A3
0000275E  49F8 26D4 4314          lea       _gotoxy.L,A4
00002762  4BF8 26F0 4315          lea       _set_vga_control_reg.L,A5
                    4316   ; //show game over screen and animation
                    4317   ; char ch[2];
                    4318   ; sprintf(ch,"%d", score);
00002766  2F39 0803 4319          move.l    _score.L,-(A7)
0000276A  054A      
0000276C  4879 0000 4320          pea       @final_~1_137.L
00002770  4E6E      
00002772  486E FFFE 4321          pea       -2(A6)
00002776  4EB9 0000 4322          jsr       _sprintf
0000277A  358A      
0000277C  DEFC 000C 4323          add.w     #12,A7
                    4324   ; cls();
00002780  4EB8 26BA 4325          jsr       _cls
                    4326   ; set_vga_control_reg(0xf5);
00002784  4878 00F5 4327          pea       245
00002788  4E95      4328          jsr       (A5)
0000278A  584F      4329          addq.w    #4,A7
                    4330   ; putcharxy(37, 20, 'G');
0000278C  4878 0047 4331          pea       71
00002790  4878 0014 4332          pea       20
00002794  4878 0025 4333          pea       37
00002798  4E93      4334          jsr       (A3)
0000279A  DEFC 000C 4335          add.w     #12,A7
                    4336   ; gotoxy(38,20);
0000279E  4878 0014 4337          pea       20
000027A2  4878 0026 4338          pea       38
000027A6  4E94      4339          jsr       (A4)
000027A8  504F      4340          addq.w    #8,A7
                    4341   ; Wait100ms();
000027AA  4E92      4342          jsr       (A2)
                    4343   ; putcharxy(38, 20, 'A');
000027AC  4878 0041 4344          pea       65
000027B0  4878 0014 4345          pea       20
000027B4  4878 0026 4346          pea       38
000027B8  4E93      4347          jsr       (A3)
000027BA  DEFC 000C 4348          add.w     #12,A7
                    4349   ; gotoxy(39,20);
000027BE  4878 0014 4350          pea       20
000027C2  4878 0027 4351          pea       39
000027C6  4E94      4352          jsr       (A4)
000027C8  504F      4353          addq.w    #8,A7
                    4354   ; Wait100ms();
000027CA  4E92      4355          jsr       (A2)
                    4356   ; putcharxy(39, 20, 'M');
000027CC  4878 004D 4357          pea       77
000027D0  4878 0014 4358          pea       20
000027D4  4878 0027 4359          pea       39
000027D8  4E93      4360          jsr       (A3)
000027DA  DEFC 000C 4361          add.w     #12,A7
                    4362   ; gotoxy(40,20);
000027DE  4878 0014 4363          pea       20
000027E2  4878 0028 4364          pea       40
000027E6  4E94      4365          jsr       (A4)
000027E8  504F      4366          addq.w    #8,A7
                    4367   ; Wait100ms();
000027EA  4E92      4368          jsr       (A2)
                    4369   ; putcharxy(40, 20, 'E');
000027EC  4878 0045 4370          pea       69
000027F0  4878 0014 4371          pea       20
000027F4  4878 0028 4372          pea       40
000027F8  4E93      4373          jsr       (A3)
000027FA  DEFC 000C 4374          add.w     #12,A7
                    4375   ; gotoxy(41,20);
000027FE  4878 0014 4376          pea       20
00002802  4878 0029 4377          pea       41
00002806  4E94      4378          jsr       (A4)
00002808  504F      4379          addq.w    #8,A7
                    4380   ; Wait100ms();
0000280A  4E92      4381          jsr       (A2)
                    4382   ; putcharxy(41, 20, ' ');
0000280C  4878 0020 4383          pea       32
00002810  4878 0014 4384          pea       20
00002814  4878 0029 4385          pea       41
00002818  4E93      4386          jsr       (A3)
0000281A  DEFC 000C 4387          add.w     #12,A7
                    4388   ; gotoxy(42,20);
0000281E  4878 0014 4389          pea       20
00002822  4878 002A 4390          pea       42
00002826  4E94      4391          jsr       (A4)
00002828  504F      4392          addq.w    #8,A7
                    4393   ; Wait100ms();
0000282A  4E92      4394          jsr       (A2)
                    4395   ; putcharxy(42, 20, 'O');
0000282C  4878 004F 4396          pea       79
00002830  4878 0014 4397          pea       20
00002834  4878 002A 4398          pea       42
00002838  4E93      4399          jsr       (A3)
0000283A  DEFC 000C 4400          add.w     #12,A7
                    4401   ; gotoxy(43,20);
0000283E  4878 0014 4402          pea       20
00002842  4878 002B 4403          pea       43
00002846  4E94      4404          jsr       (A4)
00002848  504F      4405          addq.w    #8,A7
                    4406   ; Wait100ms();
0000284A  4E92      4407          jsr       (A2)
                    4408   ; putcharxy(43, 20, 'V');
0000284C  4878 0056 4409          pea       86
00002850  4878 0014 4410          pea       20
00002854  4878 002B 4411          pea       43
00002858  4E93      4412          jsr       (A3)
0000285A  DEFC 000C 4413          add.w     #12,A7
                    4414   ; gotoxy(44,20);
0000285E  4878 0014 4415          pea       20
00002862  4878 002C 4416          pea       44
00002866  4E94      4417          jsr       (A4)
00002868  504F      4418          addq.w    #8,A7
                    4419   ; Wait100ms();
0000286A  4E92      4420          jsr       (A2)
                    4421   ; putcharxy(44, 20, 'E');
0000286C  4878 0045 4422          pea       69
00002870  4878 0014 4423          pea       20
00002874  4878 002C 4424          pea       44
00002878  4E93      4425          jsr       (A3)
0000287A  DEFC 000C 4426          add.w     #12,A7
                    4427   ; gotoxy(45,20);
0000287E  4878 0014 4428          pea       20
00002882  4878 002D 4429          pea       45
00002886  4E94      4430          jsr       (A4)
00002888  504F      4431          addq.w    #8,A7
                    4432   ; Wait100ms();
0000288A  4E92      4433          jsr       (A2)
                    4434   ; putcharxy(45, 20, 'R');
0000288C  4878 0052 4435          pea       82
00002890  4878 0014 4436          pea       20
00002894  4878 002D 4437          pea       45
00002898  4E93      4438          jsr       (A3)
0000289A  DEFC 000C 4439          add.w     #12,A7
                    4440   ; gotoxy(46,20);
0000289E  4878 0014 4441          pea       20
000028A2  4878 002E 4442          pea       46
000028A6  4E94      4443          jsr       (A4)
000028A8  504F      4444          addq.w    #8,A7
                    4445   ; Wait100ms();
000028AA  4E92      4446          jsr       (A2)
                    4447   ; putcharxy(46, 20, '!');
000028AC  4878 0021 4448          pea       33
000028B0  4878 0014 4449          pea       20
000028B4  4878 002E 4450          pea       46
000028B8  4E93      4451          jsr       (A3)
000028BA  DEFC 000C 4452          add.w     #12,A7
                    4453   ; Wait100ms();
000028BE  4E92      4454          jsr       (A2)
                    4455   ; //
                    4456   ; putcharxy(37, 21, 'S');
000028C0  4878 0053 4457          pea       83
000028C4  4878 0015 4458          pea       21
000028C8  4878 0025 4459          pea       37
000028CC  4E93      4460          jsr       (A3)
000028CE  DEFC 000C 4461          add.w     #12,A7
                    4462   ; gotoxy(38,21);
000028D2  4878 0015 4463          pea       21
000028D6  4878 0026 4464          pea       38
000028DA  4E94      4465          jsr       (A4)
000028DC  504F      4466          addq.w    #8,A7
                    4467   ; Wait100ms();
000028DE  4E92      4468          jsr       (A2)
                    4469   ; putcharxy(38, 21, 'C');
000028E0  4878 0043 4470          pea       67
000028E4  4878 0015 4471          pea       21
000028E8  4878 0026 4472          pea       38
000028EC  4E93      4473          jsr       (A3)
000028EE  DEFC 000C 4474          add.w     #12,A7
                    4475   ; gotoxy(39,21);
000028F2  4878 0015 4476          pea       21
000028F6  4878 0027 4477          pea       39
000028FA  4E94      4478          jsr       (A4)
000028FC  504F      4479          addq.w    #8,A7
                    4480   ; Wait100ms();
000028FE  4E92      4481          jsr       (A2)
                    4482   ; putcharxy(39, 21, 'O');
00002900  4878 004F 4483          pea       79
00002904  4878 0015 4484          pea       21
00002908  4878 0027 4485          pea       39
0000290C  4E93      4486          jsr       (A3)
0000290E  DEFC 000C 4487          add.w     #12,A7
                    4488   ; gotoxy(40,21);
00002912  4878 0015 4489          pea       21
00002916  4878 0028 4490          pea       40
0000291A  4E94      4491          jsr       (A4)
0000291C  504F      4492          addq.w    #8,A7
                    4493   ; Wait100ms();
0000291E  4E92      4494          jsr       (A2)
                    4495   ; putcharxy(40, 21, 'R');
00002920  4878 0052 4496          pea       82
00002924  4878 0015 4497          pea       21
00002928  4878 0028 4498          pea       40
0000292C  4E93      4499          jsr       (A3)
0000292E  DEFC 000C 4500          add.w     #12,A7
                    4501   ; gotoxy(41,21);
00002932  4878 0015 4502          pea       21
00002936  4878 0029 4503          pea       41
0000293A  4E94      4504          jsr       (A4)
0000293C  504F      4505          addq.w    #8,A7
                    4506   ; Wait100ms();
0000293E  4E92      4507          jsr       (A2)
                    4508   ; putcharxy(41, 21, 'E');
00002940  4878 0045 4509          pea       69
00002944  4878 0015 4510          pea       21
00002948  4878 0029 4511          pea       41
0000294C  4E93      4512          jsr       (A3)
0000294E  DEFC 000C 4513          add.w     #12,A7
                    4514   ; gotoxy(42,21);
00002952  4878 0015 4515          pea       21
00002956  4878 002A 4516          pea       42
0000295A  4E94      4517          jsr       (A4)
0000295C  504F      4518          addq.w    #8,A7
                    4519   ; Wait100ms();
0000295E  4E92      4520          jsr       (A2)
                    4521   ; putcharxy(42, 21, ':');
00002960  4878 003A 4522          pea       58
00002964  4878 0015 4523          pea       21
00002968  4878 002A 4524          pea       42
0000296C  4E93      4525          jsr       (A3)
0000296E  DEFC 000C 4526          add.w     #12,A7
                    4527   ; gotoxy(43,21);
00002972  4878 0015 4528          pea       21
00002976  4878 002B 4529          pea       43
0000297A  4E94      4530          jsr       (A4)
0000297C  504F      4531          addq.w    #8,A7
                    4532   ; Wait100ms();
0000297E  4E92      4533          jsr       (A2)
                    4534   ; putcharxy(43, 21, ' ');
00002980  4878 0020 4535          pea       32
00002984  4878 0015 4536          pea       21
00002988  4878 002B 4537          pea       43
0000298C  4E93      4538          jsr       (A3)
0000298E  DEFC 000C 4539          add.w     #12,A7
                    4540   ; gotoxy(44,21);
00002992  4878 0015 4541          pea       21
00002996  4878 002C 4542          pea       44
0000299A  4E94      4543          jsr       (A4)
0000299C  504F      4544          addq.w    #8,A7
                    4545   ; Wait100ms();
0000299E  4E92      4546          jsr       (A2)
                    4547   ; //updateScore();
                    4548   ; if(score >= 10){
000029A0  2039 0803 4549          move.l    _score.L,D0
000029A4  054A      
000029A6  0C80 0000 4550          cmp.l     #10,D0
000029AA  000A      
000029AC  6D00 0050 4551          blt       gameOver_1
                    4552   ; putcharxy(44, 21, ch[0]);
000029B0  122E FFFE 4553          move.b    -2+0(A6),D1
000029B4  4881      4554          ext.w     D1
000029B6  48C1      4555          ext.l     D1
000029B8  2F01      4556          move.l    D1,-(A7)
000029BA  4878 0015 4557          pea       21
000029BE  4878 002C 4558          pea       44
000029C2  4E93      4559          jsr       (A3)
000029C4  DEFC 000C 4560          add.w     #12,A7
                    4561   ; gotoxy(45,21);
000029C8  4878 0015 4562          pea       21
000029CC  4878 002D 4563          pea       45
000029D0  4E94      4564          jsr       (A4)
000029D2  504F      4565          addq.w    #8,A7
                    4566   ; //updateScore();
                    4567   ; Wait100ms();
000029D4  4E92      4568          jsr       (A2)
                    4569   ; putcharxy(45, 21, ch[1]);
000029D6  122E FFFF 4570          move.b    -2+1(A6),D1
000029DA  4881      4571          ext.w     D1
000029DC  48C1      4572          ext.l     D1
000029DE  2F01      4573          move.l    D1,-(A7)
000029E0  4878 0015 4574          pea       21
000029E4  4878 002D 4575          pea       45
000029E8  4E93      4576          jsr       (A3)
000029EA  DEFC 000C 4577          add.w     #12,A7
                    4578   ; gotoxy(47,21);
000029EE  4878 0015 4579          pea       21
000029F2  4878 002F 4580          pea       47
000029F6  4E94      4581          jsr       (A4)
000029F8  504F      4582          addq.w    #8,A7
                    4583   ; Wait100ms();
000029FA  4E92      4584          jsr       (A2)
000029FC  6026      4585          bra.s     gameOver_2
                    4586   gameOver_1:
                    4587   ; }
                    4588   ; else{
                    4589   ; putcharxy(44, 21, ch[0]);
000029FE  122E FFFE 4590          move.b    -2+0(A6),D1
00002A02  4881      4591          ext.w     D1
00002A04  48C1      4592          ext.l     D1
00002A06  2F01      4593          move.l    D1,-(A7)
00002A08  4878 0015 4594          pea       21
00002A0C  4878 002C 4595          pea       44
00002A10  4E93      4596          jsr       (A3)
00002A12  DEFC 000C 4597          add.w     #12,A7
                    4598   ; gotoxy(46,21);
00002A16  4878 0015 4599          pea       21
00002A1A  4878 002E 4600          pea       46
00002A1E  4E94      4601          jsr       (A4)
00002A20  504F      4602          addq.w    #8,A7
                    4603   ; Wait100ms();
00002A22  4E92      4604          jsr       (A2)
                    4605   gameOver_2:
                    4606   ; }
                    4607   ; set_vga_control_reg(0xe3);
00002A24  4878 00E3 4608          pea       227
00002A28  4E95      4609          jsr       (A5)
00002A2A  584F      4610          addq.w    #4,A7
                    4611   ; while(1){
                    4612   gameOver_3:
                    4613   ; Wait300ms();
00002A2C  4EB8 0976 4614          jsr       _Wait300ms
                    4615   ; set_vga_control_reg(0xe1);
00002A30  4878 00E1 4616          pea       225
00002A34  4E95      4617          jsr       (A5)
00002A36  584F      4618          addq.w    #4,A7
                    4619   ; Wait300ms();
00002A38  4EB8 0976 4620          jsr       _Wait300ms
                    4621   ; set_vga_control_reg(0xe2);
00002A3C  4878 00E2 4622          pea       226
00002A40  4E95      4623          jsr       (A5)
00002A42  584F      4624          addq.w    #4,A7
                    4625   ; Wait300ms();
00002A44  4EB8 0976 4626          jsr       _Wait300ms
                    4627   ; set_vga_control_reg(0xe3);
00002A48  4878 00E3 4628          pea       227
00002A4C  4E95      4629          jsr       (A5)
00002A4E  584F      4630          addq.w    #4,A7
                    4631   ; Wait300ms();
00002A50  4EB8 0976 4632          jsr       _Wait300ms
                    4633   ; set_vga_control_reg(0xe4);
00002A54  4878 00E4 4634          pea       228
00002A58  4E95      4635          jsr       (A5)
00002A5A  584F      4636          addq.w    #4,A7
                    4637   ; Wait300ms();
00002A5C  4EB8 0976 4638          jsr       _Wait300ms
                    4639   ; set_vga_control_reg(0xe5);
00002A60  4878 00E5 4640          pea       229
00002A64  4E95      4641          jsr       (A5)
00002A66  584F      4642          addq.w    #4,A7
                    4643   ; Wait300ms();
00002A68  4EB8 0976 4644          jsr       _Wait300ms
                    4645   ; set_vga_control_reg(0xe6);
00002A6C  4878 00E6 4646          pea       230
00002A70  4E95      4647          jsr       (A5)
00002A72  584F      4648          addq.w    #4,A7
                    4649   ; Wait300ms();
00002A74  4EB8 0976 4650          jsr       _Wait300ms
                    4651   ; set_vga_control_reg(0xe7);
00002A78  4878 00E7 4652          pea       231
00002A7C  4E95      4653          jsr       (A5)
00002A7E  584F      4654          addq.w    #4,A7
00002A80  60AA      4655          bra       gameOver_3
                    4656   ; }
                    4657   ; }
                    4658   ; void updateScore()
                    4659   ; {
                    4660   _updateScore:
00002A82  4E56 FFF8 4661          link      A6,#-8
00002A86  48E7 0030 4662          movem.l   A2/A3,-(A7)
00002A8A  45EE FFFA 4663          lea       -6(A6),A2
00002A8E  47F8 25FE 4664          lea       _putcharxy.L,A3
                    4665   ; //print the score at the bottom of the screen
                    4666   ; char ch[2];
                    4667   ; const char* score_string = "Score:";
00002A92  41F9 0000 4668          lea       @final_~1_138.L,A0
00002A96  4E72      
00002A98  2D48 FFFC 4669          move.l    A0,-4(A6)
                    4670   ; sprintf(ch,"%d", score);
00002A9C  2F39 0803 4671          move.l    _score.L,-(A7)
00002AA0  054A      
00002AA2  4879 0000 4672          pea       @final_~1_137.L
00002AA6  4E6E      
00002AA8  2F0A      4673          move.l    A2,-(A7)
00002AAA  4EB9 0000 4674          jsr       _sprintf
00002AAE  358A      
00002AB0  DEFC 000C 4675          add.w     #12,A7
                    4676   ; print_at_xy(0,39, score_string);
00002AB4  2F2E FFFC 4677          move.l    -4(A6),-(A7)
00002AB8  4878 0027 4678          pea       39
00002ABC  42A7      4679          clr.l     -(A7)
00002ABE  4EB8 264C 4680          jsr       _print_at_xy
00002AC2  DEFC 000C 4681          add.w     #12,A7
                    4682   ; if(score >= 10){
00002AC6  2039 0803 4683          move.l    _score.L,D0
00002ACA  054A      
00002ACC  0C80 0000 4684          cmp.l     #10,D0
00002AD0  000A      
00002AD2  6D00 0032 4685          blt       updateScore_1
                    4686   ; putcharxy(6, 39, ch[0]);
00002AD6  1212      4687          move.b    (A2),D1
00002AD8  4881      4688          ext.w     D1
00002ADA  48C1      4689          ext.l     D1
00002ADC  2F01      4690          move.l    D1,-(A7)
00002ADE  4878 0027 4691          pea       39
00002AE2  4878 0006 4692          pea       6
00002AE6  4E93      4693          jsr       (A3)
00002AE8  DEFC 000C 4694          add.w     #12,A7
                    4695   ; putcharxy(7, 39, ch[1]);
00002AEC  122A 0001 4696          move.b    1(A2),D1
00002AF0  4881      4697          ext.w     D1
00002AF2  48C1      4698          ext.l     D1
00002AF4  2F01      4699          move.l    D1,-(A7)
00002AF6  4878 0027 4700          pea       39
00002AFA  4878 0007 4701          pea       7
00002AFE  4E93      4702          jsr       (A3)
00002B00  DEFC 000C 4703          add.w     #12,A7
00002B04  6016      4704          bra.s     updateScore_2
                    4705   updateScore_1:
                    4706   ; }
                    4707   ; else{
                    4708   ; putcharxy(6, 39, ch[0]);
00002B06  1212      4709          move.b    (A2),D1
00002B08  4881      4710          ext.w     D1
00002B0A  48C1      4711          ext.l     D1
00002B0C  2F01      4712          move.l    D1,-(A7)
00002B0E  4878 0027 4713          pea       39
00002B12  4878 0006 4714          pea       6
00002B16  4E93      4715          jsr       (A3)
00002B18  DEFC 000C 4716          add.w     #12,A7
                    4717   updateScore_2:
00002B1C  4CDF 0C00 4718          movem.l   (A7)+,A2/A3
00002B20  4E5E      4719          unlk      A6
00002B22  4E75      4720          rts
                    4721   ; }
                    4722   ; }
                    4723   ; void drawRect(int x1, int y1, int x2, int y2, char ch)
                    4724   ; {
                    4725   _drawRect:
00002B24  4E56 FFFC 4726          link      A6,#-4
00002B28  48E7 3F20 4727          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00002B2C  262E 0008 4728          move.l    8(A6),D3
00002B30  282E 000C 4729          move.l    12(A6),D4
00002B34  1A2E 001B 4730          move.b    27(A6),D5
00002B38  4885      4731          ext.w     D5
00002B3A  48C5      4732          ext.l     D5
00002B3C  45F8 25FE 4733          lea       _putcharxy.L,A2
00002B40  2C2E 0014 4734          move.l    20(A6),D6
00002B44  2E2E 0010 4735          move.l    16(A6),D7
                    4736   ; //draws a rectangle. Left top corner: (x1,y1) length of sides = x2,y2
                    4737   ; int i,j;
                    4738   ; for (i=0; i< x2; i++){
00002B48  4282      4739          clr.l     D2
                    4740   drawRect_1:
00002B4A  B487      4741          cmp.l     D7,D2
00002B4C  6C18      4742          bge.s     drawRect_3
                    4743   ; putcharxy(x1+i,y1,ch);
00002B4E  4885      4744          ext.w     D5
00002B50  48C5      4745          ext.l     D5
00002B52  2F05      4746          move.l    D5,-(A7)
00002B54  2F04      4747          move.l    D4,-(A7)
00002B56  2203      4748          move.l    D3,D1
00002B58  D282      4749          add.l     D2,D1
00002B5A  2F01      4750          move.l    D1,-(A7)
00002B5C  4E92      4751          jsr       (A2)
00002B5E  DEFC 000C 4752          add.w     #12,A7
00002B62  5282      4753          addq.l    #1,D2
00002B64  60E4      4754          bra       drawRect_1
                    4755   drawRect_3:
                    4756   ; }
                    4757   ; for (i=0; i<y2; i++){
00002B66  4282      4758          clr.l     D2
                    4759   drawRect_4:
00002B68  B486      4760          cmp.l     D6,D2
00002B6A  6C18      4761          bge.s     drawRect_6
                    4762   ; putcharxy(x1,y1+i,ch);
00002B6C  4885      4763          ext.w     D5
00002B6E  48C5      4764          ext.l     D5
00002B70  2F05      4765          move.l    D5,-(A7)
00002B72  2204      4766          move.l    D4,D1
00002B74  D282      4767          add.l     D2,D1
00002B76  2F01      4768          move.l    D1,-(A7)
00002B78  2F03      4769          move.l    D3,-(A7)
00002B7A  4E92      4770          jsr       (A2)
00002B7C  DEFC 000C 4771          add.w     #12,A7
00002B80  5282      4772          addq.l    #1,D2
00002B82  60E4      4773          bra       drawRect_4
                    4774   drawRect_6:
                    4775   ; }
                    4776   ; for (i=0; i<x2; i++){
00002B84  4282      4777          clr.l     D2
                    4778   drawRect_7:
00002B86  B487      4779          cmp.l     D7,D2
00002B88  6C1E      4780          bge.s     drawRect_9
                    4781   ; putcharxy(x1+i,y1+y2-1,ch);
00002B8A  4885      4782          ext.w     D5
00002B8C  48C5      4783          ext.l     D5
00002B8E  2F05      4784          move.l    D5,-(A7)
00002B90  2204      4785          move.l    D4,D1
00002B92  D286      4786          add.l     D6,D1
00002B94  5381      4787          subq.l    #1,D1
00002B96  2F01      4788          move.l    D1,-(A7)
00002B98  2203      4789          move.l    D3,D1
00002B9A  D282      4790          add.l     D2,D1
00002B9C  2F01      4791          move.l    D1,-(A7)
00002B9E  4E92      4792          jsr       (A2)
00002BA0  DEFC 000C 4793          add.w     #12,A7
00002BA4  5282      4794          addq.l    #1,D2
00002BA6  60DE      4795          bra       drawRect_7
                    4796   drawRect_9:
                    4797   ; }
                    4798   ; for (i=0; i<y2; i++){
00002BA8  4282      4799          clr.l     D2
                    4800   drawRect_10:
00002BAA  B486      4801          cmp.l     D6,D2
00002BAC  6C1E      4802          bge.s     drawRect_12
                    4803   ; putcharxy(x1+x2-1,y1+i,ch);
00002BAE  4885      4804          ext.w     D5
00002BB0  48C5      4805          ext.l     D5
00002BB2  2F05      4806          move.l    D5,-(A7)
00002BB4  2204      4807          move.l    D4,D1
00002BB6  D282      4808          add.l     D2,D1
00002BB8  2F01      4809          move.l    D1,-(A7)
00002BBA  2203      4810          move.l    D3,D1
00002BBC  D287      4811          add.l     D7,D1
00002BBE  5381      4812          subq.l    #1,D1
00002BC0  2F01      4813          move.l    D1,-(A7)
00002BC2  4E92      4814          jsr       (A2)
00002BC4  DEFC 000C 4815          add.w     #12,A7
00002BC8  5282      4816          addq.l    #1,D2
00002BCA  60DE      4817          bra       drawRect_10
                    4818   drawRect_12:
00002BCC  4CDF 04FC 4819          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00002BD0  4E5E      4820          unlk      A6
00002BD2  4E75      4821          rts
                    4822   ; }
                    4823   ; }
                    4824   ; void initSnake()
                    4825   ; {
                    4826   _initSnake:
                    4827   ; VGA_CTL = 0xf2;
00002BD4  13FC 00F2 4828          move.b    #242,7343872
00002BD8  0070 0F00 
                    4829   ; Snake.speed          = INITIAL_SNAKE_SPEED ;
00002BDC  23FC 0000 4830          move.l    #2,_Snake+16390.L
00002BE0  0002 0803 
00002BE4  4558      
                    4831   ; Snake.speed_increase = SNAKE_SPEED_INCREASE;
00002BE6  23FC 0000 4832          move.l    #1,_Snake+16394.L
00002BEA  0001 0803 
00002BEE  455C      
00002BF0  4E75      4833          rts
                    4834   ; }
                    4835   ; void drawSnake()
                    4836   ; {
                    4837   _drawSnake:
00002BF2  48E7 2020 4838          movem.l   D2/A2,-(A7)
00002BF6  45F9 0803 4839          lea       _Snake.L,A2
00002BFA  0552      
                    4840   ; int i;
                    4841   ; for(i = 0; i < Snake.length; i++)
00002BFC  4282      4842          clr.l     D2
                    4843   drawSnake_1:
00002BFE  B4AA 4000 4844          cmp.l     16384(A2),D2
00002C02  6C24      4845          bge.s     drawSnake_3
                    4846   ; {
                    4847   ; putcharxy(Snake.xy[i].x, Snake.xy[i].y,SNAKE);
00002C04  4878 0053 4848          pea       83
00002C08  2202      4849          move.l    D2,D1
00002C0A  E789      4850          lsl.l     #3,D1
00002C0C  41F2 1800 4851          lea       0(A2,D1.L),A0
00002C10  2F28 0004 4852          move.l    4(A0),-(A7)
00002C14  2202      4853          move.l    D2,D1
00002C16  E789      4854          lsl.l     #3,D1
00002C18  2F32 1800 4855          move.l    0(A2,D1.L),-(A7)
00002C1C  4EB8 25FE 4856          jsr       _putcharxy
00002C20  DEFC 000C 4857          add.w     #12,A7
00002C24  5282      4858          addq.l    #1,D2
00002C26  60D6      4859          bra       drawSnake_1
                    4860   drawSnake_3:
00002C28  4CDF 0404 4861          movem.l   (A7)+,D2/A2
00002C2C  4E75      4862          rts
                    4863   ; }
                    4864   ; }
                    4865   ; void drawFood()
                    4866   ; {
                    4867   _drawFood:
                    4868   ; VGA_CTL = 0xf2;
00002C2E  13FC 00F2 4869          move.b    #242,7343872
00002C32  0070 0F00 
                    4870   ; putcharxy(Snake.food.x, Snake.food.y,FOOD);
00002C36  4878 0040 4871          pea       64
00002C3A  2F39 0803 4872          move.l    _Snake+16402.L,-(A7)
00002C3E  4564      
00002C40  2F39 0803 4873          move.l    _Snake+16398.L,-(A7)
00002C44  4560      
00002C46  4EB8 25FE 4874          jsr       _putcharxy
00002C4A  DEFC 000C 4875          add.w     #12,A7
00002C4E  4E75      4876          rts
                    4877   ; }
                    4878   ; void moveSnake()//remove tail, move array, add new head based on direction
                    4879   ; {
                    4880   _moveSnake:
00002C50  48E7 3820 4881          movem.l   D2/D3/D4/A2,-(A7)
00002C54  45F9 0803 4882          lea       _Snake.L,A2
00002C58  0552      
                    4883   ; int i;
                    4884   ; int x;
                    4885   ; int y;
                    4886   ; x = Snake.xy[0].x;
00002C5A  2612      4887          move.l    (A2),D3
                    4888   ; y = Snake.xy[0].y;
00002C5C  242A 0004 4889          move.l    4(A2),D2
                    4890   ; //saves initial head for direction determination
                    4891   ; putcharxy(Snake.xy[Snake.length-1].x, Snake.xy[Snake.length-1].y,' ');
00002C60  4878 0020 4892          pea       32
00002C64  222A 4000 4893          move.l    16384(A2),D1
00002C68  5381      4894          subq.l    #1,D1
00002C6A  E789      4895          lsl.l     #3,D1
00002C6C  41F2 1800 4896          lea       0(A2,D1.L),A0
00002C70  2F28 0004 4897          move.l    4(A0),-(A7)
00002C74  222A 4000 4898          move.l    16384(A2),D1
00002C78  5381      4899          subq.l    #1,D1
00002C7A  E789      4900          lsl.l     #3,D1
00002C7C  2F32 1800 4901          move.l    0(A2,D1.L),-(A7)
00002C80  4EB8 25FE 4902          jsr       _putcharxy
00002C84  DEFC 000C 4903          add.w     #12,A7
                    4904   ; for(i = Snake.length; i > 1; i--)
00002C88  282A 4000 4905          move.l    16384(A2),D4
                    4906   moveSnake_1:
00002C8C  0C84 0000 4907          cmp.l     #1,D4
00002C90  0001      
00002C92  6F00 0022 4908          ble       moveSnake_3
                    4909   ; {
                    4910   ; Snake.xy[i-1] = Snake.xy[i-2];
00002C96  200A      4911          move.l    A2,D0
00002C98  2204      4912          move.l    D4,D1
00002C9A  5381      4913          subq.l    #1,D1
00002C9C  E789      4914          lsl.l     #3,D1
00002C9E  D081      4915          add.l     D1,D0
00002CA0  2040      4916          move.l    D0,A0
00002CA2  200A      4917          move.l    A2,D0
00002CA4  2204      4918          move.l    D4,D1
00002CA6  5581      4919          subq.l    #2,D1
00002CA8  E789      4920          lsl.l     #3,D1
00002CAA  D081      4921          add.l     D1,D0
00002CAC  2240      4922          move.l    D0,A1
00002CAE  20D9      4923          move.l    (A1)+,(A0)+
00002CB0  20D9      4924          move.l    (A1)+,(A0)+
00002CB2  5384      4925          subq.l    #1,D4
00002CB4  60D6      4926          bra       moveSnake_1
                    4927   moveSnake_3:
                    4928   ; }
                    4929   ; //moves the snake array to the right
                    4930   ; switch (Snake.direction)
00002CB6  302A 4004 4931          move.w    16388(A2),D0
00002CBA  48C0      4932          ext.l     D0
00002CBC  0C80 0000 4933          cmp.l     #4,D0
00002CC0  0004      
00002CC2  6400 0046 4934          bhs       moveSnake_4
00002CC6  E380      4935          asl.l     #1,D0
00002CC8  303B 0806 4936          move.w    moveSnake_6(PC,D0.L),D0
00002CCC  4EFB 0002 4937          jmp       moveSnake_6(PC,D0.W)
                    4938   moveSnake_6:
00002CD0  0008      4939          dc.w      moveSnake_7-moveSnake_6
00002CD2  0014      4940          dc.w      moveSnake_8-moveSnake_6
00002CD4  0020      4941          dc.w      moveSnake_9-moveSnake_6
00002CD6  002C      4942          dc.w      moveSnake_10-moveSnake_6
                    4943   moveSnake_7:
                    4944   ; {
                    4945   ; case north:
                    4946   ; if (y > 0)  { y--; }
00002CD8  0C82 0000 4947          cmp.l     #0,D2
00002CDC  0000      
00002CDE  6F02      4948          ble.s     moveSnake_12
00002CE0  5382      4949          subq.l    #1,D2
                    4950   moveSnake_12:
                    4951   ; break;
00002CE2  6026      4952          bra.s     moveSnake_5
                    4953   moveSnake_8:
                    4954   ; case south:
                    4955   ; if (y < (NUM_VGA_ROWS-1)) { y++; }
00002CE4  0C82 0000 4956          cmp.l     #39,D2
00002CE8  0027      
00002CEA  6C02      4957          bge.s     moveSnake_14
00002CEC  5282      4958          addq.l    #1,D2
                    4959   moveSnake_14:
                    4960   ; break;
00002CEE  601A      4961          bra.s     moveSnake_5
                    4962   moveSnake_9:
                    4963   ; case west:
                    4964   ; if (x > 0) { x--; }
00002CF0  0C83 0000 4965          cmp.l     #0,D3
00002CF4  0000      
00002CF6  6F02      4966          ble.s     moveSnake_16
00002CF8  5383      4967          subq.l    #1,D3
                    4968   moveSnake_16:
                    4969   ; break;
00002CFA  600E      4970          bra.s     moveSnake_5
                    4971   moveSnake_10:
                    4972   ; case east:
                    4973   ; if (x < (NUM_VGA_COLUMNS-1))  { x++; }
00002CFC  0C83 0000 4974          cmp.l     #79,D3
00002D00  004F      
00002D02  6C02      4975          bge.s     moveSnake_18
00002D04  5283      4976          addq.l    #1,D3
                    4977   moveSnake_18:
                    4978   ; break;
00002D06  6000 0002 4979          bra       moveSnake_5
                    4980   moveSnake_4:
                    4981   ; default:
                    4982   ; break;
                    4983   moveSnake_5:
                    4984   ; }
                    4985   ; //adds new snake head
                    4986   ; Snake.xy[0].x = x;
00002D0A  2483      4987          move.l    D3,(A2)
                    4988   ; Snake.xy[0].y = y;
00002D0C  2542 0004 4989          move.l    D2,4(A2)
                    4990   ; waiting_for_direction_to_be_implemented = 0;
00002D10  42B9 0803 4991          clr.l     _waiting_for_direction_to_be_imp.L
00002D14  4568      
                    4992   ; putcharxy(Snake.xy[0].x,Snake.xy[0].y,SNAKE);
00002D16  4878 0053 4993          pea       83
00002D1A  2F2A 0004 4994          move.l    4(A2),-(A7)
00002D1E  2F12      4995          move.l    (A2),-(A7)
00002D20  4EB8 25FE 4996          jsr       _putcharxy
00002D24  DEFC 000C 4997          add.w     #12,A7
00002D28  4CDF 041C 4998          movem.l   (A7)+,D2/D3/D4/A2
00002D2C  4E75      4999          rts
                    5000   ; }
                    5001   ; /* Compute x mod y using binary long division. */
                    5002   ; int mod_bld(int x, int y)
                    5003   ; {
                    5004   _mod_bld:
00002D2E  4E56 0000 5005          link      A6,#0
00002D32  48E7 3000 5006          movem.l   D2/D3,-(A7)
                    5007   ; int modulus = x, divisor = y;
00002D36  262E 0008 5008          move.l    8(A6),D3
00002D3A  242E 000C 5009          move.l    12(A6),D2
                    5010   ; while (divisor <= modulus && divisor <= 16384)
                    5011   mod_bld_1:
00002D3E  B483      5012          cmp.l     D3,D2
00002D40  6E0C      5013          bgt.s     mod_bld_3
00002D42  0C82 0000 5014          cmp.l     #16384,D2
00002D46  4000      
00002D48  6E04      5015          bgt.s     mod_bld_3
                    5016   ; divisor <<= 1;
00002D4A  E382      5017          asl.l     #1,D2
00002D4C  60F0      5018          bra       mod_bld_1
                    5019   mod_bld_3:
                    5020   ; while (modulus >= y) {
                    5021   mod_bld_4:
00002D4E  B6AE 000C 5022          cmp.l     12(A6),D3
00002D52  6D0C      5023          blt.s     mod_bld_6
                    5024   ; while (divisor > modulus)
                    5025   mod_bld_7:
00002D54  B483      5026          cmp.l     D3,D2
00002D56  6F04      5027          ble.s     mod_bld_9
                    5028   ; divisor >>= 1;
00002D58  E282      5029          asr.l     #1,D2
00002D5A  60F8      5030          bra       mod_bld_7
                    5031   mod_bld_9:
                    5032   ; modulus -= divisor;
00002D5C  9682      5033          sub.l     D2,D3
00002D5E  60EE      5034          bra       mod_bld_4
                    5035   mod_bld_6:
                    5036   ; }
                    5037   ; return modulus;
00002D60  2003      5038          move.l    D3,D0
00002D62  4CDF 000C 5039          movem.l   (A7)+,D2/D3
00002D66  4E5E      5040          unlk      A6
00002D68  4E75      5041          rts
                    5042   ; }
                    5043   ; void generateFood()
                    5044   ; {
                    5045   _generateFood:
00002D6A  48E7 3020 5046          movem.l   D2/D3/A2,-(A7)
00002D6E  45F9 0803 5047          lea       _Snake.L,A2
00002D72  0552      
                    5048   ; int bol;
                    5049   ; int i;
                    5050   ; static int firsttime = 1;
                    5051   ; //removes last food
                    5052   ; if (!firsttime) {
00002D74  4AB9 0000 5053          tst.l     generateFood_firsttime.L
00002D78  4F02      
00002D7A  6616      5054          bne.s     generateFood_2
                    5055   ; putcharxy(Snake.food.x,Snake.food.y,' ');
00002D7C  4878 0020 5056          pea       32
00002D80  2F2A 4012 5057          move.l    16402(A2),-(A7)
00002D84  2F2A 400E 5058          move.l    16398(A2),-(A7)
00002D88  4EB8 25FE 5059          jsr       _putcharxy
00002D8C  DEFC 000C 5060          add.w     #12,A7
00002D90  6006      5061          bra.s     generateFood_3
                    5062   generateFood_2:
                    5063   ; } else {
                    5064   ; firsttime = 0;
00002D92  42B9 0000 5065          clr.l     generateFood_firsttime.L
00002D96  4F02      
                    5066   generateFood_3:
                    5067   ; }
                    5068   ; do
                    5069   ; {
                    5070   generateFood_4:
                    5071   ; bol = 0;
00002D98  4283      5072          clr.l     D3
                    5073   ; //pseudo-randomly set food location
                    5074   ; //use clock instead of random function that is
                    5075   ; //not implemented in ide68k
                    5076   ; Snake.food.x = 3+ mod_bld(((clock()& 0xFFF0) >> 4),screensize.x-6);
00002D9A  7003      5077          moveq     #3,D0
00002D9C  4880      5078          ext.w     D0
00002D9E  48C0      5079          ext.l     D0
00002DA0  2F00      5080          move.l    D0,-(A7)
00002DA2  2039 0000 5081          move.l    _screensize.L,D0
00002DA6  4EFA      
00002DA8  5D80      5082          subq.l    #6,D0
00002DAA  2F00      5083          move.l    D0,-(A7)
00002DAC  2F01      5084          move.l    D1,-(A7)
00002DAE  4EB8 2708 5085          jsr       _clock
00002DB2  221F      5086          move.l    (A7)+,D1
00002DB4  C0BC 0000 5087          and.l     #65520,D0
00002DB8  FFF0      
00002DBA  E880      5088          asr.l     #4,D0
00002DBC  2F00      5089          move.l    D0,-(A7)
00002DBE  4EB8 2D2E 5090          jsr       _mod_bld
00002DC2  504F      5091          addq.w    #8,A7
00002DC4  2200      5092          move.l    D0,D1
00002DC6  201F      5093          move.l    (A7)+,D0
00002DC8  D081      5094          add.l     D1,D0
00002DCA  2540 400E 5095          move.l    D0,16398(A2)
                    5096   ; Snake.food.y = 3+ mod_bld(clock()& 0xFFFF,screensize.y-6);
00002DCE  7003      5097          moveq     #3,D0
00002DD0  4880      5098          ext.w     D0
00002DD2  48C0      5099          ext.l     D0
00002DD4  2F00      5100          move.l    D0,-(A7)
00002DD6  2F00      5101          move.l    D0,-(A7)
00002DD8  2039 0000 5102          move.l    _screensize+4.L,D0
00002DDC  4EFE      
00002DDE  5D80      5103          subq.l    #6,D0
00002DE0  2F00      5104          move.l    D0,-(A7)
00002DE2  2F01      5105          move.l    D1,-(A7)
00002DE4  4EB8 2708 5106          jsr       _clock
00002DE8  221F      5107          move.l    (A7)+,D1
00002DEA  C0BC 0000 5108          and.l     #65535,D0
00002DEE  FFFF      
00002DF0  2F00      5109          move.l    D0,-(A7)
00002DF2  4EB8 2D2E 5110          jsr       _mod_bld
00002DF6  504F      5111          addq.w    #8,A7
00002DF8  2200      5112          move.l    D0,D1
00002DFA  201F      5113          move.l    (A7)+,D0
00002DFC  201F      5114          move.l    (A7)+,D0
00002DFE  D081      5115          add.l     D1,D0
00002E00  2540 4012 5116          move.l    D0,16402(A2)
                    5117   ; for(i = 0; i < Snake.length; i++)
00002E04  4282      5118          clr.l     D2
                    5119   generateFood_6:
00002E06  B4AA 4000 5120          cmp.l     16384(A2),D2
00002E0A  6C26      5121          bge.s     generateFood_8
                    5122   ; {
                    5123   ; if (Snake.food.x == Snake.xy[i].x && Snake.food.y == Snake.xy[i].y) {
00002E0C  2002      5124          move.l    D2,D0
00002E0E  E788      5125          lsl.l     #3,D0
00002E10  222A 400E 5126          move.l    16398(A2),D1
00002E14  B2B2 0800 5127          cmp.l     0(A2,D0.L),D1
00002E18  6614      5128          bne.s     generateFood_9
00002E1A  2002      5129          move.l    D2,D0
00002E1C  E788      5130          lsl.l     #3,D0
00002E1E  41F2 0800 5131          lea       0(A2,D0.L),A0
00002E22  202A 4012 5132          move.l    16402(A2),D0
00002E26  B0A8 0004 5133          cmp.l     4(A0),D0
00002E2A  6602      5134          bne.s     generateFood_9
                    5135   ; bol = 1; //resets loop if collision detected
00002E2C  7601      5136          moveq     #1,D3
                    5137   generateFood_9:
00002E2E  5282      5138          addq.l    #1,D2
00002E30  60D4      5139          bra       generateFood_6
                    5140   generateFood_8:
00002E32  4A83      5141          tst.l     D3
00002E34  6600 FF62 5142          bne       generateFood_4
                    5143   ; }
                    5144   ; }
                    5145   ; } while (bol);//while colliding with snake
                    5146   ; drawFood();
00002E38  4EB8 2C2E 5147          jsr       _drawFood
00002E3C  4CDF 040C 5148          movem.l   (A7)+,D2/D3/A2
00002E40  4E75      5149          rts
                    5150   ; }
                    5151   ; int getKeypress()
                    5152   ; {
                    5153   _getKeypress:
00002E42  48E7 0030 5154          movem.l   A2/A3,-(A7)
00002E46  45F9 0803 5155          lea       _Snake.L,A2
00002E4A  0552      
00002E4C  47F9 0803 5156          lea       _waiting_for_direction_to_be_imp.L,A3
00002E50  4568      
                    5157   ; if (kbhit()) {
00002E52  4EB8 0B6C 5158          jsr       _kbhit
00002E56  4A80      5159          tst.l     D0
00002E58  6700 00DE 5160          beq       getKeypress_4
                    5161   ; switch (_getch())
00002E5C  4EB8 0BB0 5162          jsr       __getch
00002E60  0C80 0000 5163          cmp.l     #113,D0
00002E64  0071      
00002E66  6700 00C8 5164          beq       getKeypress_10
00002E6A  6E28      5165          bgt.s     getKeypress_12
00002E6C  0C80 0000 5166          cmp.l     #100,D0
00002E70  0064      
00002E72  6700 0096 5167          beq       getKeypress_8
00002E76  6E0E      5168          bgt.s     getKeypress_13
00002E78  0C80 0000 5169          cmp.l     #97,D0
00002E7C  0061      
00002E7E  6700 006A 5170          beq       getKeypress_7
00002E82  6000 00B4 5171          bra       getKeypress_3
                    5172   getKeypress_13:
00002E86  0C80 0000 5173          cmp.l     #112,D0
00002E8A  0070      
00002E8C  6700 009C 5174          beq       getKeypress_9
00002E90  6000 00A6 5175          bra       getKeypress_3
                    5176   getKeypress_12:
00002E94  0C80 0000 5177          cmp.l     #119,D0
00002E98  0077      
00002E9A  6710      5178          beq.s     getKeypress_5
00002E9C  6E00 009A 5179          bgt       getKeypress_3
00002EA0  0C80 0000 5180          cmp.l     #115,D0
00002EA4  0073      
00002EA6  6724      5181          beq.s     getKeypress_6
00002EA8  6000 008E 5182          bra       getKeypress_3
                    5183   getKeypress_5:
                    5184   ; {
                    5185   ; case 'w':
                    5186   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != south)){
00002EAC  4A93      5187          tst.l     (A3)
00002EAE  6618      5188          bne.s     getKeypress_14
00002EB0  302A 4004 5189          move.w    16388(A2),D0
00002EB4  48C0      5190          ext.l     D0
00002EB6  0C80 0000 5191          cmp.l     #1,D0
00002EBA  0001      
00002EBC  670A      5192          beq.s     getKeypress_14
                    5193   ; Snake.direction = north;
00002EBE  426A 4004 5194          clr.w     16388(A2)
                    5195   ; waiting_for_direction_to_be_implemented = 1;
00002EC2  26BC 0000 5196          move.l    #1,(A3)
00002EC6  0001      
                    5197   getKeypress_14:
                    5198   ; }
                    5199   ; break;
00002EC8  6000 006E 5200          bra       getKeypress_4
                    5201   getKeypress_6:
                    5202   ; case 's':
                    5203   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != north)){
00002ECC  4A93      5204          tst.l     (A3)
00002ECE  6616      5205          bne.s     getKeypress_16
00002ED0  302A 4004 5206          move.w    16388(A2),D0
00002ED4  48C0      5207          ext.l     D0
00002ED6  4A80      5208          tst.l     D0
00002ED8  670C      5209          beq.s     getKeypress_16
                    5210   ; Snake.direction = south;
00002EDA  357C 0001 5211          move.w    #1,16388(A2)
00002EDE  4004      
                    5212   ; waiting_for_direction_to_be_implemented = 1;
00002EE0  26BC 0000 5213          move.l    #1,(A3)
00002EE4  0001      
                    5214   getKeypress_16:
                    5215   ; }
                    5216   ; break;
00002EE6  6000 0050 5217          bra       getKeypress_4
                    5218   getKeypress_7:
                    5219   ; case 'a':
                    5220   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != east)){
00002EEA  4A93      5221          tst.l     (A3)
00002EEC  661A      5222          bne.s     getKeypress_18
00002EEE  302A 4004 5223          move.w    16388(A2),D0
00002EF2  48C0      5224          ext.l     D0
00002EF4  0C80 0000 5225          cmp.l     #3,D0
00002EF8  0003      
00002EFA  670C      5226          beq.s     getKeypress_18
                    5227   ; Snake.direction = west;
00002EFC  357C 0002 5228          move.w    #2,16388(A2)
00002F00  4004      
                    5229   ; waiting_for_direction_to_be_implemented = 1;
00002F02  26BC 0000 5230          move.l    #1,(A3)
00002F06  0001      
                    5231   getKeypress_18:
                    5232   ; }
                    5233   ; break;
00002F08  602E      5234          bra.s     getKeypress_4
                    5235   getKeypress_8:
                    5236   ; case 'd':
                    5237   ; if (!waiting_for_direction_to_be_implemented && (Snake.direction != west)){
00002F0A  4A93      5238          tst.l     (A3)
00002F0C  661A      5239          bne.s     getKeypress_20
00002F0E  302A 4004 5240          move.w    16388(A2),D0
00002F12  48C0      5241          ext.l     D0
00002F14  0C80 0000 5242          cmp.l     #2,D0
00002F18  0002      
00002F1A  670C      5243          beq.s     getKeypress_20
                    5244   ; Snake.direction = east;
00002F1C  357C 0003 5245          move.w    #3,16388(A2)
00002F20  4004      
                    5246   ; waiting_for_direction_to_be_implemented = 1;
00002F22  26BC 0000 5247          move.l    #1,(A3)
00002F26  0001      
                    5248   getKeypress_20:
                    5249   ; }
                    5250   ; break;
00002F28  600E      5251          bra.s     getKeypress_4
                    5252   getKeypress_9:
                    5253   ; case 'p':
                    5254   ; _getch();
00002F2A  4EB8 0BB0 5255          jsr       __getch
                    5256   ; break;
00002F2E  6008      5257          bra.s     getKeypress_4
                    5258   getKeypress_10:
                    5259   ; case 'q':
                    5260   ; gameOver();
00002F30  4EB8 274E 5261          jsr       _gameOver
                    5262   ; return 0;
00002F34  4280      5263          clr.l     D0
00002F36  6002      5264          bra.s     getKeypress_22
                    5265   getKeypress_3:
                    5266   ; default:
                    5267   ; //do nothing
                    5268   ; break;
                    5269   getKeypress_4:
                    5270   ; }
                    5271   ; }
                    5272   ; return 1;
00002F38  7001      5273          moveq     #1,D0
                    5274   getKeypress_22:
00002F3A  4CDF 0C00 5275          movem.l   (A7)+,A2/A3
00002F3E  4E75      5276          rts
                    5277   ; }
                    5278   ; int detectCollision()//with self -> game over, food -> delete food add score (only head checks)
                    5279   ; // returns 0 for no collision, 1 for game over
                    5280   ; {
                    5281   _detectCollision:
00002F40  48E7 3020 5282          movem.l   D2/D3/A2,-(A7)
00002F44  45F9 0803 5283          lea       _Snake.L,A2
00002F48  0552      
                    5284   ; int i;
                    5285   ; int retval;
                    5286   ; retval = 0;
00002F4A  4283      5287          clr.l     D3
                    5288   ; if (Snake.xy[0].x == Snake.food.x && Snake.xy[0].y == Snake.food.y) {
00002F4C  2012      5289          move.l    (A2),D0
00002F4E  B0AA 400E 5290          cmp.l     16398(A2),D0
00002F52  6600 0068 5291          bne       detectCollision_1
00002F56  202A 0004 5292          move.l    4(A2),D0
00002F5A  B0AA 4012 5293          cmp.l     16402(A2),D0
00002F5E  6600 005C 5294          bne       detectCollision_1
                    5295   ; //detect collision with food
                    5296   ; Snake.length++;
00002F62  200A      5297          move.l    A2,D0
00002F64  0680 0000 5298          add.l     #16384,D0
00002F68  4000      
00002F6A  2040      5299          move.l    D0,A0
00002F6C  5290      5300          addq.l    #1,(A0)
                    5301   ; Snake.xy[Snake.length-1].x = Snake.xy[Snake.length-2].x;
00002F6E  202A 4000 5302          move.l    16384(A2),D0
00002F72  5580      5303          subq.l    #2,D0
00002F74  E788      5304          lsl.l     #3,D0
00002F76  222A 4000 5305          move.l    16384(A2),D1
00002F7A  5381      5306          subq.l    #1,D1
00002F7C  E789      5307          lsl.l     #3,D1
00002F7E  25B2 0800 5308          move.l    0(A2,D0.L),0(A2,D1.L)
00002F82  1800      
                    5309   ; Snake.xy[Snake.length-1].y = Snake.xy[Snake.length-2].y;
00002F84  202A 4000 5310          move.l    16384(A2),D0
00002F88  5580      5311          subq.l    #2,D0
00002F8A  E788      5312          lsl.l     #3,D0
00002F8C  41F2 0800 5313          lea       0(A2,D0.L),A0
00002F90  202A 4000 5314          move.l    16384(A2),D0
00002F94  5380      5315          subq.l    #1,D0
00002F96  E788      5316          lsl.l     #3,D0
00002F98  43F2 0800 5317          lea       0(A2,D0.L),A1
00002F9C  2368 0004 5318          move.l    4(A0),4(A1)
00002FA0  0004      
                    5319   ; Snake.speed = Snake.speed + Snake.speed_increase;
00002FA2  202A 4006 5320          move.l    16390(A2),D0
00002FA6  D0AA 400A 5321          add.l     16394(A2),D0
00002FAA  2540 4006 5322          move.l    D0,16390(A2)
                    5323   ; generateFood();
00002FAE  4EB8 2D6A 5324          jsr       _generateFood
                    5325   ; score++;
00002FB2  52B9 0803 5326          addq.l    #1,_score.L
00002FB6  054A      
                    5327   ; updateScore();
00002FB8  4EB8 2A82 5328          jsr       _updateScore
                    5329   detectCollision_1:
                    5330   ; }
                    5331   ; for(i = 2; i < Snake.length; i++)
00002FBC  7402      5332          moveq     #2,D2
                    5333   detectCollision_3:
00002FBE  B4AA 4000 5334          cmp.l     16384(A2),D2
00002FC2  6C28      5335          bge.s     detectCollision_5
                    5336   ; {
                    5337   ; //detects collision of the head
                    5338   ; if (Snake.xy[i].x == Snake.xy[0].x && Snake.xy[i].y == Snake.xy[0].y) {
00002FC4  2002      5339          move.l    D2,D0
00002FC6  E788      5340          lsl.l     #3,D0
00002FC8  2232 0800 5341          move.l    0(A2,D0.L),D1
00002FCC  B292      5342          cmp.l     (A2),D1
00002FCE  6618      5343          bne.s     detectCollision_6
00002FD0  2002      5344          move.l    D2,D0
00002FD2  E788      5345          lsl.l     #3,D0
00002FD4  41F2 0800 5346          lea       0(A2,D0.L),A0
00002FD8  2028 0004 5347          move.l    4(A0),D0
00002FDC  B0AA 0004 5348          cmp.l     4(A2),D0
00002FE0  6606      5349          bne.s     detectCollision_6
                    5350   ; gameOver();
00002FE2  4EB8 274E 5351          jsr       _gameOver
                    5352   ; retval = 1;
00002FE6  7601      5353          moveq     #1,D3
                    5354   detectCollision_6:
00002FE8  5282      5355          addq.l    #1,D2
00002FEA  60D2      5356          bra       detectCollision_3
                    5357   detectCollision_5:
                    5358   ; }
                    5359   ; }
                    5360   ; if (Snake.xy[0].x == 1 || Snake.xy[0].x == (screensize.x-1) || Snake.xy[0].y == 1 || Snake.xy[0].y == (screensize.y-2)) {
00002FEC  2012      5361          move.l    (A2),D0
00002FEE  0C80 0000 5362          cmp.l     #1,D0
00002FF2  0001      
00002FF4  6726      5363          beq.s     detectCollision_10
00002FF6  2039 0000 5364          move.l    _screensize.L,D0
00002FFA  4EFA      
00002FFC  5380      5365          subq.l    #1,D0
00002FFE  B092      5366          cmp.l     (A2),D0
00003000  671A      5367          beq.s     detectCollision_10
00003002  202A 0004 5368          move.l    4(A2),D0
00003006  0C80 0000 5369          cmp.l     #1,D0
0000300A  0001      
0000300C  670E      5370          beq.s     detectCollision_10
0000300E  2039 0000 5371          move.l    _screensize+4.L,D0
00003012  4EFE      
00003014  5580      5372          subq.l    #2,D0
00003016  B0AA 0004 5373          cmp.l     4(A2),D0
0000301A  6606      5374          bne.s     detectCollision_8
                    5375   detectCollision_10:
                    5376   ; //collision with wall
                    5377   ; gameOver();
0000301C  4EB8 274E 5378          jsr       _gameOver
                    5379   ; retval = 1;
00003020  7601      5380          moveq     #1,D3
                    5381   detectCollision_8:
                    5382   ; }
                    5383   ; return retval;
00003022  2003      5384          move.l    D3,D0
00003024  4CDF 040C 5385          movem.l   (A7)+,D2/D3/A2
00003028  4E75      5386          rts
                    5387   ; }
                    5388   ; void mainloop()
                    5389   ; {
                    5390   _mainloop:
0000302A  4E56 FFFC 5391          link      A6,#-4
0000302E  2F02      5392          move.l    D2,-(A7)
                    5393   ; int current_time;
                    5394   ; int got_game_over;
                    5395   ; while(1){
                    5396   mainloop_1:
                    5397   ; if (!getKeypress()) {
00003030  4EB8 2E42 5398          jsr       _getKeypress
00003034  4A80      5399          tst.l     D0
00003036  6604      5400          bne.s     mainloop_4
                    5401   ; return;
00003038  6000 0042 5402          bra       mainloop_3
                    5403   mainloop_4:
                    5404   ; }
                    5405   ; current_time = clock();
0000303C  4EB8 2708 5406          jsr       _clock
00003040  2400      5407          move.l    D0,D2
                    5408   ; if (current_time >= ((MILLISECONDS_PER_SEC/Snake.speed) + timer)) {
00003042  4878 03E8 5409          pea       1000
00003046  2F39 0803 5410          move.l    _Snake+16390.L,-(A7)
0000304A  4558      
0000304C  4EB9 0000 5411          jsr       LDIV
00003050  3374      
00003052  2017      5412          move.l    (A7),D0
00003054  504F      5413          addq.w    #8,A7
00003056  D0B9 0803 5414          add.l     _timer.L,D0
0000305A  054E      
0000305C  B480      5415          cmp.l     D0,D2
0000305E  6D1A      5416          blt.s     mainloop_7
                    5417   ; moveSnake(); //draws new snake position
00003060  4EB8 2C50 5418          jsr       _moveSnake
                    5419   ; got_game_over = detectCollision();
00003064  4EB8 2F40 5420          jsr       _detectCollision
00003068  2D40 FFFC 5421          move.l    D0,-4(A6)
                    5422   ; if (got_game_over) {
0000306C  4AAE FFFC 5423          tst.l     -4(A6)
00003070  6702      5424          beq.s     mainloop_9
                    5425   ; break;
00003072  6008      5426          bra.s     mainloop_3
                    5427   mainloop_9:
                    5428   ; }
                    5429   ; timer = current_time;
00003074  23C2 0803 5430          move.l    D2,_timer.L
00003078  054E      
                    5431   mainloop_7:
0000307A  60B4      5432          bra       mainloop_1
                    5433   mainloop_3:
0000307C  241F      5434          move.l    (A7)+,D2
0000307E  4E5E      5435          unlk      A6
00003080  4E75      5436          rts
                    5437   ; }
                    5438   ; }
                    5439   ; }
                    5440   ; void snake_main()
                    5441   ; {   
                    5442   _snake_main:
00003082  2F0A      5443          move.l    A2,-(A7)
00003084  45F9 0803 5444          lea       _Snake.L,A2
00003088  0552      
                    5445   ; VGA_CTL = 0xf2;
0000308A  13FC 00F2 5446          move.b    #242,7343872
0000308E  0070 0F00 
                    5447   ; score = 0;
00003092  42B9 0803 5448          clr.l     _score.L
00003096  054A      
                    5449   ; gotoxy(70, 40);
00003098  4878 0028 5450          pea       40
0000309C  4878 0046 5451          pea       70
000030A0  4EB8 26D4 5452          jsr       _gotoxy
000030A4  504F      5453          addq.w    #8,A7
                    5454   ; waiting_for_direction_to_be_implemented = 0;
000030A6  42B9 0803 5455          clr.l     _waiting_for_direction_to_be_imp.L
000030AA  4568      
                    5456   ; Snake.xy[0].x = 4;
000030AC  24BC 0000 5457          move.l    #4,(A2)
000030B0  0004      
                    5458   ; Snake.xy[0].y = 3;
000030B2  257C 0000 5459          move.l    #3,4(A2)
000030B6  0003 0004 
                    5460   ; Snake.xy[1].x = 3;
000030BA  257C 0000 5461          move.l    #3,8(A2)
000030BE  0003 0008 
                    5462   ; Snake.xy[1].y = 3;
000030C2  257C 0000 5463          move.l    #3,12(A2)
000030C6  0003 000C 
                    5464   ; Snake.xy[2].x = 2;
000030CA  257C 0000 5465          move.l    #2,16(A2)
000030CE  0002 0010 
                    5466   ; Snake.xy[2].y = 3;
000030D2  257C 0000 5467          move.l    #3,20(A2)
000030D6  0003 0014 
                    5468   ; Snake.length = INITIAL_SNAKE_LENGTH;
000030DA  257C 0000 5469          move.l    #3,16384(A2)
000030DE  0003 4000 
                    5470   ; Snake.direction = east;
000030E2  357C 0003 5471          move.w    #3,16388(A2)
000030E6  4004      
                    5472   ; initSnake();
000030E8  4EB8 2BD4 5473          jsr       _initSnake
                    5474   ; cls();
000030EC  4EB8 26BA 5475          jsr       _cls
                    5476   ; drawRect(0,0,screensize.x,screensize.y-1, BORDER);
000030F0  4878 0023 5477          pea       35
000030F4  2239 0000 5478          move.l    _screensize+4.L,D1
000030F8  4EFE      
000030FA  5381      5479          subq.l    #1,D1
000030FC  2F01      5480          move.l    D1,-(A7)
000030FE  2F39 0000 5481          move.l    _screensize.L,-(A7)
00003102  4EFA      
00003104  42A7      5482          clr.l     -(A7)
00003106  42A7      5483          clr.l     -(A7)
00003108  4EB8 2B24 5484          jsr       _drawRect
0000310C  DEFC 0014 5485          add.w     #20,A7
                    5486   ; drawSnake();
00003110  4EB8 2BF2 5487          jsr       _drawSnake
                    5488   ; generateFood();
00003114  4EB8 2D6A 5489          jsr       _generateFood
                    5490   ; drawFood();
00003118  4EB8 2C2E 5491          jsr       _drawFood
                    5492   ; timer = clock();
0000311C  4EB8 2708 5493          jsr       _clock
00003120  23C0 0803 5494          move.l    D0,_timer.L
00003124  054E      
                    5495   ; updateScore();
00003126  4EB8 2A82 5496          jsr       _updateScore
                    5497   ; mainloop();
0000312A  4EB8 302A 5498          jsr       _mainloop
0000312E  245F      5499          move.l    (A7)+,A2
00003130  4E75      5500          rts
                    5501   ; }
                    5502   ; void snake_game(void){
                    5503   _snake_game:
                    5504   ; VGA_CRX = 0x52;
00003132  13FC 0052 5505          move.b    #82,7343874
00003136  0070 0F02 
                    5506   ; VGA_CRY = 0x14;
0000313A  13FC 0014 5507          move.b    #20,7343876
0000313E  0070 0F04 
                    5508   ; VGA_CTL = 0xf2;
00003142  13FC 00F2 5509          move.b    #242,7343872
00003146  0070 0F00 
                    5510   ; snake_main();
0000314A  4EB8 3082 5511          jsr       _snake_main
0000314E  4E75      5512          rts
                    5513   ; }
                    5514   ; void main(void)
                    5515   ; {
                    5516   _main:
00003150  4E56 FFF4 5517          link      A6,#-12
00003154  48E7 3020 5518          movem.l   D2/D3/A2,-(A7)
00003158  45F9 0000 5519          lea       _printf.L,A2
0000315C  3618      
                    5520   ; char c ;
                    5521   ; int i, j ;
                    5522   ; char *BugMessage = "Name: Jonathan Zhang, Student Number: 40791428";
0000315E  41F9 0000 5523          lea       @final_~1_139.L,A0
00003162  4E7A      
00003164  2608      5524          move.l    A0,D3
                    5525   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00003166  41F9 0000 5526          lea       @final_~1_140.L,A0
0000316A  4EAA      
0000316C  2D48 FFFC 5527          move.l    A0,-4(A6)
                    5528   ; KillAllBreakPoints() ;
00003170  4EB8 1C64 5529          jsr       _KillAllBreakPoints
                    5530   ; i = x = y = z = PortA_Count = 0;
00003174  42B9 0803 5531          clr.l     _PortA_Count.L
00003178  00D4      
0000317A  42B9 0803 5532          clr.l     _z.L
0000317E  00D0      
00003180  42B9 0803 5533          clr.l     _y.L
00003184  00CC      
00003186  42B9 0803 5534          clr.l     _x.L
0000318A  00C8      
0000318C  4282      5535          clr.l     D2
                    5536   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
0000318E  42B9 0803 5537          clr.l     _GoFlag.L
00003192  00DC      
00003194  42B9 0803 5538          clr.l     _Trace.L
00003198  00D8      
                    5539   ; Echo = 1 ;
0000319A  23FC 0000 5540          move.l    #1,_Echo.L
0000319E  0001 0803 
000031A2  00E0      
                    5541   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
000031A4  42B9 0803 5542          clr.l     _d7.L
000031A8  0100      
000031AA  42B9 0803 5543          clr.l     _d6.L
000031AE  00FC      
000031B0  42B9 0803 5544          clr.l     _d5.L
000031B4  00F8      
000031B6  42B9 0803 5545          clr.l     _d4.L
000031BA  00F4      
000031BC  42B9 0803 5546          clr.l     _d3.L
000031C0  00F0      
000031C2  42B9 0803 5547          clr.l     _d2.L
000031C6  00EC      
000031C8  42B9 0803 5548          clr.l     _d1.L
000031CC  00E8      
000031CE  42B9 0803 5549          clr.l     _d0.L
000031D2  00E4      
                    5550   ; a0=a1=a2=a3=a4=a5=a6=0 ;
000031D4  42B9 0803 5551          clr.l     _a6.L
000031D8  011C      
000031DA  42B9 0803 5552          clr.l     _a5.L
000031DE  0118      
000031E0  42B9 0803 5553          clr.l     _a4.L
000031E4  0114      
000031E6  42B9 0803 5554          clr.l     _a3.L
000031EA  0110      
000031EC  42B9 0803 5555          clr.l     _a2.L
000031F0  010C      
000031F2  42B9 0803 5556          clr.l     _a1.L
000031F6  0108      
000031F8  42B9 0803 5557          clr.l     _a0.L
000031FC  0104      
                    5558   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000031FE  23FC 0800 5559          move.l    #134217728,_PC.L
00003202  0000 0803 
00003206  0120      
00003208  23FC 0804 5560          move.l    #134479872,_SSP.L
0000320C  0000 0803 
00003210  0124      
00003212  23FC 0804 5561          move.l    #134479872,_USP.L
00003216  0000 0803 
0000321A  0128      
                    5562   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
0000321C  33FC 2000 5563          move.w    #8192,_SR.L
00003220  0803 012C 
                    5564   ; // Initialise Breakpoint variables
                    5565   ; for(i = 0; i < 8; i++)  {
00003224  4282      5566          clr.l     D2
                    5567   main_1:
00003226  0C82 0000 5568          cmp.l     #8,D2
0000322A  0008      
0000322C  6C00 004C 5569          bge       main_3
                    5570   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00003230  2002      5571          move.l    D2,D0
00003232  E588      5572          lsl.l     #2,D0
00003234  41F9 0803 5573          lea       _BreakPointAddress.L,A0
00003238  012E      
0000323A  42B0 0800 5574          clr.l     0(A0,D0.L)
                    5575   ; WatchPointAddress[i] = 0 ;
0000323E  2002      5576          move.l    D2,D0
00003240  E588      5577          lsl.l     #2,D0
00003242  41F9 0803 5578          lea       _WatchPointAddress.L,A0
00003246  0182      
00003248  42B0 0800 5579          clr.l     0(A0,D0.L)
                    5580   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
0000324C  2002      5581          move.l    D2,D0
0000324E  E388      5582          lsl.l     #1,D0
00003250  41F9 0803 5583          lea       _BreakPointInstruction.L,A0
00003254  014E      
00003256  4270 0800 5584          clr.w     0(A0,D0.L)
                    5585   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
0000325A  2002      5586          move.l    D2,D0
0000325C  E588      5587          lsl.l     #2,D0
0000325E  41F9 0803 5588          lea       _BreakPointSetOrCleared.L,A0
00003262  015E      
00003264  42B0 0800 5589          clr.l     0(A0,D0.L)
                    5590   ; WatchPointSetOrCleared[i] = 0;
00003268  2002      5591          move.l    D2,D0
0000326A  E588      5592          lsl.l     #2,D0
0000326C  41F9 0803 5593          lea       _WatchPointSetOrCleared.L,A0
00003270  01A2      
00003272  42B0 0800 5594          clr.l     0(A0,D0.L)
00003276  5282      5595          addq.l    #1,D2
00003278  60AC      5596          bra       main_1
                    5597   main_3:
                    5598   ; }
                    5599   ; InstallExceptionHandler(clock, 30) ;
0000327A  4878 001E 5600          pea       30
0000327E  4878 2708 5601          pea       _clock.L
00003282  4EB8 0A78 5602          jsr       _InstallExceptionHandler
00003286  504F      5603          addq.w    #8,A7
                    5604   ; Timer8Data = 0x03;
00003288  13FC 0003 5605          move.b    #3,4194620
0000328C  0040 013C 
                    5606   ; Timer8Control = 3;
00003290  13FC 0003 5607          move.b    #3,4194622
00003294  0040 013E 
                    5608   ; Timer8Count = 0;
00003298  42B9 0803 5609          clr.l     _Timer8Count.L
0000329C  0546      
                    5610   ; Init_RS232() ;     // initialise the RS232 port
0000329E  4EB8 0B5A 5611          jsr       _Init_RS232
                    5612   ; Init_LCD() ;
000032A2  4EB8 09A6 5613          jsr       _Init_LCD
                    5614   ; Timer8Data = 0x03;
000032A6  13FC 0003 5615          move.b    #3,4194620
000032AA  0040 013C 
                    5616   ; Timer8Control = 3;
000032AE  13FC 0003 5617          move.b    #3,4194622
000032B2  0040 013E 
                    5618   ; Timer8Count = 0;
000032B6  42B9 0803 5619          clr.l     _Timer8Count.L
000032BA  0546      
                    5620   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000032BC  4EB8 0BEE 5621          jsr       _FlushKeyboard
                    5622   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000032C0  4239 0040 5623          clr.b     4194314
000032C4  000A      
                    5624   ; gotoxy(40, 20);
000032C6  4878 0014 5625          pea       20
000032CA  4878 0028 5626          pea       40
000032CE  4EB8 26D4 5627          jsr       _gotoxy
000032D2  504F      5628          addq.w    #8,A7
                    5629   ; set_vga_control_reg(0xf2);
000032D4  4878 00F2 5630          pea       242
000032D8  4EB8 26F0 5631          jsr       _set_vga_control_reg
000032DC  584F      5632          addq.w    #4,A7
                    5633   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5634   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5635   main_4:
000032DE  1039 0040 5636          move.b    4194306,D0
000032E2  0002      
000032E4  C03C 0002 5637          and.b     #2,D0
000032E8  0C00 0002 5638          cmp.b     #2,D0
000032EC  662A      5639          bne.s     main_6
                    5640   ; LoadFromFlashChip();
000032EE  4EB8 110E 5641          jsr       _LoadFromFlashChip
                    5642   ; printf("\r\nRunning.....") ;
000032F2  4879 0000 5643          pea       @final_~1_141.L
000032F6  4EC8      
000032F8  4E92      5644          jsr       (A2)
000032FA  584F      5645          addq.w    #4,A7
                    5646   ; Oline1("Running.....") ;
000032FC  4879 0000 5647          pea       @final_~1_142.L
00003300  4ED8      
00003302  4EB8 0A4A 5648          jsr       _Oline1
00003306  584F      5649          addq.w    #4,A7
                    5650   ; GoFlag = 1;
00003308  23FC 0000 5651          move.l    #1,_GoFlag.L
0000330C  0001 0803 
00003310  00DC      
                    5652   ; go() ;
00003312  4EB8 08B8 5653          jsr       _go
00003316  60C6      5654          bra       main_4
                    5655   main_6:
                    5656   ; }
                    5657   ; // otherwise start the debug monitor
                    5658   ; Oline0(BugMessage) ;
00003318  2F03      5659          move.l    D3,-(A7)
0000331A  4EB8 0A1C 5660          jsr       _Oline0
0000331E  584F      5661          addq.w    #4,A7
                    5662   ; Oline1("By: PJ Davies") ;
00003320  4879 0000 5663          pea       @final_~1_143.L
00003324  4EE6      
00003326  4EB8 0A4A 5664          jsr       _Oline1
0000332A  584F      5665          addq.w    #4,A7
                    5666   ; printf("\r\n%s", BugMessage) ;
0000332C  2F03      5667          move.l    D3,-(A7)
0000332E  4879 0000 5668          pea       @final_~1_144.L
00003332  4EF4      
00003334  4E92      5669          jsr       (A2)
00003336  504F      5670          addq.w    #8,A7
                    5671   ; printf("\r\n%s", CopyrightMessage) ;
00003338  2F2E FFFC 5672          move.l    -4(A6),-(A7)
0000333C  4879 0000 5673          pea       @final_~1_144.L
00003340  4EF4      
00003342  4E92      5674          jsr       (A2)
00003344  504F      5675          addq.w    #8,A7
                    5676   ; menu();
00003346  4EB8 21B6 5677          jsr       _menu
0000334A  4CDF 040C 5678          movem.l   (A7)+,D2/D3/A2
0000334E  4E5E      5679          unlk      A6
00003350  4E75      5680          rts
                    5681   ; }
                    5682   _strcpy:
00003352  206F 0004 5683          move.l    (4,A7),A0
00003356  226F 0008 5684          move.l    (8,A7),A1
0000335A  2008      5685          move.l    A0,D0
                    5686   strcpy_1:
0000335C  10D9      5687          move.b    (A1)+,(A0)+
0000335E  66FC      5688          bne       strcpy_1
00003360  4E75      5689          rts
                    5690   ULDIV:
00003362  4E56 0000 5691          link    A6,#0
00003366  48E7 C000 5692          movem.l D0/D1,-(A7)
0000336A  222E 0008 5693          move.l  8(A6),D1
0000336E  202E 000C 5694          move.l  12(A6),D0
00003372  6036      5695          bra.s   ldiv_3
                    5696   LDIV:
00003374  4E56 0000 5697          link    A6,#0
00003378  48E7 C000 5698          movem.l D0/D1,-(A7)
0000337C  222E 0008 5699          move.l  8(A6),D1
00003380  202E 000C 5700          move.l  12(A6),D0
00003384  4A80      5701          tst.l   D0
00003386  6A0E      5702          bpl.s   ldiv_1
00003388  4480      5703          neg.l   D0
0000338A  4A81      5704          tst.l   D1
0000338C  6A14      5705          bpl.s   ldiv_2
0000338E  4481      5706          neg.l   D1
00003390  612A      5707          bsr.s   dodiv
00003392  4481      5708          neg.l   D1
00003394  6016      5709          bra.s   ldiv_4
                    5710   ldiv_1:
00003396  4A81      5711          tst.l   D1
00003398  6A10      5712          bpl.s   ldiv_3
0000339A  4481      5713          neg.l   D1
0000339C  611E      5714          bsr.s   dodiv
0000339E  4480      5715          neg.l   D0
000033A0  600A      5716          bra.s   ldiv_4
                    5717   ldiv_2:
000033A2  6118      5718          bsr.s   dodiv
000033A4  4480      5719          neg.l   D0
000033A6  4481      5720          neg.l   D1
000033A8  6002      5721          bra.s   ldiv_4
                    5722   ldiv_3:
000033AA  6110      5723          bsr.s   dodiv
                    5724   ldiv_4:
000033AC  2D40 0008 5725          move.l  D0,8(A6)
000033B0  2D41 000C 5726          move.l  D1,12(A6)
000033B4  4CDF 0003 5727          movem.l (A7)+,D0/D1
000033B8  4E5E      5728          unlk    A6
000033BA  4E75      5729          rts
                    5730   dodiv:
000033BC  0C81 0000 5731          cmpi.l  #$FFFF,D1
000033C0  FFFF      
000033C2  6236      5732          bhi.s   dodiv_2
000033C4  0C80 0000 5733          cmpi.l  #$FFFF,D0
000033C8  FFFF      
000033CA  6210      5734          bhi.s   dodiv_1
000033CC  80C1      5735          divu    D1,D0
000033CE  2200      5736          move.l  D0,D1
000033D0  4241      5737          clr.w   D1
000033D2  4841      5738          swap    D1
000033D4  0280 0000 5739          andi.l  #$FFFF,D0
000033D8  FFFF      
000033DA  4E75      5740          rts
                    5741   dodiv_1:
000033DC  48A7 A000 5742          movem.w D0/D2,-(A7)
000033E0  4240      5743          clr.w   D0
000033E2  4840      5744          swap    D0
000033E4  80C1      5745          divu    D1,D0
000033E6  3400      5746          move.w  D0,D2
000033E8  301F      5747          move.w  (A7)+,D0
000033EA  80C1      5748          divu    D1,D0
000033EC  4840      5749          swap    D0
000033EE  4281      5750          clr.l   D1
000033F0  3200      5751          move.w  D0,D1
000033F2  3002      5752          move.w  D2,D0
000033F4  4840      5753          swap    D0
000033F6  341F      5754          move.w  (A7)+,D2
000033F8  4E75      5755          rts
                    5756   dodiv_2:
000033FA  48E7 3800 5757          movem.l D2/D3/D4,-(A7)
000033FE  2401      5758          move.l  D1,D2
00003400  4242      5759          clr.w   D2
00003402  4842      5760          swap    D2
00003404  5282      5761          addq.l  #1,D2
00003406  2600      5762          move.l  D0,D3
00003408  2801      5763          move.l  D1,D4
0000340A  2202      5764          move.l  D2,D1
0000340C  61CE      5765          bsr.s   dodiv_1
0000340E  2204      5766          move.l  D4,D1
00003410  82C2      5767          divu    D2,D1
00003412  80C1      5768          divu    D1,D0
00003414  0280 0000 5769          andi.l  #$FFFF,D0
00003418  FFFF      
                    5770   dodiv_3:
0000341A  2204      5771          move.l  D4,D1
0000341C  2404      5772          move.l  D4,D2
0000341E  4842      5773          swap    D2
00003420  C2C0      5774          mulu    D0,D1
00003422  C4C0      5775          mulu    D0,D2
00003424  4842      5776          swap    D2
00003426  D282      5777          add.l   D2,D1
00003428  9283      5778          sub.l   D3,D1
0000342A  620A      5779          bhi.s   dodiv_4
0000342C  4481      5780          neg.l   D1
0000342E  B881      5781          cmp.l   D1,D4
00003430  6208      5782          bhi.s   dodiv_5
00003432  5280      5783          addq.l  #1,D0
00003434  60E4      5784          bra.s   dodiv_3
                    5785   dodiv_4:
00003436  5380      5786          subq.l  #1,D0
00003438  60E0      5787          bra.s   dodiv_3
                    5788   dodiv_5:
0000343A  4CDF 001C 5789          movem.l (A7)+,D2/D3/D4
0000343E  4E75      5790          rts
                    5791   ULMUL:
00003440  4E56 0000 5792          link    A6,#0
00003444  48E7 C000 5793          movem.l D0/D1,-(A7)
00003448  222E 0008 5794          move.l  8(A6),D1
0000344C  202E 000C 5795          move.l  12(A6),D0
00003450  602C      5796          bra.s   lmul_3
                    5797   LMUL:
00003452  4E56 0000 5798          link    A6,#0
00003456  48E7 C000 5799          movem.l D0/D1,-(A7)
0000345A  222E 0008 5800          move.l  8(A6),D1
0000345E  202E 000C 5801          move.l  12(A6),D0
00003462  4A80      5802          tst.l   D0
00003464  6A0A      5803          bpl.s   lmul_1
00003466  4480      5804          neg.l   D0
00003468  4A81      5805          tst.l   D1
0000346A  6A0A      5806          bpl.s   lmul_2
0000346C  4481      5807          neg.l   D1
0000346E  600E      5808          bra.s   lmul_3
                    5809   lmul_1:
00003470  4A81      5810          tst.l   D1
00003472  6A0A      5811          bpl.s   lmul_3
00003474  4481      5812          neg.l   D1
                    5813   lmul_2:
00003476  6114      5814          bsr.s   domul
00003478  4481      5815          neg.l   D1
0000347A  4080      5816          negx.l  D0
0000347C  6002      5817          bra.s   lmul_4
                    5818   lmul_3:
0000347E  610C      5819          bsr.s   domul
                    5820   lmul_4:
00003480  2D41 0008 5821          move.l  D1,8(A6)
00003484  4CDF 0003 5822          movem.l (A7)+,D0/D1
00003488  4E5E      5823          unlk    A6
0000348A  4E75      5824          rts
                    5825   domul:
0000348C  0C81 0000 5826          cmpi.l  #$FFFF,D1
00003490  FFFF      
00003492  620C      5827          bhi.s   domul_1
00003494  0C80 0000 5828          cmpi.l  #$FFFF,D0
00003498  FFFF      
0000349A  620E      5829          bhi.s   domul_2
0000349C  C2C0      5830          mulu    D0,D1
0000349E  4E75      5831          rts
                    5832   domul_1:
000034A0  0C80 0000 5833          cmpi.l  #$FFFF,D0
000034A4  FFFF      
000034A6  6218      5834          bhi.s   domul_4
000034A8  6002      5835          bra.s   domul_3
                    5836   domul_2
000034AA  C141      5837          exg     D0,D1
                    5838   domul_3:
000034AC  2F02      5839          move.l  D2,-(A7)
000034AE  2401      5840          move.l  D1,D2
000034B0  4842      5841          swap    D2
000034B2  C2C0      5842          mulu    D0,D1
000034B4  C4C0      5843          mulu    D0,D2
000034B6  4842      5844          swap    D2
000034B8  4242      5845          clr.w   D2
000034BA  D282      5846          add.l   D2,D1
000034BC  241F      5847          move.l  (A7)+,D2
000034BE  4E75      5848          rts
                    5849   domul_4:
000034C0  48E7 3000 5850          movem.l D2/D3,-(A7)
000034C4  2401      5851          move.l  D1,D2
000034C6  2601      5852          move.l  D1,D3
000034C8  C2C0      5853          mulu    D0,D1
000034CA  4842      5854          swap    D2
000034CC  C4C0      5855          mulu    D0,D2
000034CE  4840      5856          swap    D0
000034D0  C6C0      5857          mulu    D0,D3
000034D2  D483      5858          add.l   D3,D2
000034D4  4842      5859          swap    D2
000034D6  4242      5860          clr.w   D2
000034D8  D282      5861          add.l   D2,D1
000034DA  4CDF 000C 5862          movem.l (A7)+,D2/D3
000034DE  4E75      5863          rts
                    5864   _strlen:
000034E0  206F 0004 5865          move.l    (4,A7),A0
000034E4  2248      5866          move.l    A0,A1
                    5867   strlen_1:
000034E6  4A19      5868          tst.b     (A1)+
000034E8  66FC      5869          bne       strlen_1
000034EA  2009      5870          move.l    A1,D0
000034EC  9088      5871          sub.l     A0,D0
000034EE  5380      5872          subq.l    #1,D0
000034F0  4E75      5873          rts
                    5874   _putch:
000034F2  4E56 0000 5875          link      A6,#0
000034F6  48E7 2000 5876          movem.l   D2,-(A7)
000034FA  242E 0008 5877          move.l    8(A6),D2
000034FE  0C82 0000 5878          cmp.l     #10,D2
00003502  000A      
00003504  660A      5879          bne.s     putch_1
00003506  4878 000D 5880          pea       13
0000350A  6100 D678 5881          bsr       __putch
0000350E  584F      5882          addq.w    #4,A7
                    5883   putch_1:
00003510  2F02      5884          move.l    D2,-(A7)
00003512  6100 D670 5885          bsr       __putch
00003516  584F      5886          addq.w    #4,A7
00003518  2002      5887          move.l    D2,D0
0000351A  4CDF 0004 5888          movem.l   (A7)+,D2
0000351E  4E5E      5889          unlk      A6
00003520  4E75      5890          rts
                    5891   _getch:
00003522  48E7 2000 5892          movem.l   D2,-(A7)
00003526  2439 0803 5893          move.l    __ungetbuf,D2
0000352A  00C0      
0000352C  2039 0803 5894          move.l    __ungetbuf,D0
00003530  00C0      
00003532  0C80 FFFF 5895          cmp.l     #-1,D0
00003536  FFFF      
00003538  670C      5896          beq.s     getch_1
0000353A  23FC FFFF 5897          move.l    #-1,__ungetbuf
0000353E  FFFF 0803 
00003542  00C0      
00003544  6010      5898          bra.s     getch_3
                    5899   getch_1:
00003546  6100 D668 5900          bsr       __getch
0000354A  2400      5901          move.l    D0,D2
0000354C  0C80 0000 5902          cmp.l     #13,D0
00003550  000D      
00003552  6602      5903          bne.s     getch_3
00003554  740A      5904          moveq     #10,D2
                    5905   getch_3:
00003556  2002      5906          move.l    D2,D0
00003558  4CDF 0004 5907          movem.l   (A7)+,D2
0000355C  4E75      5908          rts
                    5909   _tolower:
0000355E  4E56 0000 5910          link      A6,#0
00003562  48E7 2000 5911          movem.l   D2,-(A7)
00003566  242E 0008 5912          move.l    8(A6),D2
0000356A  0C82 0000 5913          cmp.l     #65,D2
0000356E  0041      
00003570  6D0E      5914          blt.s     tolower_1
00003572  0C82 0000 5915          cmp.l     #90,D2
00003576  005A      
00003578  6E06      5916          bgt.s     tolower_1
0000357A  84BC 0000 5917          or.l      #32,D2
0000357E  0020      
                    5918   tolower_1:
00003580  2002      5919          move.l    D2,D0
00003582  4CDF 0004 5920          movem.l   (A7)+,D2
00003586  4E5E      5921          unlk      A6
00003588  4E75      5922          rts
                    5923   _sprintf:
0000358A  4E56 FFFC 5924          link      A6,#-4
0000358E  48E7 2000 5925          movem.l   D2,-(A7)
00003592  41EE 000C 5926          lea       12(A6),A0
00003596  5848      5927          addq.w    #4,A0
00003598  2408      5928          move.l    A0,D2
0000359A  2F02      5929          move.l    D2,-(A7)
0000359C  2F2E 000C 5930          move.l    12(A6),-(A7)
000035A0  2F2E 0008 5931          move.l    8(A6),-(A7)
000035A4  6100 0156 5932          bsr       _vsprintf
000035A8  DEFC 000C 5933          add.w     #12,A7
000035AC  2D40 FFFC 5934          move.l    D0,-4(A6)
000035B0  4282      5935          clr.l     D2
000035B2  202E FFFC 5936          move.l    -4(A6),D0
000035B6  4CDF 0004 5937          movem.l   (A7)+,D2
000035BA  4E5E      5938          unlk      A6
000035BC  4E75      5939          rts
                    5940   _memset:
000035BE  206F 0004 5941          move.l    (4,A7),A0
000035C2  202F 0008 5942          move.l    (8,A7),D0
000035C6  222F 000C 5943          move.l    (12,A7),D1
000035CA  2248      5944          move.l    A0,A1	
                    5945   memset_1:
000035CC  12C0      5946          move.b    D0,(A1)+
000035CE  5341      5947          subq      #1,D1
000035D0  66FA      5948          bne       memset_1
000035D2  2008      5949          move.l    A0,D0
000035D4  4E75      5950          rts
                    5951   _strcat:
000035D6  206F 0004 5952          move.l    (4,A7),A0	
000035DA  226F 0008 5953          move.l    (8,A7),A1	
000035DE  2008      5954          move.l    A0,D0		
                    5955   strcat_0:
000035E0  4A18      5956          tst.b     (A0)+
000035E2  66FC      5957          bne       strcat_0
000035E4  5348      5958          subq      #1,A0
                    5959   strcat_1:
000035E6  10D9      5960          move.b    (A1)+,(A0)+
000035E8  66FC      5961          bne       strcat_1
000035EA  4E75      5962          rts
                    5963   _toupper:
000035EC  4E56 0000 5964          link      A6,#0
000035F0  48E7 2000 5965          movem.l   D2,-(A7)
000035F4  242E 0008 5966          move.l    8(A6),D2
000035F8  0C82 0000 5967          cmp.l     #97,D2
000035FC  0061      
000035FE  6D0E      5968          blt.s     toupper_1
00003600  0C82 0000 5969          cmp.l     #122,D2
00003604  007A      
00003606  6E06      5970          bgt.s     toupper_1
00003608  C4BC 0000 5971          and.l     #95,D2
0000360C  005F      
                    5972   toupper_1:
0000360E  2002      5973          move.l    D2,D0
00003610  4CDF 0004 5974          movem.l   (A7)+,D2
00003614  4E5E      5975          unlk      A6
00003616  4E75      5976          rts
                    5977   _printf:
00003618  4E56 FFFC 5978          link      A6,#-4
0000361C  48E7 2000 5979          movem.l   D2,-(A7)
00003620  41EE 0008 5980          lea       8(A6),A0
00003624  5848      5981          addq.w    #4,A0
00003626  2408      5982          move.l    A0,D2
00003628  2F02      5983          move.l    D2,-(A7)
0000362A  2F2E 0008 5984          move.l    8(A6),-(A7)
0000362E  42A7      5985          clr.l     -(A7)
00003630  6100 00CA 5986          bsr       _vsprintf
00003634  DEFC 000C 5987          add.w     #12,A7
00003638  2D40 FFFC 5988          move.l    D0,-4(A6)
0000363C  4282      5989          clr.l     D2
0000363E  202E FFFC 5990          move.l    -4(A6),D0
00003642  4CDF 0004 5991          movem.l   (A7)+,D2
00003646  4E5E      5992          unlk      A6
00003648  4E75      5993          rts
                    5994   @vsprintf_copy:
0000364A  4E56 0000 5995          link      A6,#0
0000364E  206E 0008 5996          move.l    8(A6),A0
00003652  4A90      5997          tst.l     (A0)
00003654  6710      5998          beq.s     @vsprintf_copy_1
00003656  202E 000C 5999          move.l    12(A6),D0
0000365A  206E 0008 6000          move.l    8(A6),A0
0000365E  2250      6001          move.l    (A0),A1
00003660  5290      6002          addq.l    #1,(A0)
00003662  1280      6003          move.b    D0,(A1)
00003664  600A      6004          bra.s     @vsprintf_copy_2
                    6005   @vsprintf_copy_1:
00003666  2F2E 000C 6006          move.l    12(A6),-(A7)
0000366A  6100 FE86 6007          bsr       _putch
0000366E  584F      6008          addq.w    #4,A7
                    6009   @vsprintf_copy_2:
00003670  4E5E      6010          unlk      A6
00003672  4E75      6011          rts
                    6012   @vsprintf_getval:
00003674  4E56 0000 6013          link      A6,#0
00003678  48E7 3000 6014          movem.l   D2/D3,-(A7)
0000367C  242E 0008 6015          move.l    8(A6),D2
00003680  4283      6016          clr.l     D3
00003682  2042      6017          move.l    D2,A0
00003684  2050      6018          move.l    (A0),A0
00003686  1010      6019          move.b    (A0),D0
00003688  4880      6020          ext.w     D0
0000368A  48C0      6021          ext.l     D0
0000368C  0C80 0000 6022          cmp.l     #42,D0
00003690  002A      
00003692  6612      6023          bne.s     @vsprintf_getval_1
00003694  206E 000C 6024          move.l    12(A6),A0
00003698  2250      6025          move.l    (A0),A1
0000369A  5890      6026          addq.l    #4,(A0)
0000369C  2611      6027          move.l    (A1),D3
0000369E  2042      6028          move.l    D2,A0
000036A0  5290      6029          addq.l    #1,(A0)
000036A2  6000 004E 6030          bra       @vsprintf_getval_5
                    6031   @vsprintf_getval_1:
000036A6  2042      6032          move.l    D2,A0
000036A8  2050      6033          move.l    (A0),A0
000036AA  1010      6034          move.b    (A0),D0
000036AC  4880      6035          ext.w     D0
000036AE  48C0      6036          ext.l     D0
000036B0  0C80 0000 6037          cmp.l     #48,D0
000036B4  0030      
000036B6  6D00 003A 6038          blt       @vsprintf_getval_5
000036BA  2042      6039          move.l    D2,A0
000036BC  2050      6040          move.l    (A0),A0
000036BE  1010      6041          move.b    (A0),D0
000036C0  4880      6042          ext.w     D0
000036C2  48C0      6043          ext.l     D0
000036C4  0C80 0000 6044          cmp.l     #57,D0
000036C8  0039      
000036CA  6E26      6045          bgt.s     @vsprintf_getval_5
000036CC  2F03      6046          move.l    D3,-(A7)
000036CE  4878 000A 6047          pea       10
000036D2  6100 FD7E 6048          bsr       LMUL
000036D6  2017      6049          move.l    (A7),D0
000036D8  504F      6050          addq.w    #8,A7
000036DA  2042      6051          move.l    D2,A0
000036DC  2250      6052          move.l    (A0),A1
000036DE  5290      6053          addq.l    #1,(A0)
000036E0  1211      6054          move.b    (A1),D1
000036E2  4881      6055          ext.w     D1
000036E4  48C1      6056          ext.l     D1
000036E6  D081      6057          add.l     D1,D0
000036E8  0480 0000 6058          sub.l     #48,D0
000036EC  0030      
000036EE  2600      6059          move.l    D0,D3
000036F0  60B4      6060          bra       @vsprintf_getval_1
                    6061   @vsprintf_getval_5:
000036F2  2003      6062          move.l    D3,D0
000036F4  4CDF 000C 6063          movem.l   (A7)+,D2/D3
000036F8  4E5E      6064          unlk      A6
000036FA  4E75      6065          rts
                    6066   _vsprintf:
000036FC  4E56 FFCC 6067          link      A6,#-52
00003700  48E7 3F3C 6068          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003704  45EE 0008 6069          lea       8(A6),A2
00003708  47F8 364A 6070          lea       @vsprintf_copy,A3
0000370C  49F9 0000 6071          lea       _ultoa,A4
00003710  3E54      
00003712  4286      6072          clr.l     D6
                    6073   vsprintf_1:
00003714  206E 000C 6074          move.l    12(A6),A0
00003718  4A10      6075          tst.b     (A0)
0000371A  6700 0624 6076          beq       vsprintf_3
0000371E  206E 000C 6077          move.l    12(A6),A0
00003722  1010      6078          move.b    (A0),D0
00003724  4880      6079          ext.w     D0
00003726  48C0      6080          ext.l     D0
00003728  0C80 0000 6081          cmp.l     #37,D0
0000372C  0025      
0000372E  671C      6082          beq.s     vsprintf_4
00003730  206E 000C 6083          move.l    12(A6),A0
00003734  52AE 000C 6084          addq.l    #1,12(A6)
00003738  1210      6085          move.b    (A0),D1
0000373A  4881      6086          ext.w     D1
0000373C  48C1      6087          ext.l     D1
0000373E  2F01      6088          move.l    D1,-(A7)
00003740  2F0A      6089          move.l    A2,-(A7)
00003742  4E93      6090          jsr       (A3)
00003744  504F      6091          addq.w    #8,A7
00003746  5286      6092          addq.l    #1,D6
00003748  6000 05F2 6093          bra       vsprintf_2
                    6094   vsprintf_4:
0000374C  52AE 000C 6095          addq.l    #1,12(A6)
00003750  422E FFD3 6096          clr.b     -45(A6)
00003754  422E FFD2 6097          clr.b     -46(A6)
00003758  422E FFD0 6098          clr.b     -48(A6)
0000375C  422E FFCF 6099          clr.b     -49(A6)
00003760  422E FFCE 6100          clr.b     -50(A6)
00003764  422E FFCD 6101          clr.b     -51(A6)
00003768  42AE FFFC 6102          clr.l     -4(A6)
0000376C  7AFF      6103          moveq     #-1,D5
0000376E  41EE FFDC 6104          lea       -36(A6),A0
00003772  2608      6105          move.l    A0,D3
00003774  2408      6106          move.l    A0,D2
                    6107   vsprintf_6:
00003776  206E 000C 6108          move.l    12(A6),A0
0000377A  1010      6109          move.b    (A0),D0
0000377C  4880      6110          ext.w     D0
0000377E  48C0      6111          ext.l     D0
00003780  0C80 0000 6112          cmp.l     #43,D0
00003784  002B      
00003786  6730      6113          beq.s     vsprintf_12
00003788  6E18      6114          bgt.s     vsprintf_15
0000378A  0C80 0000 6115          cmp.l     #35,D0
0000378E  0023      
00003790  6700 003E 6116          beq       vsprintf_14
00003794  6E00 0046 6117          bgt       vsprintf_9
00003798  0C80 0000 6118          cmp.l     #32,D0
0000379C  0020      
0000379E  6724      6119          beq.s     vsprintf_13
000037A0  603A      6120          bra.s     vsprintf_9
                    6121   vsprintf_15:
000037A2  0C80 0000 6122          cmp.l     #45,D0
000037A6  002D      
000037A8  6702      6123          beq.s     vsprintf_11
000037AA  6030      6124          bra.s     vsprintf_9
                    6125   vsprintf_11:
000037AC  1D7C 0001 6126          move.b    #1,-51(A6)
000037B0  FFCD      
000037B2  52AE 000C 6127          addq.l    #1,12(A6)
000037B6  6026      6128          bra.s     vsprintf_7
                    6129   vsprintf_12:
000037B8  1D7C 0001 6130          move.b    #1,-50(A6)
000037BC  FFCE      
000037BE  52AE 000C 6131          addq.l    #1,12(A6)
000037C2  601A      6132          bra.s     vsprintf_7
                    6133   vsprintf_13:
000037C4  1D7C 0001 6134          move.b    #1,-49(A6)
000037C8  FFCF      
000037CA  52AE 000C 6135          addq.l    #1,12(A6)
000037CE  600E      6136          bra.s     vsprintf_7
                    6137   vsprintf_14:
000037D0  1D7C 0001 6138          move.b    #1,-48(A6)
000037D4  FFD0      
000037D6  52AE 000C 6139          addq.l    #1,12(A6)
000037DA  6002      6140          bra.s     vsprintf_7
                    6141   vsprintf_9:
000037DC  6002      6142          bra.s     vsprintf_8
                    6143   vsprintf_7:
000037DE  6096      6144          bra       vsprintf_6
                    6145   vsprintf_8:
000037E0  206E 000C 6146          move.l    12(A6),A0
000037E4  1010      6147          move.b    (A0),D0
000037E6  4880      6148          ext.w     D0
000037E8  48C0      6149          ext.l     D0
000037EA  0C80 0000 6150          cmp.l     #48,D0
000037EE  0030      
000037F0  660A      6151          bne.s     vsprintf_16
000037F2  52AE 000C 6152          addq.l    #1,12(A6)
000037F6  1D7C 0001 6153          move.b    #1,-46(A6)
000037FA  FFD2      
                    6154   vsprintf_16:
000037FC  486E 0010 6155          pea       16(A6)
00003800  486E 000C 6156          pea       12(A6)
00003804  6100 FE6E 6157          bsr       @vsprintf_getval
00003808  504F      6158          addq.w    #8,A7
0000380A  2A40      6159          move.l    D0,A5
0000380C  206E 000C 6160          move.l    12(A6),A0
00003810  1010      6161          move.b    (A0),D0
00003812  4880      6162          ext.w     D0
00003814  48C0      6163          ext.l     D0
00003816  0C80 0000 6164          cmp.l     #46,D0
0000381A  002E      
0000381C  6614      6165          bne.s     vsprintf_18
0000381E  52AE 000C 6166          addq.l    #1,12(A6)
00003822  486E 0010 6167          pea       16(A6)
00003826  486E 000C 6168          pea       12(A6)
0000382A  6100 FE48 6169          bsr       @vsprintf_getval
0000382E  504F      6170          addq.w    #8,A7
00003830  2A00      6171          move.l    D0,D5
                    6172   vsprintf_18:
00003832  206E 000C 6173          move.l    12(A6),A0
00003836  1010      6174          move.b    (A0),D0
00003838  4880      6175          ext.w     D0
0000383A  48C0      6176          ext.l     D0
0000383C  0C80 0000 6177          cmp.l     #108,D0
00003840  006C      
00003842  660A      6178          bne.s     vsprintf_20
00003844  52AE 000C 6179          addq.l    #1,12(A6)
00003848  1D7C 0001 6180          move.b    #1,-45(A6)
0000384C  FFD3      
                    6181   vsprintf_20:
0000384E  206E 000C 6182          move.l    12(A6),A0
00003852  1010      6183          move.b    (A0),D0
00003854  4880      6184          ext.w     D0
00003856  48C0      6185          ext.l     D0
00003858  0C80 0000 6186          cmp.l     #111,D0
0000385C  006F      
0000385E  6700 00D4 6187          beq       vsprintf_27
00003862  6E34      6188          bgt.s     vsprintf_33
00003864  0C80 0000 6189          cmp.l     #100,D0
00003868  0064      
0000386A  6700 0054 6190          beq       vsprintf_24
0000386E  6E1C      6191          bgt.s     vsprintf_34
00003870  0C80 0000 6192          cmp.l     #99,D0
00003874  0063      
00003876  6700 012C 6193          beq       vsprintf_30
0000387A  6E00 016A 6194          bgt       vsprintf_22
0000387E  0C80 0000 6195          cmp.l     #88,D0
00003882  0058      
00003884  6700 00E6 6196          beq       vsprintf_28
00003888  6000 015C 6197          bra       vsprintf_22
                    6198   vsprintf_34:
0000388C  0C80 0000 6199          cmp.l     #105,D0
00003890  0069      
00003892  672C      6200          beq.s     vsprintf_24
00003894  6000 0150 6201          bra       vsprintf_22
                    6202   vsprintf_33:
00003898  0C80 0000 6203          cmp.l     #117,D0
0000389C  0075      
0000389E  6700 005C 6204          beq       vsprintf_26
000038A2  6E0E      6205          bgt.s     vsprintf_35
000038A4  0C80 0000 6206          cmp.l     #115,D0
000038A8  0073      
000038AA  6700 011C 6207          beq       vsprintf_31
000038AE  6000 0136 6208          bra       vsprintf_22
                    6209   vsprintf_35:
000038B2  0C80 0000 6210          cmp.l     #120,D0
000038B6  0078      
000038B8  6700 00B2 6211          beq       vsprintf_28
000038BC  6000 0128 6212          bra       vsprintf_22
                    6213   vsprintf_24:
000038C0  4A2E FFD3 6214          tst.b     -45(A6)
000038C4  671A      6215          beq.s     vsprintf_36
000038C6  4878 000A 6216          pea       10
000038CA  2F03      6217          move.l    D3,-(A7)
000038CC  206E 0010 6218          move.l    16(A6),A0
000038D0  58AE 0010 6219          addq.l    #4,16(A6)
000038D4  2F10      6220          move.l    (A0),-(A7)
000038D6  6100 04F8 6221          bsr       _ltoa
000038DA  DEFC 000C 6222          add.w     #12,A7
000038DE  6018      6223          bra.s     vsprintf_37
                    6224   vsprintf_36:
000038E0  4878 000A 6225          pea       10
000038E4  2F03      6226          move.l    D3,-(A7)
000038E6  206E 0010 6227          move.l    16(A6),A0
000038EA  58AE 0010 6228          addq.l    #4,16(A6)
000038EE  2F10      6229          move.l    (A0),-(A7)
000038F0  6100 04DE 6230          bsr       _ltoa
000038F4  DEFC 000C 6231          add.w     #12,A7
                    6232   vsprintf_37:
000038F8  6000 00FA 6233          bra       vsprintf_23
                    6234   vsprintf_26:
000038FC  4A2E FFD3 6235          tst.b     -45(A6)
00003900  6718      6236          beq.s     vsprintf_38
00003902  4878 000A 6237          pea       10
00003906  2F03      6238          move.l    D3,-(A7)
00003908  206E 0010 6239          move.l    16(A6),A0
0000390C  58AE 0010 6240          addq.l    #4,16(A6)
00003910  2F10      6241          move.l    (A0),-(A7)
00003912  4E94      6242          jsr       (A4)
00003914  DEFC 000C 6243          add.w     #12,A7
00003918  6016      6244          bra.s     vsprintf_39
                    6245   vsprintf_38:
0000391A  4878 000A 6246          pea       10
0000391E  2F03      6247          move.l    D3,-(A7)
00003920  206E 0010 6248          move.l    16(A6),A0
00003924  58AE 0010 6249          addq.l    #4,16(A6)
00003928  2F10      6250          move.l    (A0),-(A7)
0000392A  4E94      6251          jsr       (A4)
0000392C  DEFC 000C 6252          add.w     #12,A7
                    6253   vsprintf_39:
00003930  6000 00C2 6254          bra       vsprintf_23
                    6255   vsprintf_27:
00003934  4A2E FFD3 6256          tst.b     -45(A6)
00003938  6718      6257          beq.s     vsprintf_40
0000393A  4878 0008 6258          pea       8
0000393E  2F03      6259          move.l    D3,-(A7)
00003940  206E 0010 6260          move.l    16(A6),A0
00003944  58AE 0010 6261          addq.l    #4,16(A6)
00003948  2F10      6262          move.l    (A0),-(A7)
0000394A  4E94      6263          jsr       (A4)
0000394C  DEFC 000C 6264          add.w     #12,A7
00003950  6016      6265          bra.s     vsprintf_41
                    6266   vsprintf_40:
00003952  4878 0008 6267          pea       8
00003956  2F03      6268          move.l    D3,-(A7)
00003958  206E 0010 6269          move.l    16(A6),A0
0000395C  58AE 0010 6270          addq.l    #4,16(A6)
00003960  2F10      6271          move.l    (A0),-(A7)
00003962  4E94      6272          jsr       (A4)
00003964  DEFC 000C 6273          add.w     #12,A7
                    6274   vsprintf_41:
00003968  6000 008A 6275          bra       vsprintf_23
                    6276   vsprintf_28:
0000396C  4A2E FFD3 6277          tst.b     -45(A6)
00003970  6718      6278          beq.s     vsprintf_42
00003972  4878 0010 6279          pea       16
00003976  2F03      6280          move.l    D3,-(A7)
00003978  206E 0010 6281          move.l    16(A6),A0
0000397C  58AE 0010 6282          addq.l    #4,16(A6)
00003980  2F10      6283          move.l    (A0),-(A7)
00003982  4E94      6284          jsr       (A4)
00003984  DEFC 000C 6285          add.w     #12,A7
00003988  6016      6286          bra.s     vsprintf_43
                    6287   vsprintf_42:
0000398A  4878 0010 6288          pea       16
0000398E  2F03      6289          move.l    D3,-(A7)
00003990  206E 0010 6290          move.l    16(A6),A0
00003994  58AE 0010 6291          addq.l    #4,16(A6)
00003998  2F10      6292          move.l    (A0),-(A7)
0000399A  4E94      6293          jsr       (A4)
0000399C  DEFC 000C 6294          add.w     #12,A7
                    6295   vsprintf_43:
000039A0  6000 0052 6296          bra       vsprintf_23
                    6297   vsprintf_30:
000039A4  206E 0010 6298          move.l    16(A6),A0
000039A8  58AE 0010 6299          addq.l    #4,16(A6)
000039AC  2010      6300          move.l    (A0),D0
000039AE  2042      6301          move.l    D2,A0
000039B0  5282      6302          addq.l    #1,D2
000039B2  1080      6303          move.b    D0,(A0)
000039B4  2042      6304          move.l    D2,A0
000039B6  4210      6305          clr.b     (A0)
000039B8  200D      6306          move.l    A5,D0
000039BA  6704      6307          beq.s     vsprintf_44
000039BC  200D      6308          move.l    A5,D0
000039BE  6002      6309          bra.s     vsprintf_45
                    6310   vsprintf_44:
000039C0  7001      6311          moveq     #1,D0
                    6312   vsprintf_45:
000039C2  2A00      6313          move.l    D0,D5
000039C4  6000 002E 6314          bra       vsprintf_23
                    6315   vsprintf_31:
000039C8  206E 0010 6316          move.l    16(A6),A0
000039CC  58AE 0010 6317          addq.l    #4,16(A6)
000039D0  2610      6318          move.l    (A0),D3
000039D2  0C85 FFFF 6319          cmp.l     #-1,D5
000039D6  FFFF      
000039D8  660A      6320          bne.s     vsprintf_46
000039DA  2F03      6321          move.l    D3,-(A7)
000039DC  6100 FB02 6322          bsr       _strlen
000039E0  584F      6323          addq.w    #4,A7
000039E2  2A00      6324          move.l    D0,D5
                    6325   vsprintf_46:
000039E4  600E      6326          bra.s     vsprintf_23
                    6327   vsprintf_22:
000039E6  206E 000C 6328          move.l    12(A6),A0
000039EA  2242      6329          move.l    D2,A1
000039EC  5282      6330          addq.l    #1,D2
000039EE  1290      6331          move.b    (A0),(A1)
000039F0  2042      6332          move.l    D2,A0
000039F2  4210      6333          clr.b     (A0)
                    6334   vsprintf_23:
000039F4  2F03      6335          move.l    D3,-(A7)
000039F6  6100 FAE8 6336          bsr       _strlen
000039FA  584F      6337          addq.w    #4,A7
000039FC  1800      6338          move.b    D0,D4
000039FE  206E 000C 6339          move.l    12(A6),A0
00003A02  1010      6340          move.b    (A0),D0
00003A04  4880      6341          ext.w     D0
00003A06  48C0      6342          ext.l     D0
00003A08  0C80 0000 6343          cmp.l     #115,D0
00003A0C  0073      
00003A0E  6618      6344          bne.s     vsprintf_48
00003A10  0C85 0000 6345          cmp.l     #0,D5
00003A14  0000      
00003A16  6D10      6346          blt.s     vsprintf_48
00003A18  4884      6347          ext.w     D4
00003A1A  48C4      6348          ext.l     D4
00003A1C  B885      6349          cmp.l     D5,D4
00003A1E  6F04      6350          ble.s     vsprintf_50
00003A20  1005      6351          move.b    D5,D0
00003A22  6002      6352          bra.s     vsprintf_51
                    6353   vsprintf_50:
00003A24  1004      6354          move.b    D4,D0
                    6355   vsprintf_51:
00003A26  1800      6356          move.b    D0,D4
                    6357   vsprintf_48:
00003A28  206E 000C 6358          move.l    12(A6),A0
00003A2C  1010      6359          move.b    (A0),D0
00003A2E  4880      6360          ext.w     D0
00003A30  48C0      6361          ext.l     D0
00003A32  0C80 0000 6362          cmp.l     #88,D0
00003A36  0058      
00003A38  6600 0026 6363          bne       vsprintf_56
00003A3C  41EE FFDC 6364          lea       -36(A6),A0
00003A40  2408      6365          move.l    A0,D2
                    6366   vsprintf_54:
00003A42  2042      6367          move.l    D2,A0
00003A44  4A10      6368          tst.b     (A0)
00003A46  6718      6369          beq.s     vsprintf_56
00003A48  2042      6370          move.l    D2,A0
00003A4A  1210      6371          move.b    (A0),D1
00003A4C  4881      6372          ext.w     D1
00003A4E  48C1      6373          ext.l     D1
00003A50  2F01      6374          move.l    D1,-(A7)
00003A52  6100 FB98 6375          bsr       _toupper
00003A56  584F      6376          addq.w    #4,A7
00003A58  2042      6377          move.l    D2,A0
00003A5A  1080      6378          move.b    D0,(A0)
00003A5C  5282      6379          addq.l    #1,D2
00003A5E  60E2      6380          bra       vsprintf_54
                    6381   vsprintf_56:
00003A60  7E00      6382          moveq     #0,D7
00003A62  41EE FFD4 6383          lea       -44(A6),A0
00003A66  2408      6384          move.l    A0,D2
00003A68  206E 000C 6385          move.l    12(A6),A0
00003A6C  1010      6386          move.b    (A0),D0
00003A6E  4880      6387          ext.w     D0
00003A70  48C0      6388          ext.l     D0
00003A72  0C80 0000 6389          cmp.l     #100,D0
00003A76  0064      
00003A78  6714      6390          beq.s     vsprintf_59
00003A7A  206E 000C 6391          move.l    12(A6),A0
00003A7E  1010      6392          move.b    (A0),D0
00003A80  4880      6393          ext.w     D0
00003A82  48C0      6394          ext.l     D0
00003A84  0C80 0000 6395          cmp.l     #105,D0
00003A88  0069      
00003A8A  6600 0076 6396          bne       vsprintf_65
                    6397   vsprintf_59:
00003A8E  4A2E FFCE 6398          tst.b     -50(A6)
00003A92  6612      6399          bne.s     vsprintf_62
00003A94  2043      6400          move.l    D3,A0
00003A96  1010      6401          move.b    (A0),D0
00003A98  4880      6402          ext.w     D0
00003A9A  48C0      6403          ext.l     D0
00003A9C  0C80 0000 6404          cmp.l     #45,D0
00003AA0  002D      
00003AA2  6600 002E 6405          bne       vsprintf_60
                    6406   vsprintf_62:
00003AA6  2043      6407          move.l    D3,A0
00003AA8  1010      6408          move.b    (A0),D0
00003AAA  4880      6409          ext.w     D0
00003AAC  48C0      6410          ext.l     D0
00003AAE  0C80 0000 6411          cmp.l     #45,D0
00003AB2  002D      
00003AB4  660E      6412          bne.s     vsprintf_63
00003AB6  2043      6413          move.l    D3,A0
00003AB8  5283      6414          addq.l    #1,D3
00003ABA  2242      6415          move.l    D2,A1
00003ABC  5282      6416          addq.l    #1,D2
00003ABE  1290      6417          move.b    (A0),(A1)
00003AC0  5304      6418          subq.b    #1,D4
00003AC2  6008      6419          bra.s     vsprintf_64
                    6420   vsprintf_63:
00003AC4  2042      6421          move.l    D2,A0
00003AC6  5282      6422          addq.l    #1,D2
00003AC8  10BC 002B 6423          move.b    #43,(A0)
                    6424   vsprintf_64:
00003ACC  5287      6425          addq.l    #1,D7
00003ACE  6000 0032 6426          bra       vsprintf_65
                    6427   vsprintf_60:
00003AD2  4A2E FFCF 6428          tst.b     -49(A6)
00003AD6  6700 002A 6429          beq       vsprintf_65
00003ADA  2043      6430          move.l    D3,A0
00003ADC  1010      6431          move.b    (A0),D0
00003ADE  4880      6432          ext.w     D0
00003AE0  48C0      6433          ext.l     D0
00003AE2  0C80 0000 6434          cmp.l     #45,D0
00003AE6  002D      
00003AE8  660E      6435          bne.s     vsprintf_67
00003AEA  2043      6436          move.l    D3,A0
00003AEC  5283      6437          addq.l    #1,D3
00003AEE  2242      6438          move.l    D2,A1
00003AF0  5282      6439          addq.l    #1,D2
00003AF2  1290      6440          move.b    (A0),(A1)
00003AF4  5304      6441          subq.b    #1,D4
00003AF6  6008      6442          bra.s     vsprintf_68
                    6443   vsprintf_67:
00003AF8  2042      6444          move.l    D2,A0
00003AFA  5282      6445          addq.l    #1,D2
00003AFC  10BC 0020 6446          move.b    #32,(A0)
                    6447   vsprintf_68:
00003B00  5287      6448          addq.l    #1,D7
                    6449   vsprintf_65:
00003B02  4A2E FFD0 6450          tst.b     -48(A6)
00003B06  6700 0066 6451          beq       vsprintf_77
00003B0A  206E 000C 6452          move.l    12(A6),A0
00003B0E  1010      6453          move.b    (A0),D0
00003B10  4880      6454          ext.w     D0
00003B12  48C0      6455          ext.l     D0
00003B14  0C80 0000 6456          cmp.l     #111,D0
00003B18  006F      
00003B1A  671A      6457          beq.s     vsprintf_73
00003B1C  6E0C      6458          bgt.s     vsprintf_76
00003B1E  0C80 0000 6459          cmp.l     #88,D0
00003B22  0058      
00003B24  6710      6460          beq.s     vsprintf_73
00003B26  6000 0046 6461          bra       vsprintf_77
                    6462   vsprintf_76:
00003B2A  0C80 0000 6463          cmp.l     #120,D0
00003B2E  0078      
00003B30  6704      6464          beq.s     vsprintf_73
00003B32  6000 003A 6465          bra       vsprintf_77
                    6466   vsprintf_73:
00003B36  2042      6467          move.l    D2,A0
00003B38  5282      6468          addq.l    #1,D2
00003B3A  10BC 0030 6469          move.b    #48,(A0)
00003B3E  5287      6470          addq.l    #1,D7
00003B40  206E 000C 6471          move.l    12(A6),A0
00003B44  1010      6472          move.b    (A0),D0
00003B46  4880      6473          ext.w     D0
00003B48  48C0      6474          ext.l     D0
00003B4A  0C80 0000 6475          cmp.l     #120,D0
00003B4E  0078      
00003B50  6712      6476          beq.s     vsprintf_79
00003B52  206E 000C 6477          move.l    12(A6),A0
00003B56  1010      6478          move.b    (A0),D0
00003B58  4880      6479          ext.w     D0
00003B5A  48C0      6480          ext.l     D0
00003B5C  0C80 0000 6481          cmp.l     #88,D0
00003B60  0058      
00003B62  660A      6482          bne.s     vsprintf_77
                    6483   vsprintf_79:
00003B64  2042      6484          move.l    D2,A0
00003B66  5282      6485          addq.l    #1,D2
00003B68  10BC 0078 6486          move.b    #120,(A0)
00003B6C  5287      6487          addq.l    #1,D7
                    6488   vsprintf_77:
00003B6E  2042      6489          move.l    D2,A0
00003B70  4210      6490          clr.b     (A0)
00003B72  206E 000C 6491          move.l    12(A6),A0
00003B76  1010      6492          move.b    (A0),D0
00003B78  4880      6493          ext.w     D0
00003B7A  48C0      6494          ext.l     D0
00003B7C  0C80 0000 6495          cmp.l     #105,D0
00003B80  0069      
00003B82  6700 0076 6496          beq       vsprintf_82
00003B86  6E42      6497          bgt.s     vsprintf_93
00003B88  0C80 0000 6498          cmp.l     #99,D0
00003B8C  0063      
00003B8E  6700 0084 6499          beq       vsprintf_96
00003B92  6E1C      6500          bgt.s     vsprintf_94
00003B94  0C80 0000 6501          cmp.l     #88,D0
00003B98  0058      
00003B9A  6700 005E 6502          beq       vsprintf_82
00003B9E  6E00 0184 6503          bgt       vsprintf_80
00003BA2  0C80 0000 6504          cmp.l     #69,D0
00003BA6  0045      
00003BA8  6700 0050 6505          beq       vsprintf_82
00003BAC  6000 0176 6506          bra       vsprintf_80
                    6507   vsprintf_94:
00003BB0  0C80 0000 6508          cmp.l     #101,D0
00003BB4  0065      
00003BB6  6700 0042 6509          beq       vsprintf_82
00003BBA  6E00 0168 6510          bgt       vsprintf_80
00003BBE  0C80 0000 6511          cmp.l     #100,D0
00003BC2  0064      
00003BC4  6734      6512          beq.s     vsprintf_82
00003BC6  6000 015C 6513          bra       vsprintf_80
                    6514   vsprintf_93:
00003BCA  0C80 0000 6515          cmp.l     #117,D0
00003BCE  0075      
00003BD0  6728      6516          beq.s     vsprintf_82
00003BD2  6E1A      6517          bgt.s     vsprintf_95
00003BD4  0C80 0000 6518          cmp.l     #115,D0
00003BD8  0073      
00003BDA  6700 0038 6519          beq       vsprintf_96
00003BDE  6E00 0144 6520          bgt       vsprintf_80
00003BE2  0C80 0000 6521          cmp.l     #111,D0
00003BE6  006F      
00003BE8  6710      6522          beq.s     vsprintf_82
00003BEA  6000 0138 6523          bra       vsprintf_80
                    6524   vsprintf_95:
00003BEE  0C80 0000 6525          cmp.l     #120,D0
00003BF2  0078      
00003BF4  6704      6526          beq.s     vsprintf_82
00003BF6  6000 012C 6527          bra       vsprintf_80
                    6528   vsprintf_82:
00003BFA  4A2E FFD2 6529          tst.b     -46(A6)
00003BFE  6714      6530          beq.s     vsprintf_96
00003C00  4A2E FFCD 6531          tst.b     -51(A6)
00003C04  660E      6532          bne.s     vsprintf_96
00003C06  200D      6533          move.l    A5,D0
00003C08  9087      6534          sub.l     D7,D0
00003C0A  4884      6535          ext.w     D4
00003C0C  48C4      6536          ext.l     D4
00003C0E  9084      6537          sub.l     D4,D0
00003C10  2D40 FFFC 6538          move.l    D0,-4(A6)
                    6539   vsprintf_96:
00003C14  202E FFFC 6540          move.l    -4(A6),D0
00003C18  0C80 0000 6541          cmp.l     #0,D0
00003C1C  0000      
00003C1E  6C04      6542          bge.s     vsprintf_98
00003C20  42AE FFFC 6543          clr.l     -4(A6)
                    6544   vsprintf_98:
00003C24  4A2E FFCD 6545          tst.b     -51(A6)
00003C28  6600 0030 6546          bne       vsprintf_104
00003C2C  4884      6547          ext.w     D4
00003C2E  48C4      6548          ext.l     D4
00003C30  2004      6549          move.l    D4,D0
00003C32  D0AE FFFC 6550          add.l     -4(A6),D0
00003C36  D087      6551          add.l     D7,D0
00003C38  1D40 FFD1 6552          move.b    D0,-47(A6)
                    6553   vsprintf_102:
00003C3C  102E FFD1 6554          move.b    -47(A6),D0
00003C40  4880      6555          ext.w     D0
00003C42  48C0      6556          ext.l     D0
00003C44  220D      6557          move.l    A5,D1
00003C46  534D      6558          subq.w    #1,A5
00003C48  B081      6559          cmp.l     D1,D0
00003C4A  6C0E      6560          bge.s     vsprintf_104
00003C4C  4878 0020 6561          pea       32
00003C50  2F0A      6562          move.l    A2,-(A7)
00003C52  4E93      6563          jsr       (A3)
00003C54  504F      6564          addq.w    #8,A7
00003C56  5286      6565          addq.l    #1,D6
00003C58  60E2      6566          bra       vsprintf_102
                    6567   vsprintf_104:
00003C5A  41EE FFD4 6568          lea       -44(A6),A0
00003C5E  2408      6569          move.l    A0,D2
                    6570   vsprintf_105:
00003C60  2042      6571          move.l    D2,A0
00003C62  4A10      6572          tst.b     (A0)
00003C64  6716      6573          beq.s     vsprintf_107
00003C66  2042      6574          move.l    D2,A0
00003C68  5282      6575          addq.l    #1,D2
00003C6A  1210      6576          move.b    (A0),D1
00003C6C  4881      6577          ext.w     D1
00003C6E  48C1      6578          ext.l     D1
00003C70  2F01      6579          move.l    D1,-(A7)
00003C72  2F0A      6580          move.l    A2,-(A7)
00003C74  4E93      6581          jsr       (A3)
00003C76  504F      6582          addq.w    #8,A7
00003C78  5286      6583          addq.l    #1,D6
00003C7A  60E4      6584          bra       vsprintf_105
                    6585   vsprintf_107:
00003C7C  202E FFFC 6586          move.l    -4(A6),D0
00003C80  1D40 FFD1 6587          move.b    D0,-47(A6)
                    6588   vsprintf_108:
00003C84  102E FFD1 6589          move.b    -47(A6),D0
00003C88  532E FFD1 6590          subq.b    #1,-47(A6)
00003C8C  4A00      6591          tst.b     D0
00003C8E  670E      6592          beq.s     vsprintf_110
00003C90  4878 0030 6593          pea       48
00003C94  2F0A      6594          move.l    A2,-(A7)
00003C96  4E93      6595          jsr       (A3)
00003C98  504F      6596          addq.w    #8,A7
00003C9A  5286      6597          addq.l    #1,D6
00003C9C  60E6      6598          bra       vsprintf_108
                    6599   vsprintf_110:
00003C9E  2043      6600          move.l    D3,A0
00003CA0  4A10      6601          tst.b     (A0)
00003CA2  6700 0048 6602          beq       vsprintf_113
00003CA6  206E 000C 6603          move.l    12(A6),A0
00003CAA  1010      6604          move.b    (A0),D0
00003CAC  4880      6605          ext.w     D0
00003CAE  48C0      6606          ext.l     D0
00003CB0  0C80 0000 6607          cmp.l     #115,D0
00003CB4  0073      
00003CB6  670C      6608          beq.s     vsprintf_116
00003CB8  6E18      6609          bgt.s     vsprintf_119
00003CBA  0C80 0000 6610          cmp.l     #99,D0
00003CBE  0063      
00003CC0  6702      6611          beq.s     vsprintf_116
00003CC2  600E      6612          bra.s     vsprintf_119
                    6613   vsprintf_116:
00003CC4  2005      6614          move.l    D5,D0
00003CC6  5385      6615          subq.l    #1,D5
00003CC8  0C80 0000 6616          cmp.l     #0,D0
00003CCC  0000      
00003CCE  6E02      6617          bgt.s     vsprintf_119
00003CD0  6016      6618          bra.s     vsprintf_115
                    6619   vsprintf_119:
00003CD2  2043      6620          move.l    D3,A0
00003CD4  5283      6621          addq.l    #1,D3
00003CD6  1210      6622          move.b    (A0),D1
00003CD8  4881      6623          ext.w     D1
00003CDA  48C1      6624          ext.l     D1
00003CDC  2F01      6625          move.l    D1,-(A7)
00003CDE  2F0A      6626          move.l    A2,-(A7)
00003CE0  4E93      6627          jsr       (A3)
00003CE2  504F      6628          addq.w    #8,A7
00003CE4  5286      6629          addq.l    #1,D6
00003CE6  6002      6630          bra.s     vsprintf_112
                    6631   vsprintf_115:
00003CE8  6002      6632          bra.s     vsprintf_113
                    6633   vsprintf_112:
00003CEA  60B2      6634          bra       vsprintf_110
                    6635   vsprintf_113:
00003CEC  4A2E FFCD 6636          tst.b     -51(A6)
00003CF0  6700 0030 6637          beq       vsprintf_125
00003CF4  4884      6638          ext.w     D4
00003CF6  48C4      6639          ext.l     D4
00003CF8  2004      6640          move.l    D4,D0
00003CFA  D0AE FFFC 6641          add.l     -4(A6),D0
00003CFE  D087      6642          add.l     D7,D0
00003D00  1D40 FFD1 6643          move.b    D0,-47(A6)
                    6644   vsprintf_123:
00003D04  102E FFD1 6645          move.b    -47(A6),D0
00003D08  4880      6646          ext.w     D0
00003D0A  48C0      6647          ext.l     D0
00003D0C  220D      6648          move.l    A5,D1
00003D0E  534D      6649          subq.w    #1,A5
00003D10  B081      6650          cmp.l     D1,D0
00003D12  6C0E      6651          bge.s     vsprintf_125
00003D14  4878 0020 6652          pea       32
00003D18  2F0A      6653          move.l    A2,-(A7)
00003D1A  4E93      6654          jsr       (A3)
00003D1C  504F      6655          addq.w    #8,A7
00003D1E  5386      6656          subq.l    #1,D6
00003D20  60E2      6657          bra       vsprintf_123
                    6658   vsprintf_125:
00003D22  6014      6659          bra.s     vsprintf_81
                    6660   vsprintf_80:
00003D24  206E 000C 6661          move.l    12(A6),A0
00003D28  1210      6662          move.b    (A0),D1
00003D2A  4881      6663          ext.w     D1
00003D2C  48C1      6664          ext.l     D1
00003D2E  2F01      6665          move.l    D1,-(A7)
00003D30  2F0A      6666          move.l    A2,-(A7)
00003D32  4E93      6667          jsr       (A3)
00003D34  504F      6668          addq.w    #8,A7
00003D36  5286      6669          addq.l    #1,D6
                    6670   vsprintf_81:
00003D38  52AE 000C 6671          addq.l    #1,12(A6)
                    6672   vsprintf_2:
00003D3C  6000 F9D6 6673          bra       vsprintf_1
                    6674   vsprintf_3:
00003D40  4A92      6675          tst.l     (A2)
00003D42  6710      6676          beq.s     vsprintf_126
00003D44  4201      6677          clr.b     D1
00003D46  C2BC 0000 6678          and.l     #255,D1
00003D4A  00FF      
00003D4C  2F01      6679          move.l    D1,-(A7)
00003D4E  2F0A      6680          move.l    A2,-(A7)
00003D50  4E93      6681          jsr       (A3)
00003D52  504F      6682          addq.w    #8,A7
                    6683   vsprintf_126:
00003D54  2006      6684          move.l    D6,D0
00003D56  4CDF 3CFC 6685          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003D5A  4E5E      6686          unlk      A6
00003D5C  4E75      6687          rts
                    6688   @itoa_convert:
00003D5E  4E56 0000 6689          link      A6,#0
00003D62  48E7 3C00 6690          movem.l   D2/D3/D4/D5,-(A7)
00003D66  242E 0008 6691          move.l    8(A6),D2
00003D6A  262E 0010 6692          move.l    16(A6),D3
00003D6E  2A2E 000C 6693          move.l    12(A6),D5
00003D72  2F05      6694          move.l    D5,-(A7)
00003D74  2F03      6695          move.l    D3,-(A7)
00003D76  6100 F5EA 6696          bsr       ULDIV
00003D7A  202F 0004 6697          move.l    4(A7),D0
00003D7E  504F      6698          addq.w    #8,A7
00003D80  2800      6699          move.l    D0,D4
00003D82  BA83      6700          cmp.l     D3,D5
00003D84  651A      6701          blo.s     @itoa_convert_1
00003D86  2F03      6702          move.l    D3,-(A7)
00003D88  2F05      6703          move.l    D5,-(A7)
00003D8A  2F03      6704          move.l    D3,-(A7)
00003D8C  6100 F5D4 6705          bsr       ULDIV
00003D90  2217      6706          move.l    (A7),D1
00003D92  504F      6707          addq.w    #8,A7
00003D94  2F01      6708          move.l    D1,-(A7)
00003D96  2F02      6709          move.l    D2,-(A7)
00003D98  61C4      6710          bsr       @itoa_convert
00003D9A  DEFC 000C 6711          add.w     #12,A7
00003D9E  2400      6712          move.l    D0,D2
                    6713   @itoa_convert_1:
00003DA0  0C84 0000 6714          cmp.l     #9,D4
00003DA4  0009      
00003DA6  6E0A      6715          bgt.s     @itoa_convert_3
00003DA8  2004      6716          move.l    D4,D0
00003DAA  0680 0000 6717          add.l     #48,D0
00003DAE  0030      
00003DB0  600E      6718          bra.s     @itoa_convert_4
                    6719   @itoa_convert_3:
00003DB2  2004      6720          move.l    D4,D0
00003DB4  0680 0000 6721          add.l     #97,D0
00003DB8  0061      
00003DBA  0480 0000 6722          sub.l     #10,D0
00003DBE  000A      
                    6723   @itoa_convert_4:
00003DC0  2042      6724          move.l    D2,A0
00003DC2  1080      6725          move.b    D0,(A0)
00003DC4  2002      6726          move.l    D2,D0
00003DC6  5280      6727          addq.l    #1,D0
00003DC8  4CDF 003C 6728          movem.l   (A7)+,D2/D3/D4/D5
00003DCC  4E5E      6729          unlk      A6
00003DCE  4E75      6730          rts
                    6731   _ltoa:
00003DD0  4E56 0000 6732          link      A6,#0
00003DD4  48E7 3C00 6733          movem.l   D2/D3/D4/D5,-(A7)
00003DD8  242E 0008 6734          move.l    8(A6),D2
00003DDC  262E 000C 6735          move.l    12(A6),D3
00003DE0  2A2E 0010 6736          move.l    16(A6),D5
00003DE4  2803      6737          move.l    D3,D4
00003DE6  0C85 0000 6738          cmp.l     #2,D5
00003DEA  0002      
00003DEC  6D08      6739          blt.s     ltoa_3
00003DEE  0C85 0000 6740          cmp.l     #36,D5
00003DF2  0024      
00003DF4  6F06      6741          ble.s     ltoa_1
                    6742   ltoa_3:
00003DF6  2003      6743          move.l    D3,D0
00003DF8  6000 0052 6744          bra       ltoa_4
                    6745   ltoa_1:
00003DFC  0C85 0000 6746          cmp.l     #10,D5
00003E00  000A      
00003E02  6600 0032 6747          bne       ltoa_5
00003E06  0C82 0000 6748          cmp.l     #0,D2
00003E0A  0000      
00003E0C  6C28      6749          bge.s     ltoa_5
00003E0E  2002      6750          move.l    D2,D0
00003E10  4480      6751          neg.l     D0
00003E12  2400      6752          move.l    D0,D2
00003E14  0C82 0000 6753          cmp.l     #0,D2
00003E18  0000      
00003E1A  6C12      6754          bge.s     ltoa_7
00003E1C  4879 0000 6755          pea       @itoa_1
00003E20  4F06      
00003E22  2F03      6756          move.l    D3,-(A7)
00003E24  6100 F52C 6757          bsr       _strcpy
00003E28  504F      6758          addq.w    #8,A7
00003E2A  2003      6759          move.l    D3,D0
00003E2C  601E      6760          bra.s     ltoa_4
                    6761   ltoa_7:
00003E2E  2044      6762          move.l    D4,A0
00003E30  5284      6763          addq.l    #1,D4
00003E32  10BC 002D 6764          move.b    #45,(A0)
                    6765   ltoa_5:
00003E36  2F05      6766          move.l    D5,-(A7)
00003E38  2F02      6767          move.l    D2,-(A7)
00003E3A  2F04      6768          move.l    D4,-(A7)
00003E3C  6100 FF20 6769          bsr       @itoa_convert
00003E40  DEFC 000C 6770          add.w     #12,A7
00003E44  2800      6771          move.l    D0,D4
00003E46  2044      6772          move.l    D4,A0
00003E48  4210      6773          clr.b     (A0)
00003E4A  2003      6774          move.l    D3,D0
                    6775   ltoa_4:
00003E4C  4CDF 003C 6776          movem.l   (A7)+,D2/D3/D4/D5
00003E50  4E5E      6777          unlk      A6
00003E52  4E75      6778          rts
                    6779   _ultoa:
00003E54  4E56 0000 6780          link      A6,#0
00003E58  48E7 3800 6781          movem.l   D2/D3/D4,-(A7)
00003E5C  262E 0010 6782          move.l    16(A6),D3
00003E60  282E 000C 6783          move.l    12(A6),D4
00003E64  2404      6784          move.l    D4,D2
00003E66  0C83 0000 6785          cmp.l     #2,D3
00003E6A  0002      
00003E6C  6D08      6786          blt.s     ultoa_3
00003E6E  0C83 0000 6787          cmp.l     #36,D3
00003E72  0024      
00003E74  6F04      6788          ble.s     ultoa_1
                    6789   ultoa_3:
00003E76  2004      6790          move.l    D4,D0
00003E78  6018      6791          bra.s     ultoa_4
                    6792   ultoa_1:
00003E7A  2F03      6793          move.l    D3,-(A7)
00003E7C  2F2E 0008 6794          move.l    8(A6),-(A7)
00003E80  2F02      6795          move.l    D2,-(A7)
00003E82  6100 FEDA 6796          bsr       @itoa_convert
00003E86  DEFC 000C 6797          add.w     #12,A7
00003E8A  2400      6798          move.l    D0,D2
00003E8C  2042      6799          move.l    D2,A0
00003E8E  4210      6800          clr.b     (A0)
00003E90  2004      6801          move.l    D4,D0
                    6802   ultoa_4:
00003E92  4CDF 001C 6803          movem.l   (A7)+,D2/D3/D4
00003E96  4E5E      6804          unlk      A6
00003E98  4E75      6805          rts
                    6806   _itoa:
00003E9A  4E56 0000 6807          link      A6,#0
00003E9E  2F2E 0010 6808          move.l    16(A6),-(A7)
00003EA2  2F2E 000C 6809          move.l    12(A6),-(A7)
00003EA6  2F2E 0008 6810          move.l    8(A6),-(A7)
00003EAA  6100 FF24 6811          bsr       _ltoa
00003EAE  DEFC 000C 6812          add.w     #12,A7
00003EB2  4E5E      6813          unlk      A6
00003EB4  4E75      6814          rts
                    6815          section   const
                    6816   
                    6817   @final_~1_1:
00003EB6  0D0A 00   6818          dc.b      13,10,0
                    6819   @final_~1_2:
00003EBA  0D53 7769 6820          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003EBE  7463 6865 
00003EC2  7320 5357 
00003EC6  5B        
00003EC7  372D 305D 6821          dc.b      55,45,48,93,32,61,32,0
00003ECB  203D 2000 
                    6822   @final_~1_3:
00003ED0  3000      6823          dc.b      48,0
                    6824   @final_~1_4:
00003ED2  3100      6825          dc.b      49,0
                    6826   @final_~1_5:
00003ED4  0D0A 4475 6827          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003ED8  6D70 204D 
00003EDC  656D 6F72 
00003EE0  79        
00003EE1  2042 6C6F 6828          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003EE5  636B 3A20 
00003EE9  3C45 5343 
00003EED  3E20      
00003EEF  746F 2041 6829          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003EF3  626F 7274 
00003EF7  2C20 3C53 
00003EFB  50        
00003EFC  4143 453E 6830          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003F00  2074 6F20 
00003F04  436F 6E74 
00003F08  69        
00003F09  6E75 6500 6831          dc.b      110,117,101,0
                    6832   @final_~1_6:
00003F0E  0D0A 456E 6833          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003F12  7465 7220 
00003F16  5374 6172 
00003F1A  74        
00003F1B  2041 6464 6834          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003F1F  7265 7373 
00003F23  3A20 00   
                    6835   @final_~1_7:
00003F26  0D0A 2530 6836          dc.b      13,10,37,48,56,120,32,0
00003F2A  3878 2000 
                    6837   @final_~1_8:
00003F2E  2530 3258 6838          dc.b      37,48,50,88,0
00003F32  00        
                    6839   @final_~1_9:
00003F34  2020 00   6840          dc.b      32,32,0
                    6841   @final_~1_10:
00003F38  0D0A 4669 6842          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003F3C  6C6C 204D 
00003F40  656D 6F72 
00003F44  79        
00003F45  2042 6C6F 6843          dc.b      32,66,108,111,99,107,0
00003F49  636B 00   
                    6844   @final_~1_11:
00003F4C  0D0A 456E 6845          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003F50  7465 7220 
00003F54  456E 6420 
00003F58  41        
00003F59  6464 7265 6846          dc.b      100,100,114,101,115,115,58,32,0
00003F5D  7373 3A20 
00003F61  00        
                    6847   @final_~1_12:
00003F62  0D0A 456E 6848          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003F66  7465 7220 
00003F6A  4669 6C6C 
00003F6E  20        
00003F6F  4461 7461 6849          dc.b      68,97,116,97,58,32,0
00003F73  3A20 00   
                    6850   @final_~1_13:
00003F76  0D0A 4669 6851          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003F7A  6C6C 696E 
00003F7E  6720 4164 
00003F82  64        
00003F83  7265 7373 6852          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003F87  6573 205B 
00003F8B  2425 3038 
00003F8F  58        
00003F90  202D 2024 6853          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003F94  2530 3858 
00003F98  5D20 7769 
00003F9C  7468      
00003F9E  2024 2530 6854          dc.b      32,36,37,48,50,88,0
00003FA2  3258 00   
                    6855   @final_~1_14:
00003FA6  0D0A 5573 6856          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003FAA  6520 4879 
00003FAE  7065 7254 
00003FB2  65        
00003FB3  726D 696E 6857          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003FB7  616C 2074 
00003FBB  6F20 5365 
00003FBF  6E64 2054 6858          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003FC3  6578 7420 
00003FC7  4669 6C65 
00003FCB  2028 2E68 6859          dc.b      32,40,46,104,101,120,41,13,10,0
00003FCF  6578 290D 
00003FD3  0A00      
                    6860   @final_~1_15:
00003FD6  0D0A 4C6F 6861          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003FDA  6164 2046 
00003FDE  6169 6C65 
00003FE2  64        
00003FE3  2061 7420 6862          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003FE7  4164 6472 
00003FEB  6573 7320 
00003FEF  3D        
00003FF0  205B 2425 6863          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003FF4  3038 585D 
00003FF8  0D0A 00   
                    6864   @final_~1_16:
00003FFC  0D0A 5375 6865          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004000  6363 6573 
00004004  733A 2044 
00004008  6F        
00004009  776E 6C6F 6866          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000400D  6164 6564 
00004011  2025 6420 
00004015  6279 7465 6867          dc.b      98,121,116,101,115,13,10,0
00004019  730D 0A00 
                    6868   @final_~1_17:
0000401E  0D0A 4578 6869          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004022  616D 696E 
00004026  6520 616E 
0000402A  64        
0000402B  2043 6861 6870          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000402F  6E67 6520 
00004033  4D65 6D6F 
00004037  72        
00004038  7900      6871          dc.b      121,0
                    6872   @final_~1_18:
0000403A  0D0A 3C45 6873          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000403E  5343 3E20 
00004042  746F 2053 
00004046  746F      
00004048  702C 203C 6874          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000404C  5350 4143 
00004050  453E 2074 
00004054  6F20      
00004056  4164 7661 6875          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000405A  6E63 652C 
0000405E  2027 2D27 
00004062  2074      
00004064  6F20 476F 6876          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004068  2042 6163 
0000406C  6B2C 203C 
00004070  4441      
00004072  5441 3E20 6877          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004076  746F 2063 
0000407A  6861 6E67 
0000407E  65        
0000407F  00        6878          dc.b      0
                    6879   @final_~1_19:
00004080  0D0A 456E 6880          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004084  7465 7220 
00004088  4164 6472 
0000408C  65        
0000408D  7373 3A20 6881          dc.b      115,115,58,32,0
00004091  00        
                    6882   @final_~1_20:
00004092  0D0A 5B25 6883          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004096  3038 785D 
0000409A  203A 2025 
0000409E  3032 78   
000040A1  2020 00   6884          dc.b      32,32,0
                    6885   @final_~1_21:
000040A4  0D0A 5761 6886          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000040A8  726E 696E 
000040AC  6720 4368 
000040B0  61        
000040B1  6E67 6520 6887          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000040B5  4661 696C 
000040B9  6564 3A20 
000040BD  57        
000040BE  726F 7465 6888          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000040C2  205B 2530 
000040C6  3278 5D2C 
000040CA  20        
000040CB  5265 6164 6889          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000040CF  205B 2530 
000040D3  3278 5D00 
                    6890   @final_~1_22:
000040D8  0D0A 4C6F 6891          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000040DC  6164 696E 
000040E0  6720 5072 
000040E4  6F        
000040E5  6772 616D 6892          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000040E9  2046 726F 
000040ED  6D20 5350 
000040F1  49        
000040F2  2046 6C61 6893          dc.b      32,70,108,97,115,104,46,46,46,46,0
000040F6  7368 2E2E 
000040FA  2E2E 00   
                    6894   @final_~1_23:
000040FE  2425 3038 6895          dc.b      36,37,48,56,88,32,32,0
00004102  5820 2000 
                    6896   @final_~1_24:
00004106  2000      6897          dc.b      32,0
                    6898   @final_~1_25:
00004108  2E00      6899          dc.b      46,0
                    6900   @final_~1_26:
0000410A  2563 00   6901          dc.b      37,99,0
                    6902   @final_~1_27:
0000410E  00        6903          dc.b      0
                    6904   @final_~1_28:
00004110  0D0A 0D0A 6905          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004114  2044 3020 
00004118  3D20 2425 
0000411C  3038 58   
0000411F  2020 4130 6906          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004123  203D 2024 
00004127  2530 3858 
0000412B  00        
                    6907   @final_~1_29:
0000412C  0D0A 2044 6908          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004130  3120 3D20 
00004134  2425 3038 
00004138  5820 20   
0000413B  4131 203D 6909          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000413F  2024 2530 
00004143  3858 00   
                    6910   @final_~1_30:
00004146  0D0A 2044 6911          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000414A  3220 3D20 
0000414E  2425 3038 
00004152  5820 20   
00004155  4132 203D 6912          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004159  2024 2530 
0000415D  3858 00   
                    6913   @final_~1_31:
00004160  0D0A 2044 6914          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004164  3320 3D20 
00004168  2425 3038 
0000416C  5820 20   
0000416F  4133 203D 6915          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004173  2024 2530 
00004177  3858 00   
                    6916   @final_~1_32:
0000417A  0D0A 2044 6917          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000417E  3420 3D20 
00004182  2425 3038 
00004186  5820 20   
00004189  4134 203D 6918          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000418D  2024 2530 
00004191  3858 00   
                    6919   @final_~1_33:
00004194  0D0A 2044 6920          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004198  3520 3D20 
0000419C  2425 3038 
000041A0  5820 20   
000041A3  4135 203D 6921          dc.b      65,53,32,61,32,36,37,48,56,88,0
000041A7  2024 2530 
000041AB  3858 00   
                    6922   @final_~1_34:
000041AE  0D0A 2044 6923          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000041B2  3620 3D20 
000041B6  2425 3038 
000041BA  5820 20   
000041BD  4136 203D 6924          dc.b      65,54,32,61,32,36,37,48,56,88,0
000041C1  2024 2530 
000041C5  3858 00   
                    6925   @final_~1_35:
000041C8  0D0A 2044 6926          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000041CC  3720 3D20 
000041D0  2425 3038 
000041D4  5820 20   
000041D7  4137 203D 6927          dc.b      65,55,32,61,32,36,37,48,56,88,0
000041DB  2024 2530 
000041DF  3858 00   
                    6928   @final_~1_36:
000041E2  0D0A 0D0A 6929          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000041E6  5553 5020 
000041EA  3D20 2425 
000041EE  3038 58   
000041F1  2020 2841 6930          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000041F5  3729 2055 
000041F9  7365 7220 
000041FD  5350      
000041FF  00        6931          dc.b      0
                    6932   @final_~1_37:
00004200  0D0A 5353 6933          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004204  5020 3D20 
00004208  2425 3038 
0000420C  5820 20   
0000420F  2841 3729 6934          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004213  2053 7570 
00004217  6572 7669 
0000421B  73        
0000421C  6F72 2053 6935          dc.b      111,114,32,83,80,0
00004220  5000      
                    6936   @final_~1_38:
00004222  0D0A 2053 6937          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004226  5220 3D20 
0000422A  2425 3034 
0000422E  5820 20   
00004231  2000      6938          dc.b      32,0
                    6939   @final_~1_39:
00004234  2020 205B 6940          dc.b      32,32,32,91,0
00004238  00        
                    6941   @final_~1_40:
0000423A  0D0A 2050 6942          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000423E  4320 3D20 
00004242  2425 3038 
00004246  5820 20   
00004249  00        6943          dc.b      0
                    6944   @final_~1_41:
0000424A  5B40 2042 6945          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
0000424E  5245 414B 
00004252  504F 494E 
00004256  545D 00   
                    6946   @final_~1_42:
0000425A  0D0A 5750 6947          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000425E  2564 203D 
00004262  2025 7300 
                    6948   @final_~1_43:
00004266  0D0A 0D0A 6949          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000426A  0D0A 0D0A 
0000426E  0D0A 0D0A 
00004272  5369 6E   
00004275  676C 6520 6950          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004279  5374 6570 
0000427D  2020 3A5B 
00004281  4F        
00004282  4E5D 00   6951          dc.b      78,93,0
                    6952   @final_~1_44:
00004286  0D0A 4272 6953          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000428A  6561 6B20 
0000428E  506F 696E 
00004292  74        
00004293  7320 3A5B 6954          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004297  4469 7361 
0000429B  626C 6564 
0000429F  5D        
000042A0  00        6955          dc.b      0
                    6956   @final_~1_45:
000042A2  0D0A 5072 6957          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000042A6  6573 7320 
000042AA  3C53 5041 
000042AE  4345      
000042B0  3E20 746F 6958          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000042B4  2045 7865 
000042B8  6375 7465 
000042BC  20        
000042BD  4E65 7874 6959          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000042C1  2049 6E73 
000042C5  7472 7563 
000042C9  7469 6F6E 6960          dc.b      116,105,111,110,0
000042CD  00        
                    6961   @final_~1_46:
000042CE  0D0A 5072 6962          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000042D2  6573 7320 
000042D6  3C45 5343 
000042DA  3E20      
000042DC  746F 2052 6963          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000042E0  6573 756D 
000042E4  6520 5072 
000042E8  6F67 7261 6964          dc.b      111,103,114,97,109,0
000042EC  6D00      
                    6965   @final_~1_47:
000042EE  0D0A 496C 6966          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000042F2  6C65 6761 
000042F6  6C20 4461 
000042FA  74        
000042FB  6120 5265 6967          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000042FF  6769 7374 
00004303  6572 203A 
00004307  20        
00004308  5573 6520 6968          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000430C  4430 2D44 
00004310  372E 2E2E 
00004314  2E2E      
00004316  0D0A 00   6969          dc.b      13,10,0
                    6970   @final_~1_48:
0000431A  0D0A 4425 6971          dc.b      13,10,68,37,99,32,61,32,0
0000431E  6320 3D20 
00004322  00        
                    6972   @final_~1_49:
00004324  0D0A 496C 6973          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004328  6C65 6761 
0000432C  6C20 4164 
00004330  64        
00004331  7265 7373 6974          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004335  2052 6567 
00004339  6973 7465 
0000433D  7220 3A20 6975          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004341  5573 6520 
00004345  4130 2D41 
00004349  372E      
0000434B  2E2E 2E2E 6976          dc.b      46,46,46,46,13,10,0
0000434F  0D0A 00   
                    6977   @final_~1_50:
00004352  0D0A 4125 6978          dc.b      13,10,65,37,99,32,61,32,0
00004356  6320 3D20 
0000435A  00        
                    6979   @final_~1_51:
0000435C  0D0A 5573 6980          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004360  6572 2053 
00004364  5020 3D20 
00004368  00        
                    6981   @final_~1_52:
0000436A  0D0A 496C 6982          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000436E  6C65 6761 
00004372  6C20 5265 
00004376  67        
00004377  6973 7465 6983          dc.b      105,115,116,101,114,46,46,46,46,0
0000437B  722E 2E2E 
0000437F  2E00      
                    6984   @final_~1_53:
00004382  0D0A 5379 6985          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004386  7374 656D 
0000438A  2053 5020 
0000438E  3D        
0000438F  2000      6986          dc.b      32,0
                    6987   @final_~1_54:
00004392  0D0A 5043 6988          dc.b      13,10,80,67,32,61,32,0
00004396  203D 2000 
                    6989   @final_~1_55:
0000439A  0D0A 5352 6990          dc.b      13,10,83,82,32,61,32,0
0000439E  203D 2000 
                    6991   @final_~1_56:
000043A2  0D0A 496C 6992          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000043A6  6C65 6761 
000043AA  6C20 5265 
000043AE  67        
000043AF  6973 7465 6993          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000043B3  723A 2055 
000043B7  7365 2041 
000043BB  30        
000043BC  2D41 372C 6994          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000043C0  2044 302D 
000043C4  4437 2C20 
000043C8  5353 50   
000043CB  2C20 5553 6995          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000043CF  502C 2050 
000043D3  4320 6F72 
000043D7  2053      
000043D9  520D 0A00 6996          dc.b      82,13,10,0
                    6997   @final_~1_57:
000043DE  0D0A 0D0A 6998          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000043E2  4E75 6D20 
000043E6  2020 2020 
000043EA  4164      
000043EC  6472 6573 6999          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000043F0  7320 2020 
000043F4  2020 2049 
000043F8  6E        
000043F9  7374 7275 7000          dc.b      115,116,114,117,99,116,105,111,110,0
000043FD  6374 696F 
00004401  6E00      
                    7001   @final_~1_58:
00004404  0D0A 2D2D 7002          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004408  2D20 2020 
0000440C  2020 2D2D 
00004410  2D2D 2D   
00004413  2D2D 2D2D 7003          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004417  2020 2020 
0000441B  2D2D 2D2D 
0000441F  2D2D 2D   
00004422  2D2D 2D2D 7004          dc.b      45,45,45,45,0
00004426  00        
                    7005   @final_~1_59:
00004428  0D0A 4E6F 7006          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000442C  2042 7265 
00004430  616B 506F 
00004434  69        
00004435  6E74 7320 7007          dc.b      110,116,115,32,83,101,116,0
00004439  5365 7400 
                    7008   @final_~1_60:
0000443E  0D0A 2533 7009          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004442  6420 2020 
00004446  2020 2425 
0000444A  3038 78   
0000444D  00        7010          dc.b      0
                    7011   @final_~1_61:
0000444E  0D0A 4E75 7012          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004452  6D20 2020 
00004456  2020 4164 
0000445A  6472      
0000445C  6573 7300 7013          dc.b      101,115,115,0
                    7014   @final_~1_62:
00004460  0D0A 2D2D 7015          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004464  2D20 2020 
00004468  2020 2D2D 
0000446C  2D2D 2D   
0000446F  2D2D 2D2D 7016          dc.b      45,45,45,45,0
00004473  00        
                    7017   @final_~1_63:
00004474  0D0A 4E6F 7018          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004478  2057 6174 
0000447C  6368 506F 
00004480  69        
00004481  6E74 7320 7019          dc.b      110,116,115,32,83,101,116,0
00004485  5365 7400 
                    7020   @final_~1_64:
0000448A  0D0A 456E 7021          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000448E  7465 7220 
00004492  4272 6561 
00004496  6B        
00004497  2050 6F69 7022          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000449B  6E74 204E 
0000449F  756D 6265 
000044A3  72        
000044A4  3A20 00   7023          dc.b      58,32,0
                    7024   @final_~1_65:
000044A8  0D0A 496C 7025          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000044AC  6C65 6761 
000044B0  6C20 5261 
000044B4  6E        
000044B5  6765 203A 7026          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000044B9  2055 7365 
000044BD  2030 202D 
000044C1  2037      
000044C3  00        7027          dc.b      0
                    7028   @final_~1_66:
000044C4  0D0A 4272 7029          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000044C8  6561 6B20 
000044CC  506F 696E 
000044D0  74        
000044D1  2043 6C65 7030          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000044D5  6172 6564 
000044D9  2E2E 2E2E 
000044DD  2E        
000044DE  0D0A 00   7031          dc.b      13,10,0
                    7032   @final_~1_67:
000044E2  0D0A 4272 7033          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000044E6  6561 6B20 
000044EA  506F 696E 
000044EE  74        
000044EF  2077 6173 7034          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000044F3  6E27 7420 
000044F7  5365 742E 
000044FB  2E        
000044FC  2E2E 2E00 7035          dc.b      46,46,46,0
                    7036   @final_~1_68:
00004500  0D0A 456E 7037          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004504  7465 7220 
00004508  5761 7463 
0000450C  68        
0000450D  2050 6F69 7038          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004511  6E74 204E 
00004515  756D 6265 
00004519  72        
0000451A  3A20 00   7039          dc.b      58,32,0
                    7040   @final_~1_69:
0000451E  0D0A 5761 7041          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004522  7463 6820 
00004526  506F 696E 
0000452A  74        
0000452B  2043 6C65 7042          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000452F  6172 6564 
00004533  2E2E 2E2E 
00004537  2E        
00004538  0D0A 00   7043          dc.b      13,10,0
                    7044   @final_~1_70:
0000453C  0D0A 5761 7045          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004540  7463 6820 
00004544  506F 696E 
00004548  74        
00004549  2057 6173 7046          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000454D  206E 6F74 
00004551  2053 6574 
00004555  2E        
00004556  2E2E 2E2E 7047          dc.b      46,46,46,46,0
0000455A  00        
                    7048   @final_~1_71:
0000455C  0D0A 4E6F 7049          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004560  2046 5245 
00004564  4520 4272 
00004568  6561      
0000456A  6B20 506F 7050          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000456E  696E 7473 
00004572  2E2E 2E2E 
00004576  2E        
00004577  00        7051          dc.b      0
                    7052   @final_~1_72:
00004578  0D0A 4272 7053          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000457C  6561 6B20 
00004580  506F 696E 
00004584  74        
00004585  2041 6464 7054          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004589  7265 7373 
0000458D  3A20 00   
                    7055   @final_~1_73:
00004590  0D0A 4572 7056          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004594  726F 7220 
00004598  3A20 4272 
0000459C  65        
0000459D  616B 2050 7057          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000045A1  6F69 6E74 
000045A5  7320 4341 
000045A9  4E        
000045AA  4E4F 5420 7058          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000045AE  6265 2073 
000045B2  6574 2061 
000045B6  74        
000045B7  204F 4444 7059          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000045BB  2061 6464 
000045BF  7265 7373 
000045C3  65        
000045C4  7300      7060          dc.b      115,0
                    7061   @final_~1_74:
000045C6  0D0A 4572 7062          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000045CA  726F 7220 
000045CE  3A20 4272 
000045D2  65        
000045D3  616B 2050 7063          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000045D7  6F69 6E74 
000045DB  7320 4341 
000045DF  4E        
000045E0  4E4F 5420 7064          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000045E4  6265 2073 
000045E8  6574 2066 
000045EC  6F        
000045ED  7220 524F 7065          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000045F1  4D20 696E 
000045F5  2052 616E 
000045F9  67        
000045FA  6520 3A20 7066          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000045FE  5B24 302D 
00004602  2430 3030 
00004606  3037 46   
00004609  4646 5D00 7067          dc.b      70,70,93,0
                    7068   @final_~1_75:
0000460E  0D0A 4572 7069          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004612  726F 723A 
00004616  2042 7265 
0000461A  61        
0000461B  6B20 506F 7070          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000461F  696E 7420 
00004623  416C 7265 
00004627  6164 7920 7071          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000462B  4578 6973 
0000462F  7473 2061 
00004633  74        
00004634  2041 6464 7072          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004638  7265 7373 
0000463C  203A 2025 
00004640  30        
00004641  3878 0D0A 7073          dc.b      56,120,13,10,0
00004645  00        
                    7074   @final_~1_76:
00004646  0D0A 4272 7075          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000464A  6561 6B20 
0000464E  506F 696E 
00004652  74        
00004653  2053 6574 7076          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004657  2061 7420 
0000465B  4164 6472 
0000465F  65        
00004660  7373 3A20 7077          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004664  5B24 2530 
00004668  3878 5D00 
                    7078   @final_~1_77:
0000466C  0D0A 4E6F 7079          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004670  2046 5245 
00004674  4520 5761 
00004678  7463      
0000467A  6820 506F 7080          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000467E  696E 7473 
00004682  2E2E 2E2E 
00004686  2E        
00004687  00        7081          dc.b      0
                    7082   @final_~1_78:
00004688  0D0A 5761 7083          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000468C  7463 6820 
00004690  506F 696E 
00004694  74        
00004695  2041 6464 7084          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004699  7265 7373 
0000469D  3A20 00   
                    7085   @final_~1_79:
000046A0  0D0A 4572 7086          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000046A4  726F 723A 
000046A8  2057 6174 
000046AC  63        
000046AD  6820 506F 7087          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000046B1  696E 7420 
000046B5  416C 7265 
000046B9  6164 7920 7088          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000046BD  5365 7420 
000046C1  6174 2041 
000046C5  64        
000046C6  6472 6573 7089          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000046CA  7320 3A20 
000046CE  2530 3878 
000046D2  0D        
000046D3  0A00      7090          dc.b      10,0
                    7091   @final_~1_80:
000046D6  0D0A 5761 7092          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000046DA  7463 6820 
000046DE  506F 696E 
000046E2  74        
000046E3  2053 6574 7093          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000046E7  2061 7420 
000046EB  4164 6472 
000046EF  65        
000046F0  7373 3A20 7094          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000046F4  5B24 2530 
000046F8  3878 5D00 
                    7095   @final_~1_81:
000046FC  0D0A 0D0A 7096          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004700  0D0A 0D0A 
00004704  4042 5245 
00004708  414B 50   
0000470B  4F49 4E54 7097          dc.b      79,73,78,84,0
0000470F  00        
                    7098   @final_~1_82:
00004710  0D0A 5369 7099          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004714  6E67 6C65 
00004718  2053 7465 
0000471C  70        
0000471D  203A 205B 7100          dc.b      32,58,32,91,79,78,93,0
00004721  4F4E 5D00 
                    7101   @final_~1_83:
00004726  0D0A 4272 7102          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000472A  6561 6B50 
0000472E  6F69 6E74 
00004732  73        
00004733  203A 205B 7103          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004737  456E 6162 
0000473B  6C65 645D 
0000473F  00        
                    7104   @final_~1_84:
00004740  0D0A 5072 7105          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004744  6573 7320 
00004748  3C45 5343 
0000474C  3E20      
0000474E  746F 2052 7106          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004752  6573 756D 
00004756  6520 5573 
0000475A  6572 2050 7107          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000475E  726F 6772 
00004762  616D 0D0A 
00004766  00        
                    7108   @final_~1_85:
00004768  0D0A 556E 7109          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000476C  6B6E 6F77 
00004770  6E20 436F 
00004774  6D        
00004775  6D61 6E64 7110          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004779  2E2E 2E2E 
0000477D  2E0D 0A00 
                    7111   @final_~1_86:
00004782  0D0A 5072 7112          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004786  6F67 7261 
0000478A  6D20 456E 
0000478E  64        
0000478F  6564 2028 7113          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004793  5452 4150 
00004797  2023 3135 
0000479B  292E      
0000479D  2E2E 2E00 7114          dc.b      46,46,46,0
                    7115   @final_~1_87:
000047A2  0D0A 4B69 7116          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000047A6  6C6C 2041 
000047AA  6C6C 2042 
000047AE  72        
000047AF  6561 6B20 7117          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000047B3  506F 696E 
000047B7  7473 2E2E 
000047BB  2E        
000047BC  2879 2F6E 7118          dc.b      40,121,47,110,41,63,0
000047C0  293F 00   
                    7119   @final_~1_88:
000047C4  0D0A 4B69 7120          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000047C8  6C6C 2041 
000047CC  6C6C 2057 
000047D0  61        
000047D1  7463 6820 7121          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000047D5  506F 696E 
000047D9  7473 2E2E 
000047DD  2E        
000047DE  2879 2F6E 7122          dc.b      40,121,47,110,41,63,0
000047E2  293F 00   
                    7123   @final_~1_89:
000047E6  0D0A 2D2D 7124          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000047EA  2D2D 2D2D 
000047EE  2D2D 2D2D 
000047F2  2D2D 2D   
000047F5  2D2D 2D2D 7125          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000047F9  2D2D 2D2D 
000047FD  2D2D 2D2D 
00004801  2D2D 2D   
00004804  2D2D 2D2D 7126          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004808  2D2D 2D2D 
0000480C  2D2D 2D2D 
00004810  2D2D 2D   
00004813  2D2D 2D2D 7127          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004817  2D2D 2D2D 
0000481B  2D2D 2D2D 
0000481F  2D2D 2D   
00004822  2D2D 2D2D 7128          dc.b      45,45,45,45,45,45,0
00004826  2D2D 00   
                    7129   @final_~1_90:
0000482A  0D0A 2020 7130          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
0000482E  4465 6275 
00004832  6767 6572 
00004836  20        
00004837  436F 6D6D 7131          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000483B  616E 6420 
0000483F  5375 6D6D 
00004843  6172 7900 7132          dc.b      97,114,121,0
                    7133   @final_~1_91:
00004848  0D0A 2020 7134          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000484C  2E28 7265 
00004850  6729 2020 
00004854  2020      
00004856  2020 202D 7135          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000485A  2043 6861 
0000485E  6E67 6520 
00004862  5265      
00004864  6769 7374 7136          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004868  6572 733A 
0000486C  2065 2E67 
00004870  2041 302D 7137          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004874  4137 2C44 
00004878  302D 4437 
0000487C  2C50 43   
0000487F  2C53 5350 7138          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004883  2C55 5350 
00004887  2C53 5200 
                    7139   @final_~1_92:
0000488C  0D0A 2020 7140          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004890  4244 2F42 
00004894  532F 4243 
00004898  2F42 4B   
0000489B  2020 2D20 7141          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000489F  4272 6561 
000048A3  6B20 506F 
000048A7  69        
000048A8  6E74 3A20 7142          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000048AC  4469 7370 
000048B0  6C61 792F 
000048B4  53        
000048B5  6574 2F43 7143          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000048B9  6C65 6172 
000048BD  2F4B 696C 
000048C1  6C        
000048C2  00        7144          dc.b      0
                    7145   @final_~1_93:
000048C4  0D0A 2020 7146          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000048C8  4320 2020 
000048CC  2020 2020 
000048D0  2020 20   
000048D3  2020 2D20 7147          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000048D7  436F 7079 
000048DB  2050 726F 
000048DF  67        
000048E0  7261 6D20 7148          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000048E4  6672 6F6D 
000048E8  2046 6C61 
000048EC  73        
000048ED  6820 746F 7149          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000048F1  204D 6169 
000048F5  6E20 4D65 
000048F9  6D        
000048FA  6F72 7900 7150          dc.b      111,114,121,0
                    7151   @final_~1_94:
000048FE  0D0A 2020 7152          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004902  4420 2020 
00004906  2020 2020 
0000490A  2020 20   
0000490D  2020 2D20 7153          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004911  4475 6D70 
00004915  204D 656D 
00004919  6F        
0000491A  7279 2043 7154          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
0000491E  6F6E 7465 
00004922  6E74 7320 
00004926  746F 2053 7155          dc.b      116,111,32,83,99,114,101,101,110,0
0000492A  6372 6565 
0000492E  6E00      
                    7156   @final_~1_95:
00004930  0D0A 2020 7157          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004934  4520 2020 
00004938  2020 2020 
0000493C  2020 20   
0000493F  2020 2D20 7158          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004943  456E 7465 
00004947  7220 5374 
0000494B  72        
0000494C  696E 6720 7159          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004950  696E 746F 
00004954  204D 656D 
00004958  6F72 7900 7160          dc.b      111,114,121,0
                    7161   @final_~1_96:
0000495C  0D0A 2020 7162          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004960  4620 2020 
00004964  2020 2020 
00004968  2020 20   
0000496B  2020 2D20 7163          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000496F  4669 6C6C 
00004973  204D 656D 
00004977  6F        
00004978  7279 2077 7164          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000497C  6974 6820 
00004980  4461 7461 
00004984  00        
                    7165   @final_~1_97:
00004986  0D0A 2020 7166          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000498A  4720 2020 
0000498E  2020 2020 
00004992  2020 20   
00004995  2020 2D20 7167          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004999  476F 2050 
0000499D  726F 6772 
000049A1  61        
000049A2  6D20 5374 7168          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000049A6  6172 7469 
000049AA  6E67 2061 
000049AE  74        
000049AF  2041 6464 7169          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000049B3  7265 7373 
000049B7  3A20 2425 
000049BB  30        
000049BC  3858 00   7170          dc.b      56,88,0
                    7171   @final_~1_98:
000049C0  0D0A 2020 7172          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000049C4  4C20 2020 
000049C8  2020 2020 
000049CC  2020 20   
000049CF  2020 2D20 7173          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000049D3  4C6F 6164 
000049D7  2050 726F 
000049DB  67        
000049DC  7261 6D20 7174          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000049E0  282E 4845 
000049E4  5820 6669 
000049E8  6C        
000049E9  6529 2066 7175          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000049ED  726F 6D20 
000049F1  4C61 7074 
000049F5  6F        
000049F6  7000      7176          dc.b      112,0
                    7177   @final_~1_99:
000049F8  0D0A 2020 7178          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000049FC  4D20 2020 
00004A00  2020 2020 
00004A04  2020 20   
00004A07  2020 2D20 7179          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004A0B  4D65 6D6F 
00004A0F  7279 2045 
00004A13  78        
00004A14  616D 696E 7180          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004A18  6520 616E 
00004A1C  6420 4368 
00004A20  61        
00004A21  6E67 6500 7181          dc.b      110,103,101,0
                    7182   @final_~1_100:
00004A26  0D0A 2020 7183          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004A2A  5020 2020 
00004A2E  2020 2020 
00004A32  2020 20   
00004A35  2020 2D20 7184          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004A39  5072 6F67 
00004A3D  7261 6D20 
00004A41  46        
00004A42  6C61 7368 7185          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004A46  204D 656D 
00004A4A  6F72 7920 
00004A4E  7769 7468 7186          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004A52  2055 7365 
00004A56  7220 5072 
00004A5A  6F67 7261 7187          dc.b      111,103,114,97,109,0
00004A5E  6D00      
                    7188   @final_~1_101:
00004A60  0D0A 2020 7189          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004A64  5220 2020 
00004A68  2020 2020 
00004A6C  2020 20   
00004A6F  2020 2D20 7190          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004A73  4469 7370 
00004A77  6C61 7920 
00004A7B  36        
00004A7C  3830 3030 7191          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004A80  2052 6567 
00004A84  6973 7465 
00004A88  72        
00004A89  7300      7192          dc.b      115,0
                    7193   @final_~1_102:
00004A8C  0D0A 2020 7194          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004A90  5320 2020 
00004A94  2020 2020 
00004A98  2020 20   
00004A9B  2020 2D20 7195          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004A9F  546F 6767 
00004AA3  6C65 204F 
00004AA7  4E        
00004AA8  2F4F 4646 7196          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004AAC  2053 696E 
00004AB0  676C 6520 
00004AB4  53        
00004AB5  7465 7020 7197          dc.b      116,101,112,32,77,111,100,101,0
00004AB9  4D6F 6465 
00004ABD  00        
                    7198   @final_~1_103:
00004ABE  0D0A 2020 7199          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004AC2  544D 2020 
00004AC6  2020 2020 
00004ACA  2020 20   
00004ACD  2020 2D20 7200          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004AD1  5465 7374 
00004AD5  204D 656D 
00004AD9  6F        
00004ADA  7279 00   7201          dc.b      114,121,0
                    7202   @final_~1_104:
00004ADE  0D0A 2020 7203          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004AE2  5453 2020 
00004AE6  2020 2020 
00004AEA  2020 20   
00004AED  2020 2D20 7204          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004AF1  5465 7374 
00004AF5  2053 7769 
00004AF9  74        
00004AFA  6368 6573 7205          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004AFE  3A20 5357 
00004B02  372D 3000 
                    7206   @final_~1_105:
00004B06  0D0A 2020 7207          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004B0A  5444 2020 
00004B0E  2020 2020 
00004B12  2020 20   
00004B15  2020 2D20 7208          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004B19  5465 7374 
00004B1D  2044 6973 
00004B21  70        
00004B22  6C61 7973 7209          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004B26  3A20 4C45 
00004B2A  4473 2061 
00004B2E  6E        
00004B2F  6420 372D 7210          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004B33  5365 676D 
00004B37  656E 7400 
                    7211   @final_~1_106:
00004B3C  0D0A 2020 7212          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004B40  5744 2F57 
00004B44  532F 5743 
00004B48  2F57 4B   
00004B4B  2020 2D20 7213          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004B4F  5761 7463 
00004B53  6820 506F 
00004B57  696E      
00004B59  743A 2044 7214          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004B5D  6973 706C 
00004B61  6179 2F53 
00004B65  65        
00004B66  742F 436C 7215          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004B6A  6561 722F 
00004B6E  4B69 6C6C 
00004B72  00        
                    7216   @final_~1_107:
00004B74  0D0A 2300 7217          dc.b      13,10,35,0
                    7218   @final_~1_108:
00004B78  0D0A 5072 7219          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004B7C  6F67 7261 
00004B80  6D20 5275 
00004B84  6E        
00004B85  6E69 6E67 7220          dc.b      110,105,110,103,46,46,46,46,46,0
00004B89  2E2E 2E2E 
00004B8D  2E00      
                    7221   @final_~1_109:
00004B90  0D0A 5072 7222          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004B94  6573 7320 
00004B98  3C52 4553 
00004B9C  4554      
00004B9E  3E20 6275 7223          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004BA2  7474 6F6E 
00004BA6  203C 4B65 
00004BAA  79        
00004BAB  303E 206F 7224          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004BAF  6E20 4445 
00004BB3  3120 746F 
00004BB7  2073      
00004BB9  746F 7000 7225          dc.b      116,111,112,0
                    7226   @final_~1_110:
00004BBE  0D0A 4572 7227          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004BC2  726F 723A 
00004BC6  2050 7265 
00004BCA  73        
00004BCB  7320 2747 7228          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004BCF  2720 6669 
00004BD3  7273 7420 
00004BD7  74        
00004BD8  6F20 7374 7229          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004BDC  6172 7420 
00004BE0  7072 6F67 
00004BE4  7261 6D00 7230          dc.b      114,97,109,0
                    7231   @final_~1_111:
00004BE8  0D0A 5369 7232          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004BEC  6E67 6C65 
00004BF0  2053 7465 
00004BF4  70        
00004BF5  2020 3A5B 7233          dc.b      32,32,58,91,79,78,93,0
00004BF9  4F4E 5D00 
                    7234   @final_~1_112:
00004BFE  0D0A 5072 7235          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004C02  6573 7320 
00004C06  2747 2720 
00004C0A  74        
00004C0B  6F20 5472 7236          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004C0F  6163 6520 
00004C13  5072 6F67 
00004C17  72        
00004C18  616D 2066 7237          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004C1C  726F 6D20 
00004C20  6164 6472 
00004C24  6573 7320 7238          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004C28  2425 582E 
00004C2C  2E2E 2E2E 
00004C30  00        
                    7239   @final_~1_113:
00004C32  0D0A 5075 7240          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004C36  7368 203C 
00004C3A  5245 5345 
00004C3E  5420      
00004C40  4275 7474 7241          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004C44  6F6E 3E20 
00004C48  746F 2053 
00004C4C  74        
00004C4D  6F70 2E2E 7242          dc.b      111,112,46,46,46,46,46,0
00004C51  2E2E 2E00 
                    7243   @final_~1_114:
00004C56  0D0A 5369 7244          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004C5A  6E67 6C65 
00004C5E  2053 7465 
00004C62  70        
00004C63  203A 205B 7245          dc.b      32,58,32,91,79,70,70,93,0
00004C67  4F46 465D 
00004C6B  00        
                    7246   @final_~1_115:
00004C6C  0D0A 4272 7247          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C70  6561 6B20 
00004C74  506F 696E 
00004C78  74        
00004C79  7320 3A5B 7248          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004C7D  456E 6162 
00004C81  6C65 645D 
00004C85  00        
                    7249   @final_~1_116:
00004C86  0D0A 5072 7250          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004C8A  6573 7320 
00004C8E  3C45 5343 
00004C92  3E20      
00004C94  746F 2052 7251          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004C98  6573 756D 
00004C9C  6520 5573 
00004CA0  6572 2050 7252          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004CA4  726F 6772 
00004CA8  616D 2E2E 
00004CAC  2E        
00004CAD  2E2E 00   7253          dc.b      46,46,0
                    7254   @final_~1_117:
00004CB0  0D0A 5369 7255          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004CB4  6E67 6C65 
00004CB8  2053 7465 
00004CBC  70        
00004CBD  2020 3A5B 7256          dc.b      32,32,58,91,79,70,70,93,0
00004CC1  4F46 465D 
00004CC5  00        
                    7257   @final_~1_118:
00004CC6  0D0A 0D0A 7258          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004CCA  5072 6F67 
00004CCE  7261 6D20 
00004CD2  41        
00004CD3  424F 5254 7259          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004CD7  2021 2121 
00004CDB  2121 210D 
00004CDF  0A00      
                    7260   @final_~1_119:
00004CE2  2573 0D0A 7261          dc.b      37,115,13,10,0
00004CE6  00        
                    7262   @final_~1_120:
00004CE8  0D0A 0D0A 7263          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004CEC  5072 6F67 
00004CF0  7261 6D20 
00004CF4  41        
00004CF5  424F 5254 7264          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004CF9  2021 2121 
00004CFD  2121 00   
                    7265   @final_~1_121:
00004D00  0D0A 556E 7266          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004D04  6861 6E64 
00004D08  6C65 6420 
00004D0C  49        
00004D0D  6E74 6572 7267          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004D11  7275 7074 
00004D15  3A20 4952 
00004D19  5125 6420 7268          dc.b      81,37,100,32,33,33,33,33,33,0
00004D1D  2121 2121 
00004D21  2100      
                    7269   @final_~1_122:
00004D24  4144 4452 7270          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004D28  4553 5320 
00004D2C  4552 524F 
00004D30  523A 20   
00004D33  3136 206F 7271          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004D37  7220 3332 
00004D3B  2042 6974 
00004D3F  2054      
00004D41  7261 6E73 7272          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004D45  6665 7220 
00004D49  746F 2F66 
00004D4D  726F 6D20 7273          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004D51  616E 204F 
00004D55  4444 2041 
00004D59  64        
00004D5A  6472 6573 7274          dc.b      100,114,101,115,115,46,46,46,46,0
00004D5E  732E 2E2E 
00004D62  2E00      
                    7275   @final_~1_123:
00004D64  556E 6861 7276          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004D68  6E64 6C65 
00004D6C  6420 5472 
00004D70  6170 2021 7277          dc.b      97,112,32,33,33,33,33,33,0
00004D74  2121 2121 
00004D78  00        
                    7278   @final_~1_124:
00004D7A  4255 5320 7279          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004D7E  4572 726F 
00004D82  7221 00   
                    7280   @final_~1_125:
00004D86  4144 4452 7281          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004D8A  4553 5320 
00004D8E  4572 726F 
00004D92  7221      
00004D94  00        7282          dc.b      0
                    7283   @final_~1_126:
00004D96  494C 4C45 7284          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004D9A  4741 4C20 
00004D9E  494E 5354 
00004DA2  5255 43   
00004DA5  5449 4F4E 7285          dc.b      84,73,79,78,0
00004DA9  00        
                    7286   @final_~1_127:
00004DAA  4449 5649 7287          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004DAE  4445 2042 
00004DB2  5920 5A45 
00004DB6  524F 00   
                    7288   @final_~1_128:
00004DBA  2743 484B 7289          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004DBE  2720 494E 
00004DC2  5354 5255 
00004DC6  4354 49   
00004DC9  4F4E 00   7290          dc.b      79,78,0
                    7291   @final_~1_129:
00004DCC  5452 4150 7292          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004DD0  5620 494E 
00004DD4  5354 5255 
00004DD8  4354 49   
00004DDB  4F4E 00   7293          dc.b      79,78,0
                    7294   @final_~1_130:
00004DDE  5052 4956 7295          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004DE2  494C 4547 
00004DE6  4520 5649 
00004DEA  4F4C 41   
00004DED  5449 4F4E 7296          dc.b      84,73,79,78,0
00004DF1  00        
                    7297   @final_~1_131:
00004DF2  554E 494E 7298          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004DF6  4954 4941 
00004DFA  4C49 5345 
00004DFE  4420 49   
00004E01  5251 00   7299          dc.b      82,81,0
                    7300   @final_~1_132:
00004E04  5350 5552 7301          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004E08  494F 5553 
00004E0C  2049 5251 
00004E10  00        
                    7302   @final_~1_133:
00004E12  0D0A 5374 7303          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004E16  6172 7420 
00004E1A  4164 6472 
00004E1E  65        
00004E1F  7373 2069 7304          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004E23  6E20 4D65 
00004E27  6D6F 7279 
00004E2B  3A20 00   7305          dc.b      58,32,0
                    7306   @final_~1_134:
00004E2E  0D0A 456E 7307          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004E32  7465 7220 
00004E36  5374 7269 
00004E3A  6E        
00004E3B  6720 2845 7308          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004E3F  5343 2074 
00004E43  6F20 656E 
00004E47  64        
00004E48  2920 3A00 7309          dc.b      41,32,58,0
                    7310   @final_~1_135:
00004E4C  0D0A 5374 7311          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004E50  6172 7420 
00004E54  4164 6472 
00004E58  65        
00004E59  7373 3A20 7312          dc.b      115,115,58,32,0
00004E5D  00        
                    7313   @final_~1_136:
00004E5E  0D0A 456E 7314          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
00004E62  6420 4164 
00004E66  6472 6573 
00004E6A  73        
00004E6B  3A20 00   7315          dc.b      58,32,0
                    7316   @final_~1_137:
00004E6E  2564 00   7317          dc.b      37,100,0
                    7318   @final_~1_138:
00004E72  5363 6F72 7319          dc.b      83,99,111,114,101,58,0
00004E76  653A 00   
                    7320   @final_~1_139:
00004E7A  4E61 6D65 7321          dc.b      78,97,109,101,58,32,74,111,110,97,116,104,97
00004E7E  3A20 4A6F 
00004E82  6E61 7468 
00004E86  61        
00004E87  6E20 5A68 7322          dc.b      110,32,90,104,97,110,103,44,32,83,116,117,100
00004E8B  616E 672C 
00004E8F  2053 7475 
00004E93  64        
00004E94  656E 7420 7323          dc.b      101,110,116,32,78,117,109,98,101,114,58,32,52
00004E98  4E75 6D62 
00004E9C  6572 3A20 
00004EA0  34        
00004EA1  3037 3931 7324          dc.b      48,55,57,49,52,50,56,0
00004EA5  3432 3800 
                    7325   @final_~1_140:
00004EAA  436F 7079 7326          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004EAE  7269 6768 
00004EB2  7420 2843 
00004EB6  2920 504A 7327          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004EBA  2044 6176 
00004EBE  6965 7320 
00004EC2  3230      
00004EC4  3136 00   7328          dc.b      49,54,0
                    7329   @final_~1_141:
00004EC8  0D0A 5275 7330          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00004ECC  6E6E 696E 
00004ED0  672E 2E2E 
00004ED4  2E        
00004ED5  2E00      7331          dc.b      46,0
                    7332   @final_~1_142:
00004ED8  5275 6E6E 7333          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00004EDC  696E 672E 
00004EE0  2E2E 2E2E 
00004EE4  00        
                    7334   @final_~1_143:
00004EE6  4279 3A20 7335          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00004EEA  504A 2044 
00004EEE  6176 6965 
00004EF2  73        
00004EF3  00        7336          dc.b      0
                    7337   @final_~1_144:
00004EF4  0D0A 2573 7338          dc.b      13,10,37,115,0
00004EF8  00        
                    7339   _screensize:
00004EFA  0000 0050 7340          dc.l      80,40
00004EFE  0000 0028 
                    7341          section   data
00004F02            7342                   align
          0000 4F02 7343   DataStart       equ       *
                    7344   
                    7345   *********************************************************************************************************
                    7346   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7347   * to ram as part of the CStart routine in this file
                    7348   *********************************************************************************************************
                    7349   
                    7350   generateFood_firsttime:
00004F02  0000 0001 7351          dc.l      1
                    7352   @itoa_1:
00004F06  2D32 3134 7353          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004F0A  3734 3833 
00004F0E  3634 3800 
                    7354          section   bss
00004F12            7355                   align
          0000 4F12 7356   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7357   
                    7358   *********************************************************************************************************
                    7359   * Section for Uninitialised Data held in ROM as constants
                    7360   *********************************************************************************************************
                    7361   
08030000            7362                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0010 7363   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7364   
                    7365   
08030000            7366   bss             org       bss
                    7367   
                    7368   *********************************************************************************************************
                    7369   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7370   * install the exception handler using the C function InstallExceptionHandler()
                    7371   *********************************************************************************************************
                    7372   
                    7373   
                    7374   
08030000            7375   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            7376   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            7377   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            7378   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            7379   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            7380   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            7381   VCheck           ds.l    1      ditto
0803001C            7382   VTrapV           ds.l    1      ditto
08030020            7383   VPrivilege       ds.l    1      ditto
08030024            7384   VTrace           ds.l    1
08030028            7385   VLine1010emul    ds.l    1
0803002C            7386   VLine1111emul    ds.l    1
08030030            7387   VUnassigned1     ds.l    1
08030034            7388   VUnassigned2     ds.l    1
08030038            7389   VUnassigned3     ds.l    1
0803003C            7390   VUninit_IRQ      ds.l    1
08030040            7391   VUnassigned4     ds.l    1
08030044            7392   VUnassigned5     ds.l    1
08030048            7393   VUnassigned6     ds.l    1
0803004C            7394   VUnassigned7     ds.l    1
08030050            7395   VUnassigned8     ds.l    1
08030054            7396   VUnassigned9     ds.l    1
08030058            7397   VUnassigned10    ds.l    1
0803005C            7398   VUnassigned11    ds.l    1
08030060            7399   VSpuriousIRQ     ds.l    1
                    7400   
                    7401   * Interrupt handlers Vector 25-31
08030064            7402   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            7403   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            7404   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            7405   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            7406   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            7407   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            7408   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7409   
                    7410   * Trap Handler vectors 32-47
08030080            7411   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            7412   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            7413   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            7414   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            7415   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            7416   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            7417   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            7418   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            7419   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            7420   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            7421   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            7422   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            7423   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            7424   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            7425   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            7426   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7427   
                    7428   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7429   
                    7430   ***********************************************************************************************************
                    7431   * Other Variables
                    7432   ***********************************************************************************************************
                    7433   *__DebugA5       ds.l    1
                    7434   *__UserA5        ds.l    1
                    7435   
                    7436   ***********************************************************************************************************
080300C0            7437   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            7438   __allocp:       ds.l    0       ; start of allocation units
080300C4            7439   __heap:         ds.l    0       ; pointers for malloc functions
                    7440   
                    7441   *__himem:       ds.l    himem            ; highest memory location + 1
                    7442   *__stklen:      ds.l    stklen           ; default stack size
                    7443   
                    7444   *********************************************************************************************************
                    7445   * Section for Heap
                    7446   *********************************************************************************************************
                    7447   
                    7448   _i:
080300C4            7449          ds.b      4
                    7450   _x:
080300C8            7451          ds.b      4
                    7452   _y:
080300CC            7453          ds.b      4
                    7454   _z:
080300D0            7455          ds.b      4
                    7456   _PortA_Count:
080300D4            7457          ds.b      4
                    7458   _Trace:
080300D8            7459          ds.b      4
                    7460   _GoFlag:
080300DC            7461          ds.b      4
                    7462   _Echo:
080300E0            7463          ds.b      4
                    7464   _d0:
080300E4            7465          ds.b      4
                    7466   _d1:
080300E8            7467          ds.b      4
                    7468   _d2:
080300EC            7469          ds.b      4
                    7470   _d3:
080300F0            7471          ds.b      4
                    7472   _d4:
080300F4            7473          ds.b      4
                    7474   _d5:
080300F8            7475          ds.b      4
                    7476   _d6:
080300FC            7477          ds.b      4
                    7478   _d7:
08030100            7479          ds.b      4
                    7480   _a0:
08030104            7481          ds.b      4
                    7482   _a1:
08030108            7483          ds.b      4
                    7484   _a2:
0803010C            7485          ds.b      4
                    7486   _a3:
08030110            7487          ds.b      4
                    7488   _a4:
08030114            7489          ds.b      4
                    7490   _a5:
08030118            7491          ds.b      4
                    7492   _a6:
0803011C            7493          ds.b      4
                    7494   _PC:
08030120            7495          ds.b      4
                    7496   _SSP:
08030124            7497          ds.b      4
                    7498   _USP:
08030128            7499          ds.b      4
                    7500   _SR:
0803012C            7501          ds.b      2
                    7502   _BreakPointAddress:
0803012E            7503          ds.b      32
                    7504   _BreakPointInstruction:
0803014E            7505          ds.b      16
                    7506   _BreakPointSetOrCleared:
0803015E            7507          ds.b      32
                    7508   _InstructionSize:
0803017E            7509          ds.b      4
                    7510   _WatchPointAddress:
08030182            7511          ds.b      32
                    7512   _WatchPointSetOrCleared:
080301A2            7513          ds.b      32
                    7514   _WatchPointString:
080301C2            7515          ds.b      800
                    7516   _TempString:
080304E2            7517          ds.b      100
                    7518   _Timer8Count:
08030546            7519          ds.b      4
                    7520   _score:
0803054A            7521          ds.b      4
                    7522   _timer:
0803054E            7523          ds.b      4
                    7524   _Snake:
08030552            7525          ds.b      16406
                    7526   _waiting_for_direction_to_be_imp:
08034568            7527          ds.b      4
                    7528          section   heap
0803456C            7529                   align
          0803 456C 7530   bssEnd          equ *                   end of storage space for unitialised variables
                    7531   *                                       we have to copy all initialised variable from rom to here at startup
          0803 456C 7532   heap   equ       *
0803456C            7533                    align
          0000 0000

Assembly errors: 0
